import React, { useState, useCallback } from "react"; // Import c√°c hook c·∫ßn thi·∫øt t·ª´ React: useState ƒë·ªÉ qu·∫£n l√Ω state, useCallback ƒë·ªÉ memoize h√†m
import "./CheckoutModal.css"; // Import file CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng giao di·ªán modal thanh to√°n

// --- Component CheckoutModal ---
// Hi·ªÉn th·ªã m·ªôt modal ƒë·ªÉ ng∆∞·ªùi d√πng x√°c nh·∫≠n ƒë∆°n h√†ng v√† nh·∫≠p th√¥ng tin giao h√†ng
// Nh·∫≠n c√°c props:
// - cart: danh s√°ch c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng
// - totalPrice: t·ªïng gi√° tr·ªã c·ªßa gi·ªè h√†ng
// - onConfirm: h√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n (truy·ªÅn k√®m th√¥ng tin giao h√†ng)
// - onCancel: h√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng h·ªßy b·ªè modal
const CheckoutModal = ({ cart, totalPrice, onConfirm, onCancel }) => {
  // --- H·∫±ng s·ªë c·ª•c b·ªô ---
  // Th√¥ng b√°o hi·ªÉn th·ªã khi gi·ªè h√†ng r·ªóng trong modal checkout
  const EMPTY_CART_MODAL_MESSAGE = "Kh√¥ng c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng";

  // --- State qu·∫£n l√Ω th√¥ng tin giao h√†ng ng∆∞·ªùi d√πng nh·∫≠p v√†o form ---
  const [shippingInfo, setShippingInfo] = useState({
    name: "", // State l∆∞u H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n (ban ƒë·∫ßu r·ªóng)
    address: "", // State l∆∞u ƒê·ªãa ch·ªâ giao h√†ng chi ti·∫øt (ban ƒë·∫ßu r·ªóng)
    phone: "", // State l∆∞u S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá (ban ƒë·∫ßu r·ªóng)
  });

  // --- State qu·∫£n l√Ω c√°c th√¥ng b√°o l·ªói x√°c th·ª±c cho t·ª´ng tr∆∞·ªùng c·ªßa form ---
  // Object n√†y c√≥ key l√† t√™n tr∆∞·ªùng (name, address, phone) v√† value l√† chu·ªói th√¥ng b√°o l·ªói t∆∞∆°ng ·ª©ng
  const [validationErrors, setValidationErrors] = useState({});

  // --- H√†m x·ª≠ l√Ω s·ª± ki·ªán khi gi√° tr·ªã c·ªßa c√°c input trong form thay ƒë·ªïi ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi (·ªü ƒë√¢y l√† kh√¥ng c√≥)
  const handleChange = useCallback((e) => {
    const { name, value } = e.target; // L·∫•y t√™n (name) v√† gi√° tr·ªã (value) c·ªßa input ƒëang thay ƒë·ªïi
    // C·∫≠p nh·∫≠t state shippingInfo: gi·ªØ l·∫°i c√°c gi√° tr·ªã c≈© (...prev), ch·ªâ c·∫≠p nh·∫≠t gi√° tr·ªã
    // c·ªßa tr∆∞·ªùng c√≥ t√™n (name) t∆∞∆°ng ·ª©ng v·ªõi gi√° tr·ªã m·ªõi (value).
    setShippingInfo((prev) => ({ ...prev, [name]: value }));
    // X√≥a th√¥ng b√°o l·ªói cho tr∆∞·ªùng input hi·ªán t·∫°i ngay khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu g√µ
    setValidationErrors((prev) => ({ ...prev, [name]: "" }));
  }, []); // Dependency array r·ªóng: h√†m kh√¥ng ph·ª• thu·ªôc v√†o bi·∫øn n√†o c·∫ßn theo d√µi t·ª´ scope ngo√†i

  // --- H√†m ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa to√†n b·ªô form tr∆∞·ªõc khi submit ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi 'shippingInfo' thay ƒë·ªïi
  const validateForm = useCallback(() => {
    const errors = {}; // T·∫°o m·ªôt object r·ªóng ƒë·ªÉ l∆∞u tr·ªØ c√°c l·ªói t√¨m th·∫•y
    const { name, address, phone } = shippingInfo; // L·∫•y th√¥ng tin t·ª´ state shippingInfo

    // --- Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ---
    if (!name.trim()) {
      errors.name = "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n"; // Th√™m l·ªói n·∫øu t√™n r·ªóng ho·∫∑c ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng
    }
    if (!address.trim()) {
      errors.address = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng"; // Th√™m l·ªói n·∫øu ƒë·ªãa ch·ªâ r·ªóng
    }
    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i r·ªóng tr∆∞·ªõc
    if (!phone.trim()) {
      errors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"; // Th√™m l·ªói n·∫øu s·ªë ƒëi·ªán tho·∫°i r·ªóng
    } else if (!/^(0|\+84)?[3|5|7|8|9][0-9]{8}$/.test(phone)) { // Regex ki·ªÉm tra ƒë·ªãnh d·∫°ng SƒêT VN (c√≥ th·ªÉ b·∫Øt ƒë·∫ßu b·∫±ng 0 ho·∫∑c +84, theo sau l√† 8 s·ªë)
      // N·∫øu kh√¥ng r·ªóng, ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam b·∫±ng Regular Expression (regex)
      errors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë·ªãnh d·∫°ng 0xxxxxxxxx ho·∫∑c +84xxxxxxxxx"; // Th√™m l·ªói n·∫øu ƒë·ªãnh d·∫°ng kh√¥ng kh·ªõp v√† g·ª£i √Ω ƒë·ªãnh d·∫°ng
    }

    setValidationErrors(errors); // C·∫≠p nh·∫≠t state validationErrors v·ªõi c√°c l·ªói t√¨m ƒë∆∞·ª£c
    // Tr·∫£ v·ªÅ true n·∫øu object errors r·ªóng (nghƒ©a l√† kh√¥ng c√≥ l·ªói n√†o), ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ false
    return Object.keys(errors).length === 0;
  }, [shippingInfo]); // Dependency array: h√†m ph·ª• thu·ªôc v√†o state 'shippingInfo' ƒë·ªÉ ki·ªÉm tra validation

  // --- H√†m x·ª≠ l√Ω s·ª± ki·ªán khi form ƒë∆∞·ª£c submit ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi 'validateForm' ho·∫∑c 'onConfirm' thay ƒë·ªïi.
  const handleSubmit = useCallback((e) => {
    e.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi submit m·∫∑c ƒë·ªãnh c·ªßa form (trang kh√¥ng b·ªã reload)
    // G·ªçi h√†m validateForm ƒë·ªÉ ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa form
    if (validateForm()) {
      // N·∫øu form h·ª£p l·ªá, g·ªçi h√†m onConfirm ƒë∆∞·ª£c truy·ªÅn t·ª´ props, truy·ªÅn k√®m th√¥ng tin giao h√†ng
      onConfirm(shippingInfo); // shippingInfo ƒë∆∞·ª£c closure gi·ªØ l·∫°i t·ª´ scope ngo√†i
    }
  }, [validateForm, onConfirm, shippingInfo]); // Dependency array: h√†m ph·ª• thu·ªôc v√†o h√†m validateForm v√† h√†m onConfirm t·ª´ props.

  return (
    // --- Overlay cho Modal ---
    // Overlay bao ph·ªß to√†n m√†n h√¨nh, t·∫°o hi·ªáu ·ª©ng n·ªÅn m·ªù.
    // onClick={onCancel}: Khi click v√†o overlay (b√™n ngo√†i n·ªôi dung modal), g·ªçi h√†m onCancel ƒë·ªÉ ƒë√≥ng modal.
    <div className="modal-overlay" onClick={onCancel}>
      {/* --- N·ªôi dung ch√≠nh c·ªßa Modal --- */}
      {/* onClick={(e) => e.stopPropagation()}: NgƒÉn ch·∫∑n s·ª± ki·ªán click t·ª´ modal-content
          lan t·ªèa (propagate) l√™n l·ªõp modal-overlay, ƒë·ªÉ click v√†o n·ªôi dung modal kh√¥ng l√†m ƒë√≥ng modal. */}
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <h2 className="modal-title">üõí X√°c nh·∫≠n thanh to√°n</h2> {/* Ti√™u ƒë·ªÅ c·ªßa modal */}

        {/* --- Ph·∫ßn t√≥m t·∫Øt th√¥ng tin ƒë∆°n h√†ng --- */}
        {/* Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m trong gi·ªè v√† t·ªïng ti·ªÅn */}
        <div className="order-summary">
          <h3>üìã Th√¥ng tin ƒë∆°n h√†ng</h3> {/* Ti√™u ƒë·ªÅ ph·∫ßn t√≥m t·∫Øt */}
          {/* Ki·ªÉm tra n·∫øu gi·ªè h√†ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt */}
          {cart.length > 0 ? (
            <> {/* S·ª≠ d·ª•ng Fragment */}
              {/* Danh s√°ch c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng hi·ªÉn th·ªã trong modal */}
              <ul className="cart-items-list">
                {cart.map((item) => ( // Map qua m·∫£ng 'cart'
                  <li key={item.id} className="cart-item">
                    <span className="item-name">{item.name}</span>{" "}
                    {/* T√™n s·∫£n ph·∫©m */}
                    <span className="item-quantity">x {item.quantity}</span>{" "}
                    {/* S·ªë l∆∞·ª£ng */}
                    <span className="item-price">
                      {/* T·ªïng gi√° c·ªßa s·∫£n ph·∫©m ƒë√≥ (gi√° * s·ªë l∆∞·ª£ng), ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VN */}
                      {(item.price * item.quantity).toLocaleString("vi-VN")} VNƒê
                    </span>
                  </li>
                ))}
              </ul>
              {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn c·ªßa to√†n b·ªô ƒë∆°n h√†ng */}
              <p className="total-price">
                <strong>T·ªïng ti·ªÅn:</strong> {totalPrice.toLocaleString("vi-VN")}{" "}
                VNƒê {/* T·ªïng ti·ªÅn, ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VN */}
              </p>
            </>
          ) : (
            // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu gi·ªè h√†ng tr·ªëng (d√π n√∫t "Mua h√†ng" n√™n b·ªã disabled trong tr∆∞·ªùng h·ª£p n√†y)
            <p className="empty-cart-message">{EMPTY_CART_MODAL_MESSAGE}</p>
          )}
        </div>

        {/* --- Form nh·∫≠p th√¥ng tin giao h√†ng --- */}
        <form onSubmit={handleSubmit} className="shipping-form">
          <h3>üöö Th√¥ng tin giao h√†ng</h3> {/* Ti√™u ƒë·ªÅ ph·∫ßn form */}

          {/* Group input cho H·ªç v√† t√™n */}
          <div className="form-group">
            <label htmlFor="name">H·ªç v√† t√™n:</label>{" "}
            {/* Label li√™n k·∫øt v·ªõi input b·∫±ng thu·ªôc t√≠nh 'htmlFor' v√† 'id' */}
            <input
              type="text"
              id="name" // ID c·ªßa input
              name="name" // T√™n input, d√πng ƒë·ªÉ c·∫≠p nh·∫≠t state
              placeholder="Nh·∫≠p h·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n"
              value={shippingInfo.name} // G√°n gi√° tr·ªã t·ª´ state shippingInfo.name
              onChange={handleChange} // G·∫Øn h√†m x·ª≠ l√Ω khi gi√° tr·ªã input thay ƒë·ªïi
              className={validationErrors.name ? "error" : ""} // Th√™m class 'error' n·∫øu c√≥ l·ªói x√°c th·ª±c cho tr∆∞·ªùng n√†y
              aria-label="Nh·∫≠p h·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n" // Aria label cho kh·∫£ nƒÉng ti·∫øp c·∫≠n
            />
            {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥ l·ªói cho tr∆∞·ªùng 'name' */}
            {validationErrors.name && (
              <span className="error-message">{validationErrors.name}</span>
            )}
          </div>

          {/* Group input cho ƒê·ªãa ch·ªâ */}
          <div className="form-group">
            <label htmlFor="address">ƒê·ªãa ch·ªâ:</label>
            <input
              type="text"
              id="address"
              name="address"
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng chi ti·∫øt"
              value={shippingInfo.address}
              onChange={handleChange}
              className={validationErrors.address ? "error" : ""}
              aria-label="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng"
            />
            {validationErrors.address && (
              <span className="error-message">{validationErrors.address}</span>
            )}
          </div>

          {/* Group input cho S·ªë ƒëi·ªán tho·∫°i */}
          <div className="form-group">
            <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i:</label>
            <input
              type="tel" // Lo·∫°i input tel g·ª£i √Ω b√†n ph√≠m s·ªë tr√™n thi·∫øt b·ªã di ƒë·ªông
              id="phone"
              name="phone"
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
              value={shippingInfo.phone}
              onChange={handleChange}
              className={validationErrors.phone ? "error" : ""}
              aria-label="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
            />
            {validationErrors.phone && (
              <span className="error-message">{validationErrors.phone}</span>
            )}
          </div>

          {/* --- Nh√≥m c√°c n√∫t h√†nh ƒë·ªông trong modal --- */}
          <div className="modal-buttons">
            {/* N√∫t X√°c nh·∫≠n ƒë·∫∑t h√†ng (submit form) */}
            <button
              type="submit" // Type="submit" ƒë·ªÉ k√≠ch ho·∫°t s·ª± ki·ªán submit form
              className="confirm-button"
              aria-label="X√°c nh·∫≠n ƒë·∫∑t h√†ng"
            >
              ‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng
            </button>
            {/* N√∫t H·ªßy b·ªè (ƒë√≥ng modal) */}
            <button
              type="button" // Quan tr·ªçng: ƒë·∫∑t type="button" ƒë·ªÉ ngƒÉn n√∫t n√†y submit form
              className="cancel-button"
              onClick={onCancel} // G·∫Øn h√†m onCancel t·ª´ props
              aria-label="H·ªßy ƒë·∫∑t h√†ng"
            >
              ‚ùå H·ªßy
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CheckoutModal; // Export component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c (v√≠ d·ª•: CartPage)