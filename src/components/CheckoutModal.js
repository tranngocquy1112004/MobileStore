// src/components/CheckoutModal.js

// Import necessary React hooks: useState, useCallback
import React, { useState, useCallback } from "react";
// Import the CSS file for styling
import "./CheckoutModal.css";

// --- Component CheckoutModal ---
// Hi·ªÉn th·ªã m·ªôt modal ƒë·ªÉ x√°c nh·∫≠n thanh to√°n.
// Nh·∫≠n c√°c props: cart (m·∫£ng s·∫£n ph·∫©m), totalPrice (s·ªë), onConfirm (h√†m), onCancel (h√†m).
const CheckoutModal = ({ cart, totalPrice, onConfirm, onCancel }) => {
  // --- H·∫±ng s·ªë c·ª•c b·ªô ---
  const EMPTY_CART_MODAL_MESSAGE = "Kh√¥ng c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ thanh to√°n.";

  // --- State cho form nh·∫≠p th√¥ng tin giao h√†ng ---
  const [shippingInfo, setShippingInfo] = useState({
    name: "", // T√™n ng∆∞·ªùi nh·∫≠n
    address: "", // ƒê·ªãa ch·ªâ giao h√†ng
    phone: "", // S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá
  });

  // --- State cho c√°c l·ªói validation ---
  // L∆∞u tr·ªØ c√°c th√¥ng b√°o l·ªói cho t·ª´ng tr∆∞·ªùng input (key l√† t√™n tr∆∞·ªùng, value l√† th√¥ng b√°o l·ªói)
  const [validationErrors, setValidationErrors] = useState({});

  // --- Handler cho s·ª± ki·ªán thay ƒë·ªïi input ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m n√†y kh√¥ng b·ªã t·∫°o l·∫°i kh√¥ng c·∫ßn thi·∫øt
  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    // C·∫≠p nh·∫≠t state shippingInfo, s·ª≠ d·ª•ng functional update ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y gi√° tr·ªã state m·ªõi nh·∫•t
    setShippingInfo((prev) => ({ ...prev, [name]: value }));
    // X√≥a l·ªói validation cho tr∆∞·ªùng input hi·ªán t·∫°i khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu nh·∫≠p
    setValidationErrors((prev) => ({ ...prev, [name]: "" }));
  }, []); // Kh√¥ng ph·ª• thu·ªôc v√†o bi·∫øn n√†o t·ª´ scope ngo√†i c·∫ßn theo d√µi s·ª± thay ƒë·ªïi

  // --- H√†m validation form ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m n√†y kh√¥ng b·ªã t·∫°o l·∫°i kh√¥ng c·∫ßn thi·∫øt
  const validateForm = useCallback(() => {
    const errors = {}; // ƒê·ªëi t∆∞·ª£ng l∆∞u tr·ªØ c√°c l·ªói t√¨m th·∫•y
    const { name, address, phone } = shippingInfo; // L·∫•y th√¥ng tin t·ª´ state shippingInfo

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (kh√¥ng ƒë∆∞·ª£c r·ªóng sau khi lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu/cu·ªëi)
    if (!name.trim()) {
      errors.name = "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n.";
    }
    if (!address.trim()) {
      errors.address = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng.";
    }

    // Ki·ªÉm tra v√† validate ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i (Regex cho s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam)
    if (!phone.trim()) {
      errors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.";
    } else if (!/^(0|\+84)?[3|5|7|8|9][0-9]{8}$/.test(phone.trim())) { // Th√™m trim() cho phone
      errors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë·ªãnh d·∫°ng 0xxxxxxxxx ho·∫∑c +84xxxxxxxxx.";
    }

    // C·∫≠p nh·∫≠t state validationErrors v·ªõi c√°c l·ªói t√¨m th·∫•y
    setValidationErrors(errors);
    // Tr·∫£ v·ªÅ true n·∫øu kh√¥ng c√≥ l·ªói n√†o (s·ªë l∆∞·ª£ng key trong ƒë·ªëi t∆∞·ª£ng errors l√† 0)
    return Object.keys(errors).length === 0;
  }, [shippingInfo]); // Ph·ª• thu·ªôc v√†o state shippingInfo ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã hi·ªán t·∫°i

  // --- Handler cho vi·ªác submit form ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m n√†y kh√¥ng b·ªã t·∫°o l·∫°i kh√¥ng c·∫ßn thi·∫øt
  const handleSubmit = useCallback((e) => {
    e.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi submit form m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát

    // Th·ª±c hi·ªán validation form. N·∫øu form h·ª£p l·ªá:
    if (validateForm()) {
      // G·ªçi h√†m onConfirm (ƒë∆∞·ª£c truy·ªÅn t·ª´ component cha) v√† truy·ªÅn th√¥ng tin giao h√†ng
      onConfirm(shippingInfo);
    }
    // N·∫øu form kh√¥ng h·ª£p l·ªá, h√†m validateForm ƒë√£ t·ª± ƒë·ªông c·∫≠p nh·∫≠t state validationErrors
  }, [validateForm, onConfirm, shippingInfo]); // Ph·ª• thu·ªôc v√†o validateForm, onConfirm, v√† shippingInfo

  // Ki·ªÉm tra n·∫øu gi·ªè h√†ng r·ªóng ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o thay v√¨ form
  const isCartEmpty = !Array.isArray(cart) || cart.length === 0;

  return (
    // --- L·ªõp ph·ªß Modal ---
    // Click v√†o l·ªõp ph·ªß s·∫Ω g·ªçi h√†m onCancel ƒë·ªÉ ƒë√≥ng modal.
    <div className="modal-overlay" onClick={onCancel}>
      {/* --- N·ªôi dung ch√≠nh c·ªßa Modal --- */}
      {/* NgƒÉn ch·∫∑n s·ª± ki·ªán click lan truy·ªÅn t·ª´ n·ªôi dung modal ra l·ªõp ph·ªß */}
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <h2 className="modal-title">üõí X√°c nh·∫≠n thanh to√°n</h2> {/* Ti√™u ƒë·ªÅ Modal */}

        {/* --- Ph·∫ßn T√≥m t·∫Øt ƒë∆°n h√†ng --- */}
        <div className="order-summary">
          <h3>üìã Th√¥ng tin ƒë∆°n h√†ng</h3> {/* Ti√™u ƒë·ªÅ ph·∫ßn */}
          {isCartEmpty ? (
            // N·∫øu gi·ªè h√†ng r·ªóng, hi·ªÉn th·ªã th√¥ng b√°o
            <p className="empty-cart-message">{EMPTY_CART_MODAL_MESSAGE}</p>
          ) : (
            // N·∫øu gi·ªè h√†ng c√≥ s·∫£n ph·∫©m, hi·ªÉn th·ªã danh s√°ch v√† t·ªïng ti·ªÅn
            <div>
              <ul className="cart-items-list">
                {/* ƒê·∫£m b·∫£o cart l√† m·∫£ng tr∆∞·ªõc khi map */}
                {Array.isArray(cart) && cart.map((item, index) => (
                   // S·ª≠ d·ª•ng item.id l√†m key, fallback v·ªÅ index n·∫øu thi·∫øu id (√≠t l√Ω t∆∞·ªüng h∆°n)
                  <li key={item?.id || index} className="cart-item">
                    {/* Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m an to√†n */}
                    <span className="item-name">{item?.name || 'S·∫£n ph·∫©m kh√¥ng r√µ'}</span>
                    <span className="item-quantity">x {item?.quantity || 0}</span>
                    <span className="item-price">
                      {/* T√≠nh v√† ƒë·ªãnh d·∫°ng gi√° an to√†n */}
                      {((item?.price || 0) * (item?.quantity || 0)).toLocaleString("vi-VN")} VNƒê
                    </span>
                  </li>
                ))}
              </ul>
              <p className="total-price">
                {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn an to√†n v√† ƒë·ªãnh d·∫°ng */}
                <strong>T·ªïng ti·ªÅn:</strong> {(totalPrice || 0).toLocaleString("vi-VN")} VNƒê
              </p>
            </div>
          )}
        </div>

        {/* --- Form Th√¥ng tin giao h√†ng --- */}
        {/* Ch·ªâ hi·ªÉn th·ªã form n·∫øu gi·ªè h√†ng KH√îNG r·ªóng */}
        {!isCartEmpty && (
          <form onSubmit={handleSubmit} className="shipping-form">
            <h3>üöö Th√¥ng tin giao h√†ng</h3> {/* Ti√™u ƒë·ªÅ ph·∫ßn */}

            {/* Input group cho T√™n */}
            <div className="form-group">
              <label htmlFor="name">H·ªç v√† t√™n:</label>
              <input
                type="text"
                id="name"
                name="name"
                placeholder="Nh·∫≠p h·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n"
                value={shippingInfo.name} // Controlled component
                onChange={handleChange} // G·∫Øn handler thay ƒë·ªïi
                className={validationErrors.name ? "error" : ""} // Th√™m class 'error' n·∫øu c√≥ l·ªói validation cho tr∆∞·ªùng n√†y
                aria-label="Nh·∫≠p h·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n"
                required // S·ª≠ d·ª•ng validation c·ªßa HTML5 (t√πy ch·ªçn, v√¨ ƒë√£ c√≥ validation b·∫±ng JS)
              />
              {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói validation n·∫øu c√≥ */}
              {validationErrors.name && (
                <span className="error-message">{validationErrors.name}</span>
              )}
            </div>

            {/* Input group cho ƒê·ªãa ch·ªâ */}
            <div className="form-group">
              <label htmlFor="address">ƒê·ªãa ch·ªâ:</label>
              <input
                type="text"
                id="address"
                name="address"
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng chi ti·∫øt"
                value={shippingInfo.address} // Controlled component
                onChange={handleChange} // G·∫Øn handler thay ƒë·ªïi
                className={validationErrors.address ? "error" : ""} // Th√™m class 'error' n·∫øu c√≥ l·ªói validation cho tr∆∞·ªùng n√†y
                aria-label="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng"
                required // S·ª≠ d·ª•ng validation c·ªßa HTML5
              />
              {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói validation n·∫øu c√≥ */}
              {validationErrors.address && (
                <span className="error-message">{validationErrors.address}</span>
              )}
            </div>

            {/* Input group cho S·ªë ƒëi·ªán tho·∫°i */}
            <div className="form-group">
              <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i:</label>
              <input
                type="tel" // G·ª£i √Ω b√†n ph√≠m s·ªë tr√™n thi·∫øt b·ªã di ƒë·ªông
                id="phone"
                name="phone"
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
                value={shippingInfo.phone} // Controlled component
                onChange={handleChange} // G·∫Øn handler thay ƒë·ªïi
                className={validationErrors.phone ? "error" : ""} // Th√™m class 'error' n·∫øu c√≥ l·ªói validation cho tr∆∞·ªùng n√†y
                aria-label="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
                required // S·ª≠ d·ª•ng validation c·ªßa HTML5
              />
              {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói validation n·∫øu c√≥ */}
              {validationErrors.phone && (
                <span className="error-message">{validationErrors.phone}</span>
              )}
            </div>

            {/* --- Nh√≥m c√°c n√∫t h√†nh ƒë·ªông --- */}
            <div className="modal-buttons">
              {/* N√∫t X√°c nh·∫≠n ƒë·∫∑t h√†ng (submit form) */}
              <button
                type="submit" // K√≠ch ho·∫°t s·ª± ki·ªán submit form
                className="confirm-button"
                aria-label="X√°c nh·∫≠n ƒë·∫∑t h√†ng"
                 // C√≥ th·ªÉ th√™m disabled={isCartEmpty} n·∫øu mu·ªën n√∫t n√†y c≈©ng b·ªã disabled khi gi·ªè h√†ng r·ªóng
              >
                ‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng
              </button>
              {/* N√∫t H·ªßy */}
              <button
                type="button" // NgƒÉn n√∫t n√†y submit form
                className="cancel-button"
                onClick={onCancel} // G·ªçi h√†m onCancel
                aria-label="H·ªßy ƒë·∫∑t h√†ng"
              >
                ‚ùå H·ªßy
              </button>
            </div>
          </form>
        )}

      </div> {/* K·∫øt th√∫c modal-content */}
    </div> // K·∫øt th√∫c modal-overlay
  );
};

export default CheckoutModal; // Export component
