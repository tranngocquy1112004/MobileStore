const API_URL = `${process.env.PUBLIC_URL}/db.json`; // ƒê∆∞·ªùng d·∫´n t·ªõi file JSON ch·ª©a d·ªØ li·ªáu s·∫£n ph·∫©m

// C√°c th√¥ng b√°o tr·∫°ng th√°i c·ªë ƒë·ªãnh
const MESSAGES = {
  LOADING: "‚è≥ ƒêang t·∫£i...", // Th√¥ng b√°o hi·ªÉn th·ªã khi d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i
  ERROR: "‚ùå Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!", // Th√¥ng b√°o khi x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫£i
  NO_PRODUCTS: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ hi·ªÉn th·ªã", // Th√¥ng b√°o khi kh√¥ng c√≥ s·∫£n ph·∫©m n√†o
};

// H√†m l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
async function fetchProducts(signal) {
  try {
    const response = await fetch(API_URL, { signal }); // G·ª≠i y√™u c·∫ßu l·∫•y d·ªØ li·ªáu, h·ªó tr·ª£ h·ªßy v·ªõi AbortController
    if (!response.ok) throw new Error(MESSAGES.ERROR); // N√©m l·ªói n·∫øu y√™u c·∫ßu kh√¥ng th√†nh c√¥ng
    const data = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu t·ª´ JSON sang object JavaScript
    return Array.isArray(data) ? data : data.products || []; // Tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m, ho·∫∑c m·∫£ng r·ªóng n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
  } catch (error) {
    if (error.name !== "AbortError") throw error; // N√©m l·∫°i l·ªói n·∫øu kh√¥ng ph·∫£i l·ªói do h·ªßy fetch
  }
}

// Component hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
function StatusMessage(type) {
  return `
    <div class="status-container ${type}">
      <p class="status-message">${MESSAGES[type.toUpperCase()]}</p>
      <!-- Hi·ªÉn th·ªã th√¥ng b√°o t∆∞∆°ng ·ª©ng v·ªõi type (loading, error, no_products) -->
    </div>
  `;
}

// Component hi·ªÉn th·ªã m·ªôt s·∫£n ph·∫©m
function ProductCard(product) {
  return `
    <div class="product-card">
      <div class="product-image-container">
        <img 
          src="${product.image}" // ƒê∆∞·ªùng d·∫´n ·∫£nh s·∫£n ph·∫©m
          alt="${product.name}" // VƒÉn b·∫£n thay th·∫ø cho ·∫£nh (accessibility)
          class="product-image" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng ·∫£nh
          loading="lazy" // T·∫£i ·∫£nh theo ki·ªÉu lazy ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng
        />
      </div>
      <div class="product-info">
        <h3 class="product-name">${product.name}</h3> <!-- T√™n s·∫£n ph·∫©m -->
        <p class="product-price">
          üí∞ ${product.price.toLocaleString("vi-VN")} VNƒê
          <!-- Gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng ti·ªÅn Vi·ªát Nam -->
        </p>
        <a 
          href="/products/${product.id}" // Li√™n k·∫øt ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
          class="product-details-link" // Class CSS cho li√™n k·∫øt
          aria-label="Xem chi ti·∫øt ${product.name}" // VƒÉn b·∫£n m√¥ t·∫£ cho accessibility
        >
          <button class="details-button">Chi ti·∫øt</button> <!-- N√∫t xem chi ti·∫øt s·∫£n ph·∫©m -->
        </a>
      </div>
    </div>
  `;
}

// Component ch√≠nh hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
function ProductList() {
  let products = []; // Danh s√°ch s·∫£n ph·∫©m, kh·ªüi t·∫°o l√† m·∫£ng r·ªóng
  let status = "loading"; // Tr·∫°ng th√°i ban ƒë·∫ßu l√† ƒëang t·∫£i d·ªØ li·ªáu
  const controller = new AbortController(); // T·∫°o AbortController ƒë·ªÉ h·ªßy y√™u c·∫ßu fetch n·∫øu c·∫ßn

  // H√†m t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
  async function loadProducts() {
    try {
      const productList = await fetchProducts(controller.signal); // G·ªçi h√†m fetch v·ªõi signal ƒë·ªÉ h·ªó tr·ª£ h·ªßy
      products = productList || []; // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m, d√πng m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
      status = products.length ? "loaded" : "no_products"; // C·∫≠p nh·∫≠t tr·∫°ng th√°i: c√≥ s·∫£n ph·∫©m th√¨ "loaded", kh√¥ng th√¨ "no_products"
      render(); // G·ªçi h√†m render ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
    } catch {
      status = "error"; // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "error" n·∫øu c√≥ l·ªói
      render(); // G·ªçi h√†m render ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    }
  }

  // H√†m render giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i
  function render() {
    const app = document.getElementById("app"); // L·∫•y ph·∫ßn t·ª≠ root trong DOM ƒë·ªÉ render n·ªôi dung
    if (!app) return; // Tho√°t n·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ root

    if (status !== "loaded") {
      app.innerHTML = StatusMessage(status); // Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i (loading, error, no_products)
      return;
    }

    // T·∫°o chu·ªói HTML cho danh s√°ch s·∫£n ph·∫©m
    const productCards = products.map((product) => ProductCard(product)).join("");
    // Render giao di·ªán ch√≠nh v·ªõi danh s√°ch s·∫£n ph·∫©m
    app.innerHTML = `
      <main class="product-list-container">
        <h1 class="product-list-title">üì± Danh s√°ch s·∫£n ph·∫©m</h1> <!-- Ti√™u ƒë·ªÅ danh s√°ch s·∫£n ph·∫©m -->
        <div class="product-grid">${productCards}</div> <!-- Grid ch·ª©a c√°c th·∫ª s·∫£n ph·∫©m -->
      </main>
    `;
  }

  // B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu ngay khi component ƒë∆∞·ª£c g·ªçi
  loadProducts();

  // Cleanup: Tr·∫£ v·ªÅ h√†m ƒë·ªÉ h·ªßy fetch khi component b·ªã h·ªßy
  return () => controller.abort(); // H·ªßy y√™u c·∫ßu fetch n·∫øu component kh√¥ng c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng
}

// Kh·ªüi ch·∫°y component khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener("DOMContentLoaded", () => {
  ProductList(); // G·ªçi h√†m ProductList ƒë·ªÉ b·∫Øt ƒë·∫ßu hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
});

// Xu·∫•t component n·∫øu s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng module (v√≠ d·ª•: Node.js ho·∫∑c bundler)
export default ProductList;