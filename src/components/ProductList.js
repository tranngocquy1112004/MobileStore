/**
 * Module hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m t·ª´ file JSON b·∫±ng Vanilla JavaScript.
 * Module n√†y t·ª± kh·ªüi ch·∫°y khi DOM ƒë√£ s·∫µn s√†ng ƒë·ªÉ fetch d·ªØ li·ªáu v√† render giao di·ªán.
 * N√≥ s·ª≠ d·ª•ng c√°c API tr√¨nh duy·ªát ti√™u chu·∫©n (fetch, DOM manipulation, events)
 * thay v√¨ m·ªôt th∆∞ vi·ªán/framework nh∆∞ React.
 */

// --- ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë ---

// ƒê∆∞·ªùng d·∫´n t·ªõi file JSON ch·ª©a d·ªØ li·ªáu s·∫£n ph·∫©m.
// ${process.env.PUBLIC_URL} th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c m√¥i tr∆∞·ªùng build tool (nh∆∞ Webpack, Create React App)
// ƒë·ªÉ tham chi·∫øu ƒë·∫øn th∆∞ m·ª•c public c·ªßa ·ª©ng d·ª•ng. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ho·∫°t ƒë·ªông ƒë√∫ng khi deploy.
const API_URL = `${process.env.PUBLIC_URL}/db.json`;
// ID c·ªßa ph·∫ßn t·ª≠ HTML g·ªëc (container) n∆°i to√†n b·ªô n·ªôi dung ·ª©ng d·ª•ng (danh s√°ch s·∫£n ph·∫©m) s·∫Ω ƒë∆∞·ª£c render v√†o.
// ƒê·∫£m b·∫£o c√≥ m·ªôt ph·∫ßn t·ª≠ <div id="app"></div> trong file HTML c·ªßa b·∫°n.
const ROOT_ELEMENT_ID = "app";

// Object ch·ª©a c√°c chu·ªói th√¥ng b√°o tr·∫°ng th√°i kh√°c nhau hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.
// C√°c kh√≥a (keys) tr√πng v·ªõi t√™n tr·∫°ng th√°i ('loading', 'error', 'no_products') ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p.
const MESSAGES = {
  LOADING: "‚è≥ ƒêang t·∫£i...", // Th√¥ng b√°o hi·ªÉn th·ªã khi d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i t·ª´ ngu·ªìn API/file
  ERROR: "‚ùå Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!", // Th√¥ng b√°o hi·ªÉn th·ªã khi c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh fetch d·ªØ li·ªáu
  NO_PRODUCTS: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ hi·ªÉn th·ªã", // Th√¥ng b√°o hi·ªÉn th·ªã khi t·∫£i xong d·ªØ li·ªáu nh∆∞ng danh s√°ch s·∫£n ph·∫©m tr·ªëng r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá
};

// --- H√†m l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API (s·ª≠ d·ª•ng Fetch API) ---
// H√†m async v√¨ s·ª≠ d·ª•ng fetch (tr·∫£ v·ªÅ Promise) v√† await ƒë·ªÉ ch·ªù k·∫øt qu·∫£.
// Nh·∫≠n m·ªôt 'signal' t·ª´ AbortController ƒë·ªÉ cho ph√©p h·ªßy y√™u c·∫ßu fetch.
async function fetchProducts(signal) {
  try {
    // Th·ª±c hi·ªán y√™u c·∫ßu HTTP GET ƒë·∫øn API_URL ƒë√£ ƒë·ªãnh nghƒ©a.
    // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng 'signal' t·ª´ AbortController v√†o t√πy ch·ªçn c·ªßa fetch.
    // ƒêi·ªÅu n√†y cho ph√©p ch√∫ng ta h·ªßy y√™u c·∫ßu fetch n·∫øu c·∫ßn thi·∫øt (v√≠ d·ª•: n·∫øu module n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt).
    const response = await fetch(API_URL, { signal });
    // Ki·ªÉm tra thu·ªôc t√≠nh 'ok' c·ªßa ƒë·ªëi t∆∞·ª£ng response. 'ok' l√† true n·∫øu status code l√† 200-299.
    if (!response.ok) {
      // N·∫øu response kh√¥ng th√†nh c√¥ng, n√©m ra m·ªôt ƒë·ªëi t∆∞·ª£ng Error m·ªõi v·ªõi th√¥ng b√°o l·ªói l·∫•y t·ª´ MESSAGES.
      throw new Error(MESSAGES.ERROR);
    }
    // N·∫øu response th√†nh c√¥ng, g·ªçi ph∆∞∆°ng th·ª©c .json() ƒë·ªÉ ph√¢n t√≠ch c√∫ ph√°p body c·ªßa response th√†nh ƒë·ªëi t∆∞·ª£ng/m·∫£ng JavaScript t·ª´ JSON.
    const data = await response.json();
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:
    // - N·∫øu 'data' b·∫£n th√¢n n√≥ l√† m·ªôt m·∫£ng (Array.isArray(data) l√† true), tr·∫£ v·ªÅ 'data'.
    // - N·∫øu 'data' l√† m·ªôt ƒë·ªëi t∆∞·ª£ng V√Ä c√≥ thu·ªôc t√≠nh 'products' l√† m·∫£ng, tr·∫£ v·ªÅ 'data.products'.
    // - N·∫øu kh√¥ng kh·ªõp v·ªõi hai tr∆∞·ªùng h·ª£p tr√™n, tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng []. Logic n√†y gi·ªëng v·ªõi c√°ch x·ª≠ l√Ω trong component React.
    return Array.isArray(data) ? data : data.products || [];
  } catch (error) {
    // B·∫Øt c√°c l·ªói c√≥ th·ªÉ x·∫£y ra trong kh·ªëi try (v√≠ d·ª•: l·ªói m·∫°ng, l·ªói n√©m ra ·ªü d√≤ng throw new Error).
    // Ki·ªÉm tra n·∫øu t√™n c·ªßa l·ªói KH√îNG ph·∫£i l√† "AbortError".
    // "AbortError" x·∫£y ra khi y√™u c·∫ßu fetch b·ªã h·ªßy m·ªôt c√°ch c√≥ ch·ªß ƒë√≠ch b·ªüi AbortController, ƒë√¢y l√† h√†nh vi mong mu·ªën trong qu√° tr√¨nh cleanup.
    if (error.name !== "AbortError") {
      // N·∫øu l√† l·ªói kh√°c (l·ªói m·∫°ng th·ª±c s·ª±, l·ªói server, l·ªói parse JSON kh√¥ng do abort), n√©m l·∫°i l·ªói ƒë√≥.
      // L·ªói n√†y s·∫Ω ƒë∆∞·ª£c b·∫Øt v√† x·ª≠ l√Ω ·ªü n∆°i g·ªçi h√†m fetchProducts (trong h√†m loadProducts).
      throw error;
    }
    // N·∫øu l·ªói l√† "AbortError", b·ªè qua l·ªói (kh√¥ng n√©m l·∫°i) v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng. ƒêi·ªÅu n√†y bi·ªÉu th·ªã r·∫±ng qu√° tr√¨nh fetch ƒë√£ b·ªã d·ª´ng.
    return []; // Return empty array when aborted request
  }
}

// --- H√†m t·∫°o chu·ªói HTML cho th√¥ng b√°o tr·∫°ng th√°i (loading, error, no_products) ---
// Nh·∫≠n v√†o ki·ªÉu th√¥ng b√°o ('loading', 'error', 'no_products').
function StatusMessage(type) {
  // Return an HTML string using template literals.
  // Create a div tag as a container, with class 'status-container' and a dynamic class based on the 'type' passed in.
  // Inside is a paragraph tag with class 'status-message' and content from the MESSAGES object,
  // converting the 'type' string to uppercase (e.g., 'loading' -> 'LOADING') to get the correct key from MESSAGES.
  return `
    <div class="status-container ${type}">
      <p class="status-message">${MESSAGES[type.toUpperCase()]}</p>
    </div>
  `;
}

// --- H√†m t·∫°o chu·ªói HTML cho m·ªôt th·∫ª s·∫£n ph·∫©m (Product Card) ---
// Nh·∫≠n v√†o m·ªôt ƒë·ªëi t∆∞·ª£ng 'product'.
// H√†m n√†y ch·ªâ t·∫°o chu·ªói HTML, kh√¥ng g·∫Øn s·ª± ki·ªán hay qu·∫£n l√Ω tr·∫°ng th√°i.
function ProductCard(product) {
  // Return an HTML string representing the UI of a product card.
  // Use template literals to embed properties of the 'product' object into the HTML string.
  // Includes image, name, price, and a link/button to view details.
  // Format the price using toLocaleString("vi-VN") similar to the React components.
  return `
    <div class="product-card">
      <div class="product-image-container">
        <img
          src="${product.image}"
          alt="${product.name}"
          class="product-image"
          loading="lazy" />
      </div>
      <div class="product-info">
        <h3 class="product-name">${product.name}</h3>
        <p class="product-price">
          üí∞ ${product.price.toLocaleString("vi-VN")} VNƒê
        </p>
        <a
          href="/products/${product.id}"
          class="product-details-link"
          aria-label="Xem chi ti·∫øt ${product.name}" >
          <button class="details-button">Chi ti·∫øt</button>
        </a>
      </div>
    </div>
  `;
}

// --- H√†m ch√≠nh qu·∫£n l√Ω tr·∫°ng th√°i v√† render danh s√°ch s·∫£n ph·∫©m ---
// H√†m n√†y ƒë√≥ng vai tr√≤ nh∆∞ "Controller" ho·∫∑c "Component Logic" trong Vanilla JS.
// N√≥ qu·∫£n l√Ω state (d·ªØ li·ªáu), x·ª≠ l√Ω side effects (fetch), v√† c·∫≠p nh·∫≠t giao di·ªán (render).
function ProductList() {
  let products = []; // Local variable storing the list of successfully loaded products. Initially an empty array.
  // Local variable tracking the current status of the module ('loading', 'error', 'loaded', 'no_products'). Initially 'loading'.
  let status = "loading";
  // Create an AbortController. Used to cancel the fetch request if this module needs to stop operating (e.g., navigating to another page in a Vanilla JS SPA).
  const controller = new AbortController();

  // Define an async function to load the product list and update the status.
  async function loadProducts() {
    try {
      // Update the loading status and render immediately so the user sees the loading spinner/message.
      status = "loading";
      render();

      // Call the fetchProducts function to get data, passing the signal from the controller to be able to cancel the request.
      const result = await fetchProducts(controller.signal);
      products = result || []; // Update the 'products' variable with the received result. Use '|| []' to ensure it's always an array.

      // Update the 'status' variable based on the result: If the 'products' array has elements (length > 0), status is 'loaded', otherwise it's 'no_products'.
      status = products.length > 0 ? "loaded" : "no_products";

    } catch (err) {
      // Catch errors if the fetchProducts function throws an error (excluding AbortError which is handled inside fetchProducts).
      console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", err); // Log the detailed error to the console for debugging.
      status = "error"; // Update the 'status' variable to 'error'.
    } finally {
        // The finally block always runs after try/catch, ensuring the UI is re-rendered
        // with the final status (loaded, no_products, or error).
        render(); // Call the render function to update the user interface based on the final status.
    }
  }

  // Define the render function (draw/update) the user interface based on the current status and data.
  // This function directly manipulates the DOM.
  function render() {
    // Get the root DOM element (usually a div tag) where the content will be inserted, using the defined ID.
    const app = document.getElementById(ROOT_ELEMENT_ID);
    // If this DOM element is not found (e.g., incorrect ID in HTML), log an error to the console and exit the render function to avoid runtime errors.
    if (!app) {
      console.error(`Ph·∫ßn t·ª≠ DOM v·ªõi ID "${ROOT_ELEMENT_ID}" kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.`);
      return;
    }

    // --- Rendering logic based on the current status ---

    // Check the current status.
    if (status === "loading") {
      // If loading, clear old content and insert the loading message.
      app.innerHTML = StatusMessage("loading");
    } else if (status === "error") {
      // If there's an error, clear old content and insert the error message.
      app.innerHTML = StatusMessage("error");
    } else if (status === "no_products") {
       // If there are no products after loading, clear old content and insert the no products message.
       app.innerHTML = StatusMessage("no_products");
    }
    else if (status === "loaded") {
        // If the status is 'loaded' (data has been successfully loaded and there are products)

        // Create an array of HTML strings, where each string is the HTML for a product card.
        // Use the .map() method on the 'products' array, calling the ProductCard function for each product to generate the corresponding HTML.
        const productCardsArray = products.map(ProductCard);
        // Use the .join("") method to concatenate all the HTML strings of the product cards into a single large HTML string.
        const productCardsHTML = productCardsArray.join("");

        // Clear the old content inside the root element and insert the new HTML structure for the product list.
        // Includes the list title and a container div with class 'product-grid' containing all the generated product cards.
        app.innerHTML = `
          <main class="product-list-container">
            <h1 class="product-list-title">üì± Danh s√°ch s·∫£n ph·∫©m</h1>
            <div class="product-grid">${productCardsHTML}</div>
          </main>
        `;
    }
    // If the status is 'loaded' but the products array is empty, the logic will fall into the 'no_products' state above.
  }

  // --- Initial Launch ---

  // Call the loadProducts() function for the first time right after the ProductList function is called.
  // This starts the data loading process and initial UI rendering (loading state).
  loadProducts();

  // --- Cleanup Function (Important in Vanilla JS SPA environment or when this module/feature is removed) ---

  // The ProductList function returns another function. This returned function acts as the cleanup function.
  // In frameworks like React (useEffect), cleanup is managed automatically. In vanilla JS,
  // you will need to manually call this cleanup function when this module/feature is no longer needed
  // (e.g., when you navigate to another page in an SPA built with vanilla JS,
  // you will need to clear the old DOM and call the cleanup function of the old module).
  // This cleanup function will be called to cancel any pending fetch request if it hasn't completed yet,
  // helping to prevent memory leaks and other potential issues.
  return () => {
    controller.abort(); // Call the abort() method on the AbortController to cancel the associated fetch request.
    console.log("ProductList cleanup: fetch request aborted."); // Log to indicate that cleanup has run.
    // Depending on how DOM is managed, you might need to add logic here to clean up DOM elements created by this module.
    // Example: document.getElementById(ROOT_ELEMENT_ID).innerHTML = ''; // Clear content from root element
  };
}

// --- Run the application after the DOM is ready ---

// Add an event listener for the 'DOMContentLoaded' event on the 'document' object.
// This event is fired when the initial HTML document has been completely loaded and parsed (the DOM tree has been constructed),
// without waiting for stylesheets, images, and subframes to finish loading.
// Ensures code accessing DOM elements (like the ROOT_ELEMENT_ELEMENT_ID element) runs only after this event.
document.addEventListener("DOMContentLoaded", () => {
  console.log("DOM fully loaded and parsed. Initializing ProductList.");
  // When the DOM is ready (ensuring the root element exists), call the ProductList() function to initialize and run the product list display module.
  // Call the ProductList function directly instead of assigning to an unused variable
  ProductList();

  // If you were building a Vanilla JS SPA, you would need to save this `cleanupProductList` variable
  // and call it when "unmounting" this functionality (e.g., when navigating to a different page that doesn't display the product list).
  // cleanupProductList(); // Call the cleanup function when needed
});


// Export the ProductList function as the default export.
// This allows this module to be imported and used in other JavaScript files,
// especially useful in module systems (like ES Modules, CommonJS).
// If this is the only JS file and is embedded directly using a <script src="..."> tag in HTML,
// this export line might not be necessary or might require appropriate build tool configuration.
export default ProductList;