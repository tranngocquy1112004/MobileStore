// Import c√°c th∆∞ vi·ªán v√† th√†nh ph·∫ßn c·∫ßn thi·∫øt
import React, { useEffect, useState } from "react"; // React core v√† c√°c hooks
import PropTypes from "prop-types"; // Th∆∞ vi·ªán ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu props
import { Link } from "react-router-dom"; // Th√†nh ph·∫ßn ƒëi·ªÅu h∆∞·ªõng trong React Router
import "./ProductList.css"; // File CSS cho component

// ƒê∆∞·ªùng d·∫´n API l·∫•y d·ªØ li·ªáu t·ª´ file db.json trong th∆∞ m·ª•c public
const API_URL = `${process.env.PUBLIC_URL}/db.json`;

// ƒê·ªëi t∆∞·ª£ng ch·ª©a c√°c th√¥ng b√°o tr·∫°ng th√°i
const MESSAGES = {
  LOADING: "‚è≥ ƒêang t·∫£i...", // Th√¥ng b√°o khi ƒëang t·∫£i d·ªØ li·ªáu
  ERROR: "‚ùå Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!", // Th√¥ng b√°o khi c√≥ l·ªói
  NO_PRODUCTS: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ hi·ªÉn th·ªã", // Th√¥ng b√°o khi kh√¥ng c√≥ s·∫£n ph·∫©m
};

// H√†m b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ fetch d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
const fetchProducts = async (signal) => {
  try {
    // G·ª≠i request fetch v·ªõi AbortSignal ƒë·ªÉ c√≥ th·ªÉ h·ªßy request
    const response = await fetch(API_URL, { signal });
    // N·∫øu response kh√¥ng ok th√¨ throw error
    if (!response.ok) throw new Error(MESSAGES.ERROR);
    
    // Parse d·ªØ li·ªáu JSON t·ª´ response
    const data = await response.json();
    // Ki·ªÉm tra n·∫øu data l√† m·∫£ng th√¨ tr·∫£ v·ªÅ data, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ data.products ho·∫∑c m·∫£ng r·ªóng
    return Array.isArray(data) ? data : data.products || [];
  } catch (error) {
    // B·∫Øt l·ªói nh∆∞ng b·ªè qua n·∫øu l√† AbortError (khi component unmount)
    if (error.name !== "AbortError") throw error;
  }
};

// Component hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
const StatusMessage = ({ type }) => (
  <div className={`status-container ${type}`}>
    {/* Hi·ªÉn th·ªã message t∆∞∆°ng ·ª©ng v·ªõi type */}
    <p className="status-message">{MESSAGES[type.toUpperCase()]}</p>
  </div>
);

// Component hi·ªÉn th·ªã th√¥ng tin m·ªôt s·∫£n ph·∫©m
const ProductCard = ({ product }) => (
  <div className="product-card">
    <div className="product-image-container">
      {/* ·∫¢nh s·∫£n ph·∫©m v·ªõi lazy loading */}
      <img 
        src={product.image} 
        alt={product.name} 
        className="product-image" 
        loading="lazy"
      />
    </div>
    <div className="product-info">
      {/* T√™n s·∫£n ph·∫©m */}
      <h3 className="product-name">{product.name}</h3>
      {/* Gi√° s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng theo ti·∫øng Vi·ªát */}
      <p className="product-price">
        üí∞ {product.price.toLocaleString("vi-VN")} VNƒê
      </p>
      {/* Link ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m */}
      <Link 
        to={`/products/${product.id}`} 
        className="product-details-link"
        aria-label={`Xem chi ti·∫øt ${product.name}`}
      >
        <button className="details-button">Chi ti·∫øt</button>
      </Link>
    </div>
  </div>
);

// Component ch√≠nh hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
const ProductList = () => {
  // State l∆∞u tr·ªØ danh s√°ch s·∫£n ph·∫©m
  const [products, setProducts] = useState([]);
  // State l∆∞u tr·ªØ tr·∫°ng th√°i hi·ªán t·∫°i (loading, error, no_products, loaded)
  const [status, setStatus] = useState("loading");

  // Effect ch·∫°y khi component mount ƒë·ªÉ load d·ªØ li·ªáu
  useEffect(() => {
    // T·∫°o AbortController ƒë·ªÉ c√≥ th·ªÉ h·ªßy request khi component unmount
    const controller = new AbortController();
    
    // H√†m b·∫•t ƒë·ªìng b·ªô load s·∫£n ph·∫©m
    const loadProducts = async () => {
      try {
        // G·ªçi h√†m fetchProducts v·ªõi signal t·ª´ AbortController
        const productList = await fetchProducts(controller.signal);
        // C·∫≠p nh·∫≠t state products
        setProducts(productList || []);
        // C·∫≠p nh·∫≠t status d·ª±a tr√™n c√≥ d·ªØ li·ªáu hay kh√¥ng
        setStatus(productList?.length ? "loaded" : "no_products");
      } catch {
        // N·∫øu c√≥ l·ªói th√¨ set status error
        setStatus("error");
      }
    };

    // G·ªçi h√†m loadProducts
    loadProducts();
    // Cleanup function ƒë·ªÉ h·ªßy request khi component unmount
    return () => controller.abort();
  }, []); // Dependency array r·ªóng ƒë·ªÉ ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount

  // N·∫øu status kh√°c loaded th√¨ hi·ªÉn th·ªã StatusMessage t∆∞∆°ng ·ª©ng
  if (status !== "loaded") {
    return <StatusMessage type={status} />;
  }

  // Render danh s√°ch s·∫£n ph·∫©m khi ƒë√£ load th√†nh c√¥ng
  return (
    <main className="product-list-container">
      {/* Ti√™u ƒë·ªÅ danh s√°ch s·∫£n ph·∫©m */}
      <h1 className="product-list-title">üì± Danh s√°ch s·∫£n ph·∫©m</h1>
      {/* Grid hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m */}
      <div className="product-grid">
        {/* Map qua m·∫£ng products ƒë·ªÉ render t·ª´ng ProductCard */}
        {products.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </main>
  );
};

// Ki·ªÉm tra prop types cho ProductCard
ProductCard.propTypes = {
  product: PropTypes.shape({
    id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired,
    image: PropTypes.string.isRequired,
    price: PropTypes.number.isRequired,
  }).isRequired,
};

// Ki·ªÉm tra prop types cho StatusMessage
StatusMessage.propTypes = {
  type: PropTypes.oneOf(["loading", "error", "no_products"]).isRequired,
};

// Export component ProductList l√†m component m·∫∑c ƒë·ªãnh
export default ProductList;