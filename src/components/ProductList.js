/**
 * Module hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m t·ª´ file JSON b·∫±ng Vanilla JavaScript.
 * Module n√†y t·ª± kh·ªüi ch·∫°y khi DOM ƒë√£ s·∫µn s√†ng v√† qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i/l·ªói/hi·ªÉn th·ªã.
 */

// --- H·∫±ng s·ªë ---

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn ngu·ªìn d·ªØ li·ªáu s·∫£n ph·∫©m (file JSON).
const API_URL = `${process.env.PUBLIC_URL}/db.json`;
// ID c·ªßa ph·∫ßn t·ª≠ HTML g·ªëc n∆°i n·ªôi dung ·ª©ng d·ª•ng s·∫Ω ƒë∆∞·ª£c render.
const ROOT_ELEMENT_ID = "app";

// C√°c th√¥ng b√°o tr·∫°ng th√°i hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.
const MESSAGES = {
  LOADING: "‚è≥ ƒêang t·∫£i s·∫£n ph·∫©m...", // Th√™m chi ti·∫øt v√†o th√¥ng b√°o loading
  ERROR: "‚ùå Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m! Vui l√≤ng th·ª≠ l·∫°i sau.", // Th√™m g·ª£i √Ω th·ª≠ l·∫°i
  NO_PRODUCTS: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ hi·ªÉn th·ªã.", // R√µ r√†ng h∆°n
};

// --- H√†m fetch d·ªØ li·ªáu s·∫£n ph·∫©m s·ª≠ d·ª•ng Fetch API ---
// Nh·∫≠n m·ªôt signal t·ª´ AbortController ƒë·ªÉ cho ph√©p h·ªßy b·ªè request.
async function fetchProducts(signal) {
  try {
    const response = await fetch(API_URL, { signal });

    // Ki·ªÉm tra n·∫øu response kh√¥ng th√†nh c√¥ng (v√≠ d·ª•: status code 404, 500)
    if (!response.ok) {
      // T·∫°o m·ªôt Error m·ªõi v·ªõi th√¥ng b√°o l·ªói t·ª´ h·∫±ng s·ªë MESSAGES
      throw new Error(MESSAGES.ERROR);
    }

    const data = await response.json();

    // Ki·ªÉm tra xem d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ ph·∫£i l√† m·∫£ng kh√¥ng.
    // N·∫øu kh√¥ng ph·∫£i m·∫£ng, th·ª≠ truy c·∫≠p thu·ªôc t√≠nh 'products' (n·∫øu c√≥).
    // M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá.
    return Array.isArray(data) ? data : data.products || [];

  } catch (error) {
    // B·∫Øt l·ªói. N·∫øu l·ªói l√† AbortError (do request b·ªã h·ªßy), tr·∫£ v·ªÅ m·∫£ng r·ªóng.
    // N·∫øu l√† l·ªói kh√°c, n√©m l·∫°i l·ªói ƒë·ªÉ h√†m g·ªçi n√≥ c√≥ th·ªÉ x·ª≠ l√Ω.
    if (error.name === "AbortError") {
      console.log("Fetch request ƒë√£ b·ªã h·ªßy b·ªè."); // Log khi request b·ªã h·ªßy
      return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng khi b·ªã h·ªßy
    }
    // N√©m l·∫°i l·ªói n·∫øu kh√¥ng ph·∫£i AbortError
    throw error;
  }
}

// --- H√†m t·∫°o chu·ªói HTML cho th√¥ng b√°o tr·∫°ng th√°i ---
// Nh·∫≠n lo·∫°i tr·∫°ng th√°i ('loading', 'error', 'no_products').
function StatusMessage(type) {
  // ƒê·∫£m b·∫£o lo·∫°i tr·∫°ng th√°i h·ª£p l·ªá v√† l·∫•y th√¥ng b√°o t∆∞∆°ng ·ª©ng t·ª´ MESSAGES
  const messageText = MESSAGES[type.toUpperCase()] || "Kh√¥ng r√µ tr·∫°ng th√°i";
  const className = type; // S·ª≠ d·ª•ng lo·∫°i tr·∫°ng th√°i l√†m class CSS

  return `
    <div class="status-container ${className}">
      <p class="status-message">${messageText}</p>
      ${type === 'error' ? '<button class="retry-button" onclick="window.location.reload()">Th·ª≠ l·∫°i</button>' : ''}
      ${type === 'loading' ? '<div class="loading-spinner"></div>' : ''}
    </div>
  `;
}

// --- H√†m t·∫°o chu·ªói HTML cho m·ªôt th·∫ª s·∫£n ph·∫©m ---
// Nh·∫≠n m·ªôt ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m. T·∫°o ra chu·ªói HTML tƒ©nh.
function ProductCard(product) {
  // Th√™m ki·ªÉm tra an to√†n v√† cung c·∫•p gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c thu·ªôc t√≠nh s·∫£n ph·∫©m
  const id = product?.id;
  const name = product?.name || 'S·∫£n ph·∫©m kh√¥ng r√µ';
  const image = product?.image || 'placeholder.png'; // S·ª≠ d·ª•ng ·∫£nh placeholder n·∫øu thi·∫øu (c·∫ßn th√™m ·∫£nh n√†y)
  const price = product?.price;

  // Ki·ªÉm tra n·∫øu c√°c thu·ªôc t√≠nh thi·∫øt y·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá
  if (typeof id === 'undefined' || !name || typeof price !== 'number') {
      console.warn("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá, b·ªè qua:", product);
      return ''; // Tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá
  }

  // ƒê·ªãnh d·∫°ng gi√° ti·ªÅn theo chu·∫©n Vi·ªát Nam
  const formattedPrice = price.toLocaleString("vi-VN");

  return `
    <div class="product-card">
      <div class="product-image-container">
        <img
          src="${image}"
          alt="${name}"
          class="product-image"
          loading="lazy" />
      </div>
      <div class="product-info">
        <h3 class="product-name">${name}</h3>
        <p class="product-price">
          üí∞ ${formattedPrice} VNƒê
        </p>
        <a
          href="/products/${id}"
          class="product-details-link"
          aria-label="Xem chi ti·∫øt ${name}" >
          <button class="details-button">Chi ti·∫øt</button>
        </a>
      </div>
    </div>
  `;
}

// --- H√†m ch√≠nh qu·∫£n l√Ω tr·∫°ng th√°i, fetch d·ªØ li·ªáu v√† render ---
// Module n√†y t·ª± qu·∫£n l√Ω tr·∫°ng th√°i c·ª•c b·ªô (s·ª≠ d·ª•ng bi·∫øn trong closure).
function ProductList() {
  let products = []; // Bi·∫øn c·ª•c b·ªô l∆∞u tr·ªØ d·ªØ li·ªáu s·∫£n ph·∫©m
  let status = "loading"; // Bi·∫øn c·ª•c b·ªô l∆∞u tr·ªØ tr·∫°ng th√°i module ('loading', 'error', 'loaded', 'no_products')
  const controller = new AbortController(); // AbortController ƒë·ªÉ h·ªßy b·ªè fetch request

  // ƒê·ªãnh nghƒ©a h√†m b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ t·∫£i s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
  async function loadProducts() {
    try {
      status = "loading"; // ƒê·∫∑t tr·∫°ng th√°i loading
      render(); // Render tr·∫°ng th√°i loading ngay l·∫≠p t·ª©c

      const result = await fetchProducts(controller.signal); // G·ªçi h√†m fetchProducts
      products = result || []; // C·∫≠p nh·∫≠t d·ªØ li·ªáu s·∫£n ph·∫©m, ƒë·∫£m b·∫£o l√† m·∫£ng

      // X√°c ƒë·ªãnh tr·∫°ng th√°i cu·ªëi c√πng d·ª±a tr√™n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
      status = products.length > 0 ? "loaded" : "no_products";

    } catch (err) {
      // B·∫Øt c√°c l·ªói x·∫£y ra trong qu√° tr√¨nh fetch (tr·ª´ AbortError ƒë√£ x·ª≠ l√Ω trong fetchProducts)
      console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", err); // Log l·ªói chi ti·∫øt
      status = "error"; // ƒê·∫∑t tr·∫°ng th√°i l·ªói
    } finally {
      render(); // Render tr·∫°ng th√°i cu·ªëi c√πng (loaded, no_products, ho·∫∑c error)
    }
  }

  // ƒê·ªãnh nghƒ©a h√†m render UI d·ª±a tr√™n tr·∫°ng th√°i v√† d·ªØ li·ªáu
  function render() {
    const app = document.getElementById(ROOT_ELEMENT_ID);
    // Ki·ªÉm tra n·∫øu ph·∫ßn t·ª≠ g·ªëc kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y
    if (!app) {
      console.error(`Ph·∫ßn t·ª≠ DOM v·ªõi ID "${ROOT_ELEMENT_ID}" kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.`);
      return; // D·ª´ng render n·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ g·ªëc
    }

    // --- Logic render d·ª±a tr√™n tr·∫°ng th√°i ---
    if (status === "loading") {
      app.innerHTML = StatusMessage("loading");
    } else if (status === "error") {
      app.innerHTML = StatusMessage("error");
    } else if (status === "no_products") {
      app.innerHTML = StatusMessage("no_products");
    } else if (status === "loaded") {
      // Ki·ªÉm tra an to√†n: ƒê·∫£m b·∫£o products l√† m·∫£ng tr∆∞·ªõc khi map
      const productCardsArray = Array.isArray(products) ? products.map(ProductCard) : [];
      // N·ªëi m·∫£ng c√°c chu·ªói HTML th√†nh m·ªôt chu·ªói duy nh·∫•t
      const productCardsHTML = productCardsArray.join("");

      // Ch√®n HTML c·ªßa danh s√°ch s·∫£n ph·∫©m v√†o ph·∫ßn t·ª≠ g·ªëc
      app.innerHTML = `
        <main class="product-list-container">
          <h1 class="product-list-title">üì± Danh s√°ch s·∫£n ph·∫©m</h1>
          <div class="product-grid">${productCardsHTML}</div>
        </main>
      `;
    }
  }

  // --- Kh·ªüi ch·∫°y ban ƒë·∫ßu ---
  // B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i d·ªØ li·ªáu v√† render.
  loadProducts();

  // --- H√†m Cleanup ---
  // Tr·∫£ v·ªÅ m·ªôt h√†m cleanup c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi th·ªß c√¥ng ƒë·ªÉ d·ªçn d·∫πp (h·ªßy b·ªè fetch).
  // ƒêi·ªÅu n√†y h·ªØu √≠ch trong c√°c ·ª©ng d·ª•ng SPA Vanilla JS khi chuy·ªÉn ƒë·ªïi gi·ªØa c√°c "trang".
  return () => {
    controller.abort(); // H·ªßy b·ªè request fetch ƒëang ch·ªù x·ª≠ l√Ω
    console.log("ProductList cleanup: fetch request aborted."); // Log khi cleanup ƒë∆∞·ª£c g·ªçi
    // T√πy ch·ªçn: th√™m logic ·ªü ƒë√¢y ƒë·ªÉ x√≥a c√°c ph·∫ßn t·ª≠ DOM ƒë∆∞·ª£c t·∫°o b·ªüi module n√†y khi "unmount"
    // document.getElementById(ROOT_ELEMENT_ID).innerHTML = '';
  };
}

// --- Ch·∫°y module sau khi DOM ƒë√£ s·∫µn s√†ng ---
// L·∫Øng nghe s·ª± ki·ªán DOMContentLoaded ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ ƒë∆∞·ª£c parse ho√†n to√†n.
document.addEventListener("DOMContentLoaded", () => {
  console.log("DOM fully loaded and parsed. Initializing ProductList (Vanilla JS)."); // Log khi kh·ªüi t·∫°o
  // Kh·ªüi t·∫°o v√† ch·∫°y module ProductList
  ProductList();
  // Trong m·ªôt ·ª©ng d·ª•ng SPA Vanilla JS ph·ª©c t·∫°p h∆°n, b·∫°n s·∫Ω l∆∞u h√†m cleanup ƒë∆∞·ª£c tr·∫£ v·ªÅ
  // const cleanupProductList = ProductList();
  // v√† g·ªçi cleanupProductList() khi "unmounting" module/trang n√†y.
});

// Export h√†m ch√≠nh (t√πy ch·ªçn, ph·ª• thu·ªôc v√†o c√°ch b·∫°n c·∫•u tr√∫c d·ª± √°n)
// export default ProductList; // B·ªè export default n·∫øu module t·ª± ch·∫°y v√† kh√¥ng c·∫ßn import ·ªü n∆°i kh√°c
