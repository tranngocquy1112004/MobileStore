/**
 * Module hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m t·ª´ file JSON b·∫±ng Vanilla JavaScript.
 * Module n√†y t·ª± kh·ªüi ch·∫°y khi DOM ƒë√£ s·∫µn s√†ng ƒë·ªÉ fetch d·ªØ li·ªáu v√† render giao di·ªán.
 */

// --- ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë ---

// ƒê∆∞·ªùng d·∫´n t·ªõi file JSON ch·ª©a d·ªØ li·ªáu s·∫£n ph·∫©m.
// ${process.env.PUBLIC_URL} th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c d·ª± √°n React (nh∆∞ Create React App)
// ƒë·ªÉ tham chi·∫øu ƒë·∫øn th∆∞ m·ª•c public. ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng v·ªõi c·∫•u tr√∫c d·ª± √°n c·ªßa b·∫°n.
const API_URL = `${process.env.PUBLIC_URL}/db.json`;
// ID c·ªßa ph·∫ßn t·ª≠ HTML g·ªëc n∆°i to√†n b·ªô n·ªôi dung ·ª©ng d·ª•ng s·∫Ω ƒë∆∞·ª£c render v√†o.
const ROOT_ELEMENT_ID = "app";

// Object ch·ª©a c√°c chu·ªói th√¥ng b√°o tr·∫°ng th√°i kh√°c nhau hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.
// C√°c kh√≥a (keys) tr√πng v·ªõi t√™n tr·∫°ng th√°i ('loading', 'error', 'no_products').
const MESSAGES = {
  LOADING: "‚è≥ ƒêang t·∫£i...", // Th√¥ng b√°o hi·ªÉn th·ªã khi d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i t·ª´ ngu·ªìn
  ERROR: "‚ùå Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!", // Th√¥ng b√°o hi·ªÉn th·ªã khi c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh fetch d·ªØ li·ªáu
  NO_PRODUCTS: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ hi·ªÉn th·ªã", // Th√¥ng b√°o hi·ªÉn th·ªã khi t·∫£i xong d·ªØ li·ªáu nh∆∞ng danh s√°ch s·∫£n ph·∫©m tr·ªëng r·ªóng
};

// --- H√†m l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API ---
// H√†m async v√¨ s·ª≠ d·ª•ng fetch (tr·∫£ v·ªÅ Promise) v√† await ƒë·ªÉ ch·ªù k·∫øt qu·∫£.
async function fetchProducts(signal) {
  try {
    // Th·ª±c hi·ªán y√™u c·∫ßu HTTP GET ƒë·∫øn API_URL ƒë√£ ƒë·ªãnh nghƒ©a.
    // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng 'signal' t·ª´ AbortController v√†o t√πy ch·ªçn c·ªßa fetch.
    // ƒêi·ªÅu n√†y cho ph√©p ch√∫ng ta h·ªßy y√™u c·∫ßu fetch n·∫øu c·∫ßn thi·∫øt (v√≠ d·ª•: n·∫øu ng∆∞·ªùi d√πng r·ªùi trang).
    const response = await fetch(API_URL, { signal });
    // Ki·ªÉm tra thu·ªôc t√≠nh 'ok' c·ªßa ƒë·ªëi t∆∞·ª£ng response. 'ok' l√† true n·∫øu status code l√† 200-299.
    if (!response.ok) {
      // N·∫øu response kh√¥ng th√†nh c√¥ng, n√©m ra m·ªôt ƒë·ªëi t∆∞·ª£ng Error m·ªõi v·ªõi th√¥ng b√°o l·ªói l·∫•y t·ª´ MESSAGES.
      throw new Error(MESSAGES.ERROR);
    }
    // N·∫øu response th√†nh c√¥ng, g·ªçi ph∆∞∆°ng th·ª©c .json() ƒë·ªÉ ph√¢n t√≠ch c√∫ ph√°p body c·ªßa response th√†nh JSON.
    const data = await response.json();
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:
    // - N·∫øu 'data' b·∫£n th√¢n n√≥ l√† m·ªôt m·∫£ng (Array.isArray(data) l√† true), tr·∫£ v·ªÅ 'data'.
    // - N·∫øu 'data' l√† m·ªôt ƒë·ªëi t∆∞·ª£ng V√Ä c√≥ thu·ªôc t√≠nh 'products' l√† m·∫£ng, tr·∫£ v·ªÅ 'data.products'.
    // - N·∫øu kh√¥ng kh·ªõp v·ªõi hai tr∆∞·ªùng h·ª£p tr√™n, tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng [].
    return Array.isArray(data) ? data : data.products || [];
  } catch (error) {
    // B·∫Øt c√°c l·ªói c√≥ th·ªÉ x·∫£y ra trong kh·ªëi try (v√≠ d·ª•: l·ªói m·∫°ng, l·ªói n√©m ra ·ªü d√≤ng throw new Error).
    // Ki·ªÉm tra n·∫øu t√™n c·ªßa l·ªói KH√îNG ph·∫£i l√† "AbortError".
    // "AbortError" x·∫£y ra khi y√™u c·∫ßu fetch b·ªã h·ªßy b·ªüi AbortController, ƒë√¢y l√† h√†nh vi mong mu·ªën trong qu√° tr√¨nh cleanup.
    if (error.name !== "AbortError") {
      throw error; // N·∫øu l√† l·ªói kh√°c, n√©m l·∫°i l·ªói ƒë√≥ ƒë·ªÉ n√≥ c√≥ th·ªÉ ƒë∆∞·ª£c b·∫Øt v√† x·ª≠ l√Ω ·ªü n∆°i g·ªçi h√†m fetchProducts (trong loadProducts).
    }
    // N·∫øu l·ªói l√† "AbortError", b·ªè qua l·ªói v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng. ƒêi·ªÅu n√†y bi·ªÉu th·ªã r·∫±ng qu√° tr√¨nh fetch ƒë√£ b·ªã d·ª´ng m·ªôt c√°ch c√≥ ch·ªß ƒë√≠ch.
    return [];
  }
}

// --- H√†m t·∫°o chu·ªói HTML cho th√¥ng b√°o tr·∫°ng th√°i (loading, error, no_products) ---
// Nh·∫≠n v√†o ki·ªÉu th√¥ng b√°o ('loading', 'error', 'no_products').
function StatusMessage(type) {
  // Tr·∫£ v·ªÅ m·ªôt chu·ªói HTML s·ª≠ d·ª•ng template literals.
  // T·∫°o m·ªôt th·∫ª div l√†m container, v·ªõi class 'status-container' v√† m·ªôt class ƒë·ªông l√† 'type' truy·ªÅn v√†o.
  // B√™n trong l√† m·ªôt th·∫ª paragraph v·ªõi class 'status-message' v√† n·ªôi dung l·∫•y t·ª´ object MESSAGES,
  // chuy·ªÉn ki·ªÉu 'type' th√†nh ch·ªØ hoa (v√≠ d·ª•: 'loading' -> 'LOADING') ƒë·ªÉ l·∫•y ƒë√∫ng key t·ª´ MESSAGES.
  return `
    <div class="status-container ${type}">
      <p class="status-message">${MESSAGES[type.toUpperCase()]}</p>
    </div>
  `;
}

// --- H√†m t·∫°o chu·ªói HTML cho m·ªôt th·∫ª s·∫£n ph·∫©m (Product Card) ---
// Nh·∫≠n v√†o m·ªôt ƒë·ªëi t∆∞·ª£ng 'product'.
function ProductCard(product) {
  // Tr·∫£ v·ªÅ m·ªôt chu·ªói HTML bi·ªÉu di·ªÖn giao di·ªán c·ªßa m·ªôt th·∫ª s·∫£n ph·∫©m.
  // S·ª≠ d·ª•ng template literals ƒë·ªÉ nh√∫ng c√°c thu·ªôc t√≠nh c·ªßa ƒë·ªëi t∆∞·ª£ng 'product' v√†o chu·ªói HTML.
  return `
    <div class="product-card"> <div class="product-image-container"> <img
          src="${product.image}" alt="${product.name}" class="product-image" loading="lazy" />
      </div>
      <div class="product-info"> <h3 class="product-name">${product.name}</h3> <p class="product-price">
          üí∞ ${product.price.toLocaleString("vi-VN")} VNƒê </p>
        <a
          href="/products/${product.id}" class="product-details-link" aria-label="Xem chi ti·∫øt ${product.name}" >
          <button class="details-button">Chi ti·∫øt</button> </a>
      </div>
    </div>
  `;
}

// --- H√†m ch√≠nh qu·∫£n l√Ω tr·∫°ng th√°i v√† render danh s√°ch s·∫£n ph·∫©m ---
// H√†m n√†y ƒë√≥ng vai tr√≤ t∆∞∆°ng t·ª± nh∆∞ m·ªôt React Component v·ªÅ m·∫∑t qu·∫£n l√Ω state (d√π th·ªß c√¥ng) v√† render.
function ProductList() {
  let products = []; // Bi·∫øn c·ª•c b·ªô l∆∞u tr·ªØ danh s√°ch s·∫£n ph·∫©m. Ban ƒë·∫ßu l√† m·∫£ng r·ªóng.
  // Bi·∫øn c·ª•c b·ªô theo d√µi tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa qu√° tr√¨nh t·∫£i/hi·ªÉn th·ªã d·ªØ li·ªáu. Ban ƒë·∫ßu l√† 'loading'.
  let status = "loading";
  // T·∫°o m·ªôt AbortController. ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ h·ªßy y√™u c·∫ßu fetch n·∫øu h√†m ProductList ƒë∆∞·ª£c g·ªçi l·∫°i (trong m√¥i tr∆∞·ªùng ph·ª©c t·∫°p h∆°n) ho·∫∑c tr∆∞·ªõc khi fetch ho√†n th√†nh.
  const controller = new AbortController();

  // ƒê·ªãnh nghƒ©a h√†m async ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i.
  async function loadProducts() {
    try {
      // G·ªçi h√†m fetchProducts ƒë·ªÉ l·∫•y d·ªØ li·ªáu, truy·ªÅn signal t·ª´ controller ƒë·ªÉ c√≥ th·ªÉ h·ªßy y√™u c·∫ßu.
      const result = await fetchProducts(controller.signal);
      products = result || []; // C·∫≠p nh·∫≠t bi·∫øn 'products' v·ªõi k·∫øt qu·∫£. S·ª≠ d·ª•ng '|| []' ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ lu√¥n l√† m·∫£ng.
      // C·∫≠p nh·∫≠t bi·∫øn 'status': N·∫øu m·∫£ng 'products' c√≥ ph·∫ßn t·ª≠ (length > 0), tr·∫°ng th√°i l√† 'loaded', ng∆∞·ª£c l·∫°i l√† 'no_products'.
      status = products.length ? "loaded" : "no_products";
      render(); // Sau khi c·∫≠p nh·∫≠t bi·∫øn state (products v√† status), g·ªçi h√†m render ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng.
    } catch (err) {
      // B·∫Øt l·ªói n·∫øu h√†m fetchProducts n√©m l·ªói (tr·ª´ AbortError).
      console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", err); // Ghi log l·ªói chi ti·∫øt ra console.
      status = "error"; // C·∫≠p nh·∫≠t bi·∫øn 'status' th√†nh 'error'.
      render(); // G·ªçi h√†m render ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói tr√™n giao di·ªán.
    }
  }

  // ƒê·ªãnh nghƒ©a h√†m render (v·∫Ω) giao di·ªán ng∆∞·ªùi d√πng d·ª±a tr√™n tr·∫°ng th√°i v√† d·ªØ li·ªáu hi·ªán t·∫°i.
  function render() {
    // L·∫•y ph·∫ßn t·ª≠ DOM g·ªëc (th∆∞·ªùng l√† th·∫ª div) n∆°i n·ªôi dung s·∫Ω ƒë∆∞·ª£c ch√®n v√†o, b·∫±ng ID ƒë√£ ƒë·ªãnh nghƒ©a.
    const app = document.getElementById(ROOT_ELEMENT_ID);
    // N·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ DOM n√†y, ghi l·ªói ra console v√† tho√°t h√†m render.
    if (!app) {
      console.error(`Ph·∫ßn t·ª≠ DOM v·ªõi ID "${ROOT_ELEMENT_ID}" kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.`);
      return;
    }

    // --- Logic render d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i ---

    // N·∫øu tr·∫°ng th√°i KH√îNG ph·∫£i l√† 'loaded' (t·ª©c l√† ƒëang 'loading', 'error', ho·∫∑c 'no_products')
    if (status !== "loaded") {
      // X√≥a to√†n b·ªô n·ªôi dung HTML hi·ªán t·∫°i b√™n trong ph·∫ßn t·ª≠ g·ªëc.
      // Ch√®n HTML c·ªßa th√¥ng b√°o tr·∫°ng th√°i t∆∞∆°ng ·ª©ng b·∫±ng c√°ch g·ªçi h√†m StatusMessage(status).
      app.innerHTML = StatusMessage(status);
      return; // D·ª´ng h√†m render t·∫°i ƒë√¢y.
    }

    // N·∫øu tr·∫°ng th√°i l√† 'loaded' (ƒë√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng v√† c√≥ s·∫£n ph·∫©m)

    // T·∫°o m·ªôt m·∫£ng c√°c chu·ªói HTML, m·ªói chu·ªói l√† HTML c·ªßa m·ªôt th·∫ª s·∫£n ph·∫©m.
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c .map() tr√™n m·∫£ng 'products', g·ªçi h√†m ProductCard cho m·ªói s·∫£n ph·∫©m.
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c .join("") ƒë·ªÉ n·ªëi t·∫•t c·∫£ c√°c chu·ªói HTML c·ªßa th·∫ª s·∫£n ph·∫©m l·∫°i th√†nh m·ªôt chu·ªói HTML l·ªõn.
    const productCardsHTML = products.map(ProductCard).join("");
    // X√≥a n·ªôi dung c≈© v√† ch√®n c·∫•u tr√∫c HTML cho danh s√°ch s·∫£n ph·∫©m.
    // Bao g·ªìm ti√™u ƒë·ªÅ danh s√°ch v√† m·ªôt container div v·ªõi class 'product-grid' ch·ª©a t·∫•t c·∫£ c√°c th·∫ª s·∫£n ph·∫©m ƒë√£ t·∫°o.
    app.innerHTML = `
      <main class="product-list-container"> <h1 class="product-list-title">üì± Danh s√°ch s·∫£n ph·∫©m</h1> <div class="product-grid">${productCardsHTML}</div> </main>
    `;
  }

  // --- Kh·ªüi ch·∫°y ban ƒë·∫ßu ---

  // G·ªçi h√†m loadProducts() l·∫ßn ƒë·∫ßu ti√™n ngay sau khi h√†m ProductList ƒë∆∞·ª£c g·ªçi.
  // ƒêi·ªÅu n√†y b·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i d·ªØ li·ªáu v√† render giao di·ªán ban ƒë·∫ßu (tr·∫°ng th√°i loading).
  loadProducts();

  // --- H√†m Cleanup (Quan tr·ªçng trong m√¥i tr∆∞·ªùng SPA ho·∫∑c khi module/component b·ªã g·ª° b·ªè) ---

  // H√†m ProductList tr·∫£ v·ªÅ m·ªôt h√†m kh√°c. H√†m ƒë∆∞·ª£c tr·∫£ v·ªÅ n√†y ƒë√≥ng vai tr√≤ l√† h√†m cleanup.
  // Trong m√¥i tr∆∞·ªùng React, h√†m tr·∫£ v·ªÅ t·ª´ useEffect s·∫Ω l√† h√†m cleanup. Trong vanilla JS,
  // b·∫°n s·∫Ω c·∫ßn t·ª± g·ªçi h√†m cleanup n√†y khi module/ch·ª©c nƒÉng n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt n·ªØa
  // (v√≠ d·ª•: khi b·∫°n chuy·ªÉn sang trang kh√°c trong ·ª©ng d·ª•ng SPA x√¢y d·ª±ng b·∫±ng vanilla JS).
  // H√†m cleanup n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ h·ªßy y√™u c·∫ßu fetch ƒëang ch·ªù x·ª≠ l√Ω n·∫øu n√≥ v·∫´n ch∆∞a ho√†n th√†nh.
  return () => {
    controller.abort(); // G·ªçi ph∆∞∆°ng th·ª©c abort() tr√™n AbortController ƒë·ªÉ h·ªßy y√™u c·∫ßu fetch li√™n quan.
    console.log("ProductList cleanup: fetch request aborted."); // Ghi log ƒë·ªÉ bi·∫øt cleanup ƒë√£ ch·∫°y.
    // C√≥ th·ªÉ th√™m logic d·ªçn d·∫πp DOM ·ªü ƒë√¢y n·∫øu c·∫ßn, t√πy thu·ªôc v√†o c√°ch b·∫°n qu·∫£n l√Ω v√≤ng ƒë·ªùi c·ªßa module n√†y.
  };
}

// --- Ch·∫°y ·ª©ng d·ª•ng sau khi DOM ƒë√£ s·∫µn s√†ng ---

// Th√™m m·ªôt l·∫Øng nghe s·ª± ki·ªán cho s·ª± ki·ªán 'DOMContentLoaded' tr√™n ƒë·ªëi t∆∞·ª£ng 'document'.
// S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t khi t√†i li·ªáu HTML ban ƒë·∫ßu ƒë√£ ƒë∆∞·ª£c t·∫£i v√† ph√¢n t√≠ch c√∫ ph√°p ho√†n to√†n,
// m√† kh√¥ng ch·ªù c√°c t√†i nguy√™n ph·ª• nh∆∞ stylesheet, h√¨nh ·∫£nh v√† subframe ho√†n t·∫•t t·∫£i.
document.addEventListener("DOMContentLoaded", () => {
  // Khi DOM ƒë√£ s·∫µn s√†ng (ƒë·∫£m b·∫£o ph·∫ßn t·ª≠ g·ªëc t·ªìn t·∫°i), g·ªçi h√†m ProductList() ƒë·ªÉ kh·ªüi t·∫°o v√† ch·∫°y module hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m.
  // G√°n k·∫øt qu·∫£ tr·∫£ v·ªÅ (h√†m cleanup) v√†o m·ªôt bi·∫øn n·∫øu b·∫°n c·∫ßn g·ªçi n√≥ sau n√†y.
  const cleanupProductList = ProductList();
  // V√≠ d·ª•: N·∫øu ƒë√¢y l√† SPA, khi chuy·ªÉn trang, b·∫°n s·∫Ω g·ªçi cleanupProductList().
  // Tuy nhi√™n, trong m·ªôt trang web ƒë∆°n gi·∫£n ch·ªâ ch·∫°y m·ªôt l·∫ßn, h√†m cleanup n√†y c√≥ th·ªÉ kh√¥ng bao gi·ªù ƒë∆∞·ª£c g·ªçi r√µ r√†ng.
});

// Export h√†m ProductList l√†m default export.
// ƒêi·ªÅu n√†y cho ph√©p module n√†y c√≥ th·ªÉ ƒë∆∞·ª£c import v√† s·ª≠ d·ª•ng trong c√°c file JavaScript kh√°c,
// ƒë·∫∑c bi·ªát h·ªØu √≠ch trong c√°c h·ªá th·ªëng module (nh∆∞ ES Modules, CommonJS).
// N·∫øu ƒë√¢y l√† file JS duy nh·∫•t v√† ƒë∆∞·ª£c nh√∫ng tr·ª±c ti·∫øp b·∫±ng th·∫ª <script>, d√≤ng export n√†y c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt ho·∫∑c c·∫ßn c·∫•u h√¨nh build tool.
export default ProductList;