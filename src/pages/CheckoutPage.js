// src/pages/CheckoutPage.js

import React, { useState, useContext, useEffect, useCallback, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../account/AuthContext';
import { CartContext } from '../pages/CartContext';
import './CheckoutPage.css';

// H·∫±ng s·ªë
const LOCAL_STORAGE_ORDERS_KEY = "orders";

const CheckoutPage = () => {
    // Context v√† hook ƒëi·ªÅu h∆∞·ªõng
    const { user, isLoggedIn } = useContext(AuthContext);
    const { cart, clearCart } = useContext(CartContext);
    const navigate = useNavigate();

    // Qu·∫£n l√Ω state
    const [shippingInfo, setShippingInfo] = useState({ address: '', name: '', phone: '' });
    const [selectedSavedAddressId, setSelectedSavedAddressId] = useState(null);
    const [showManualAddressForm, setShowManualAddressForm] = useState(false);
    const [message, setMessage] = useState(null);

    // T√≠nh t·ªïng gi·ªè h√†ng v·ªõi useMemo
    const cartTotal = useMemo(() => (
        Array.isArray(cart) 
            ? cart.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0) 
            : 0
    ), [cart]);

    // Kh·ªüi t·∫°o trang thanh to√°n
    useEffect(() => {
        // Chuy·ªÉn h∆∞·ªõng n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        if (!isLoggedIn || !user) {
            navigate("/");
            return;
        }

        // Chuy·ªÉn h∆∞·ªõng n·∫øu gi·ªè h√†ng tr·ªëng
        if (!cart?.length) {
            navigate("/cart");
            return;
        }

        // Thi·∫øt l·∫≠p ƒë·ªãa ch·ªâ ban ƒë·∫ßu
        if (user.addresses?.length) {
            const firstAddress = user.addresses[0];
            setShippingInfo(firstAddress);
            setSelectedSavedAddressId(firstAddress.id);
            setShowManualAddressForm(false);
        } else {
            setShowManualAddressForm(true);
            setShippingInfo({ address: '', name: '', phone: '' });
            setSelectedSavedAddressId(null);
        }
    }, [user, isLoggedIn, cart, navigate]);

    // X·ª≠ l√Ω l·ª±a ch·ªçn ƒë·ªãa ch·ªâ ƒë√£ l∆∞u
    const handleSelectSavedAddress = useCallback((addressId) => {
        const selectedAddr = user?.addresses?.find(addr => addr.id === addressId);
        if (selectedAddr) {
            setShippingInfo(selectedAddr);
            setSelectedSavedAddressId(addressId);
            setShowManualAddressForm(false);
            setMessage(null);
        }
    }, [user]);

    // X·ª≠ l√Ω thay ƒë·ªïi form ƒë·ªãa ch·ªâ th·ªß c√¥ng
    const handleManualAddressChange = useCallback((e) => {
        const { name, value } = e.target;
        setShippingInfo(prev => ({ ...prev, [name]: value }));
        setSelectedSavedAddressId(null);
        setMessage(null);
    }, []);

    // H√†m h·ªó tr·ª£ localStorage
    const readOrdersFromStorage = useCallback(() => {
        try {
            const storedData = localStorage.getItem(LOCAL_STORAGE_ORDERS_KEY);
            if (!storedData) return [];
            
            const orders = JSON.parse(storedData);
            return Array.isArray(orders) ? orders : [];
        } catch (parseError) {
            console.error("L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ localStorage:", parseError);
            setMessage("L·ªói h·ªá th·ªëng khi ƒë·ªçc d·ªØ li·ªáu ƒë∆°n h√†ng.");
            return [];
        }
    }, []);

    const saveOrdersToStorage = useCallback((ordersToSave) => {
        try {
            localStorage.setItem(LOCAL_STORAGE_ORDERS_KEY, JSON.stringify(ordersToSave));
            return true;
        } catch (error) {
            console.error("L·ªói khi l∆∞u d·ªØ li·ªáu ƒë∆°n h√†ng v√†o localStorage:", error);
            setMessage("L·ªói h·ªá th·ªëng khi l∆∞u d·ªØ li·ªáu ƒë∆°n h√†ng.");
            return false;
        }
    }, []);

    // X·ª≠ l√Ω ƒë·∫∑t h√†ng
    const handlePlaceOrder = useCallback((e) => {
        if (e) e.preventDefault();

        // Ki·ªÉm tra d·ªØ li·ªáu
        if (!shippingInfo.address || !shippingInfo.name || !shippingInfo.phone) {
            setMessage("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng.");
            return;
        }
        
        if (!cart?.length) {
            setMessage("Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng.");
            navigate('/cart');
            return;
        }
        
        if (!isLoggedIn || !user?.username) {
            setMessage("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng.");
            navigate('/');
            return;
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng
        const newOrder = {
            id: Date.now(),
            username: user.username,
            date: new Date().toISOString(),
            items: cart.map(item => ({
                id: item.id,
                name: item.name || 'S·∫£n ph·∫©m kh√¥ng r√µ',
                price: item.price || 0,
                quantity: item.quantity || 0,
            })),
            totalPrice: cartTotal,
            shippingInfo: {
                address: shippingInfo.address,
                name: shippingInfo.name,
                phone: shippingInfo.phone,
            },
            status: 'ƒêang x·ª≠ l√Ω',
        };

        // L∆∞u ƒë∆°n h√†ng v√†o localStorage
        const allOrders = readOrdersFromStorage();
        if (allOrders === null) {
            setMessage("L·ªói h·ªá th·ªëng khi ƒë·ªçc d·ªØ li·ªáu ƒë∆°n h√†ng.");
            return;
        }

        allOrders.push(newOrder);
        
        if (!saveOrdersToStorage(allOrders)) {
            return; // Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong saveOrdersToStorage
        }

        // X√≥a gi·ªè h√†ng v√† ƒëi·ªÅu h∆∞·ªõng
        clearCart();
        setMessage("ƒê·∫∑t h√†ng th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng.");
        
        setTimeout(() => {
            navigate('/orders');
        }, 1500);
    }, [
        shippingInfo, 
        cart, 
        cartTotal, 
        isLoggedIn, 
        user, 
        clearCart, 
        navigate, 
        readOrdersFromStorage, 
        saveOrdersToStorage
    ]);

    // Chuy·ªÉn ƒë·ªïi gi·ªØa ƒë·ªãa ch·ªâ ƒë√£ l∆∞u v√† nh·∫≠p th·ªß c√¥ng
    const toggleAddressForm = useCallback((showForm) => {
        setShowManualAddressForm(showForm);
        
        if (showForm) {
            setSelectedSavedAddressId(null);
            setShippingInfo({ address: '', name: '', phone: '' });
        } else if (user?.addresses?.length) {
            const firstAddress = user.addresses[0];
            setShippingInfo(firstAddress);
            setSelectedSavedAddressId(firstAddress.id);
        }
        
        setMessage(null);
    }, [user]);

    // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
    if (!isLoggedIn || !user) {
        return <p className="status-message">ƒêang ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p...</p>;
    }

    if (!cart?.length) {
        return <p className="status-message">ƒêang ki·ªÉm tra gi·ªè h√†ng...</p>;
    }

    // X√°c ƒë·ªãnh n√∫t ƒë·∫∑t h√†ng c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
    const isOrderButtonDisabled = !shippingInfo.address || 
                                !shippingInfo.name || 
                                !shippingInfo.phone || 
                                !isLoggedIn || 
                                !cart?.length;

    return (
        <div className="checkout-container">
            <h1 className="page-title">Thanh to√°n</h1>

            {/* Hi·ªÉn th·ªã th√¥ng b√°o */}
            {message && (
                <div className={`message ${message.includes('th√†nh c√¥ng') ? 'success' : 'error'}`}>
                    {message}
                </div>
            )}

            {/* Ph·∫ßn T√≥m t·∫Øt ƒë∆°n h√†ng */}
            <div className="order-summary-section">
                <h2>üìã Th√¥ng tin ƒë∆°n h√†ng</h2>
                {cart?.length > 0 ? (
                    <>
                        <ul className="checkout-cart-items-list">
                            {cart.map((item, index) => (
                                <li key={item.id || index} className="checkout-cart-item">
                                    <span className="item-name">{item.name || 'S·∫£n ph·∫©m kh√¥ng r√µ'}</span>
                                    <span className="item-quantity">x {item.quantity || 0}</span>
                                    <span className="item-price">
                                        {((item.price || 0) * (item.quantity || 0)).toLocaleString("vi-VN")} VNƒê
                                    </span>
                                </li>
                            ))}
                        </ul>
                        <p className="checkout-total-price">
                            <strong>T·ªïng ti·ªÅn:</strong> {cartTotal.toLocaleString("vi-VN")} VNƒê
                        </p>
                    </>
                ) : (
                    <p>Gi·ªè h√†ng tr·ªëng.</p>
                )}
            </div>

            {/* Ph·∫ßn Th√¥ng tin giao h√†ng */}
            <div className="shipping-info-section">
                <h2>üöö Th√¥ng tin giao h√†ng</h2>

                {/* Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë√£ l∆∞u */}
                {isLoggedIn && user?.addresses?.length > 0 && (
                    <div className="saved-addresses-selection">
                        <h3>Ch·ªçn ƒë·ªãa ch·ªâ ƒë√£ l∆∞u:</h3>
                        <ul className="address-options-list">
                            {user.addresses.map(addr => (
                                <li key={addr.id}>
                                    <input
                                        type="radio"
                                        id={`saved-address-${addr.id}`}
                                        name="shippingAddressOption"
                                        checked={selectedSavedAddressId === addr.id}
                                        onChange={() => handleSelectSavedAddress(addr.id)}
                                    />
                                    <label htmlFor={`saved-address-${addr.id}`} className="address-option-label">
                                        <strong>{addr.name}</strong> - {addr.phone} - {addr.address}
                                    </label>
                                </li>
                            ))}
                        </ul>
                        <button
                            className="toggle-address-form-button"
                            onClick={() => toggleAddressForm(true)}
                        >
                            Nh·∫≠p ƒë·ªãa ch·ªâ m·ªõi
                        </button>
                        <hr />
                    </div>
                )}

                {/* Form nh·∫≠p ƒë·ªãa ch·ªâ th·ªß c√¥ng */}
                {(showManualAddressForm || (user?.addresses?.length === 0 && isLoggedIn)) ? (
                    <form className="manual-address-entry" onSubmit={handlePlaceOrder}>
                        <h3>Nh·∫≠p ƒë·ªãa ch·ªâ m·ªõi:</h3>
                        
                        {user?.addresses?.length > 0 && (
                            <button
                                type="button"
                                className="toggle-address-form-button"
                                onClick={() => toggleAddressForm(false)}
                            >
                                ‚Üê Quay l·∫°i ch·ªçn ƒë·ªãa ch·ªâ ƒë√£ l∆∞u
                            </button>
                        )}
                        
                        <div className="form-group">
                            <label htmlFor="manual-address-input">ƒê·ªãa ch·ªâ:</label>
                            <input
                                type="text"
                                id="manual-address-input"
                                name="address"
                                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt"
                                value={shippingInfo.address}
                                onChange={handleManualAddressChange}
                                required
                            />
                        </div>
                        
                        <div className="form-group">
                            <label htmlFor="manual-name-input">Ng∆∞·ªùi nh·∫≠n:</label>
                            <input
                                type="text"
                                id="manual-name-input"
                                name="name"
                                placeholder="T√™n ng∆∞·ªùi nh·∫≠n"
                                value={shippingInfo.name}
                                onChange={handleManualAddressChange}
                                required
                            />
                        </div>
                        
                        <div className="form-group">
                            <label htmlFor="manual-phone-input">ƒêi·ªán tho·∫°i:</label>
                            <input
                                type="tel"
                                id="manual-phone-input"
                                name="phone"
                                placeholder="S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
                                value={shippingInfo.phone}
                                onChange={handleManualAddressChange}
                                required
                            />
                        </div>
                        
                        <button
                            type="submit"
                            className="place-order-button"
                            disabled={isOrderButtonDisabled}
                        >
                            ‚úÖ ƒê·∫∑t h√†ng
                        </button>
                    </form>
                ) : (
                    isLoggedIn && user?.addresses?.length > 0 && (
                        <button
                            className="place-order-button"
                            onClick={handlePlaceOrder}
                            disabled={isOrderButtonDisabled}
                        >
                            ‚úÖ ƒê·∫∑t h√†ng
                        </button>
                    )
                )}

                {/* Xem tr∆∞·ªõc th√¥ng tin giao h√†ng */}
                <div className="final-shipping-preview">
                    <h3>ƒê·ªãa ch·ªâ s·∫Ω d√πng ƒë·ªÉ giao h√†ng:</h3>
                    {shippingInfo.address && shippingInfo.name && shippingInfo.phone ? (
                        <p className="shipping-details">
                            <strong>{shippingInfo.name}</strong> - {shippingInfo.phone} <br/>
                            {shippingInfo.address}
                        </p>
                    ) : (
                        <p className="shipping-placeholder">Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng ·ªü tr√™n.</p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default CheckoutPage;