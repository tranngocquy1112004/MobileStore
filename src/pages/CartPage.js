import React, { useContext, useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { CartContext } from "./CartContext"; // Context ƒë·ªÉ qu·∫£n l√Ω gi·ªè h√†ng
import { AuthContext } from "../account/AuthContext"; // Context ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
import CheckoutModal from "../components/CheckoutModal"; // Modal ƒë·ªÉ nh·∫≠p th√¥ng tin thanh to√°n
import "./CartPage.css";

// ƒê·ªãnh nghƒ©a c√°c th√¥ng b√°o c·ªë ƒë·ªãnh
const MESSAGES = {
  EMPTY_CART: "Gi·ªè h√†ng tr·ªëng", // Th√¥ng b√°o khi gi·ªè h√†ng r·ªóng
  CHECKOUT_SUCCESS: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", // Th√¥ng b√°o khi ƒë·∫∑t h√†ng th√†nh c√¥ng
  LOGIN_REQUIRED: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!", // Th√¥ng b√°o khi c·∫ßn ƒëƒÉng nh·∫≠p
};

// Component CartItem hi·ªÉn th·ªã th√¥ng tin m·ªôt s·∫£n ph·∫©m trong gi·ªè h√†ng
const CartItem = ({ item, onIncrease, onDecrease, onRemove }) => {
  const isDecreaseDisabled = item.quantity === 1; // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng l√† 1 ƒë·ªÉ v√¥ hi·ªáu h√≥a n√∫t gi·∫£m

  return (
    <li className="cart-item">
      <img
        src={item.image}
        alt={item.name}
        className="cart-image"
        loading="lazy" // T·∫£i ·∫£nh theo ch·∫ø ƒë·ªô lazy ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
      />
      <div className="cart-item-details">
        <p className="cart-name">{item.name}</p> {/* T√™n s·∫£n ph·∫©m */}
        <p className="cart-price">
          üí∞ {item.price.toLocaleString("vi-VN")} VNƒê {/* Gi√° s·∫£n ph·∫©m ƒë·ªãnh d·∫°ng VNƒê */}
        </p>
        <div className="quantity-controls">
          <button
            onClick={() => onDecrease(item.id)} // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            disabled={isDecreaseDisabled} // V√¥ hi·ªáu h√≥a n·∫øu s·ªë l∆∞·ª£ng l√† 1
            className={isDecreaseDisabled ? "disabled" : ""}
            aria-label={`Gi·∫£m s·ªë l∆∞·ª£ng ${item.name}`}
          >
            -
          </button>
          <span>{item.quantity}</span> {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng hi·ªán t·∫°i */}
          <button
            onClick={() => onIncrease(item.id)} // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            aria-label={`TƒÉng s·ªë l∆∞·ª£ng ${item.name}`}
          >
            +
          </button>
        </div>
      </div>
      <button
        className="remove-button"
        onClick={() => onRemove(item.id)} // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
        aria-label={`X√≥a ${item.name} kh·ªèi gi·ªè h√†ng`}
      >
        X√≥a
      </button>
    </li>
  );
};

// Component CartSummary hi·ªÉn th·ªã t√≥m t·∫Øt gi·ªè h√†ng
const CartSummary = ({ totalPrice, onCheckout }) => (
  <div className="cart-summary">
    <h3 className="total-price">
      T·ªïng ti·ªÅn: {totalPrice.toLocaleString("vi-VN")} VNƒê {/* T·ªïng ti·ªÅn gi·ªè h√†ng */}
    </h3>
    <button className="checkout-button" onClick={onCheckout}>
      üõç Mua h√†ng {/* N√∫t ti·∫øn h√†nh thanh to√°n */}
    </button>
  </div>
);

// Component EmptyCart hi·ªÉn th·ªã khi gi·ªè h√†ng r·ªóng
const EmptyCart = () => (
  <p className="empty-cart-message">{MESSAGES.EMPTY_CART}</p> // Th√¥ng b√°o gi·ªè h√†ng r·ªóng
);

// Component ch√≠nh CartPage
const CartPage = () => {
  const navigate = useNavigate(); // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng trang
  // L·∫•y c√°c h√†m v√† d·ªØ li·ªáu t·ª´ CartContext
  const { cart, removeFromCart, increaseQuantity, decreaseQuantity, clearCart } =
    useContext(CartContext);
  // L·∫•y tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ AuthContext, m·∫∑c ƒë·ªãnh l√† false n·∫øu kh√¥ng c√≥
  const { isLoggedIn } = useContext(AuthContext) || { isLoggedIn: false };
  const [showModal, setShowModal] = useState(false); // State ƒë·ªÉ hi·ªÉn th·ªã modal thanh to√°n
  const [isLoading, setIsLoading] = useState(true); // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i

  // Gi·∫£ l·∫≠p th·ªùi gian t·∫£i d·ªØ li·ªáu khi component mount
  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 1000); // T·∫Øt tr·∫°ng th√°i t·∫£i sau 1 gi√¢y
    return () => clearTimeout(timer); // H·ªßy timeout khi component unmount
  }, []);

  // T√≠nh t·ªïng gi√° v√† t·ªïng s·ªë s·∫£n ph·∫©m trong gi·ªè h√†ng
  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0); // T·ªïng ti·ªÅn
  const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); // T·ªïng s·ªë s·∫£n ph·∫©m

  // X·ª≠ l√Ω khi nh·∫•n n√∫t thanh to√°n
  const handleCheckout = () => {
    if (!isLoggedIn) {
      alert(MESSAGES.LOGIN_REQUIRED); // Th√¥ng b√°o n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
      navigate("/"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
      return;
    }
    setShowModal(true); // Hi·ªÉn th·ªã modal thanh to√°n
  };

  // X·ª≠ l√Ω khi x√°c nh·∫≠n thanh to√°n
  const handleConfirmCheckout = (shippingInfo) => {
    // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng m·ªõi
    const order = {
      id: Date.now(), // ID d·ª±a tr√™n timestamp
      items: cart, // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè
      totalPrice, // T·ªïng ti·ªÅn
      shippingInfo, // Th√¥ng tin giao h√†ng
      date: new Date().toISOString(), // Th·ªùi gian ƒë·∫∑t h√†ng
    };

    // L·∫•y danh s√°ch ƒë∆°n h√†ng hi·ªán c√≥ t·ª´ localStorage
    const existingOrders = JSON.parse(localStorage.getItem("orders")) || [];
    // L∆∞u ƒë∆°n h√†ng m·ªõi v√†o localStorage
    localStorage.setItem("orders", JSON.stringify([...existingOrders, order]));

    alert(MESSAGES.CHECKOUT_SUCCESS); // Th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
    clearCart(); // X√≥a gi·ªè h√†ng
    setShowModal(false); // ·∫®n modal
    navigate("/home"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
  };

  // X·ª≠ l√Ω khi h·ªßy thanh to√°n
  const handleCancelCheckout = () => {
    setShowModal(false); // ·∫®n modal thanh to√°n
  };

  // X·ª≠ l√Ω x√≥a to√†n b·ªô gi·ªè h√†ng
  const handleClearCart = () => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?")) return; // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
    clearCart(); // X√≥a gi·ªè h√†ng
  };

  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">ƒêang t·∫£i...</p>
      </div>
    );
  }

  // Giao di·ªán ch√≠nh
  return (
    <div className="cart-container">
      <h2>üõç Gi·ªè H√†ng ({totalItems} s·∫£n ph·∫©m)</h2> {/* Ti√™u ƒë·ªÅ v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m */}
      {cart.length === 0 ? (
        <EmptyCart /> // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu gi·ªè h√†ng r·ªóng
      ) : (
        <>
          <ul className="cart-list">
            {cart.map((item) => (
              <CartItem
                key={item.id}
                item={item}
                onIncrease={increaseQuantity} // H√†m tƒÉng s·ªë l∆∞·ª£ng
                onDecrease={decreaseQuantity} // H√†m gi·∫£m s·ªë l∆∞·ª£ng
                onRemove={removeFromCart} // H√†m x√≥a s·∫£n ph·∫©m
              />
            ))}
          </ul>
          <button
            className="clear-cart-button"
            onClick={handleClearCart}
            aria-label="X√≥a to√†n b·ªô gi·ªè h√†ng"
          >
            X√≥a t·∫•t c·∫£ {/* N√∫t x√≥a to√†n b·ªô gi·ªè h√†ng */}
          </button>
          <CartSummary
            totalPrice={totalPrice}
            onCheckout={handleCheckout} // H√†m x·ª≠ l√Ω thanh to√°n
          />
        </>
      )}
      {/* Hi·ªÉn th·ªã modal thanh to√°n n·∫øu showModal l√† true */}
      {showModal && (
        <CheckoutModal
          cart={cart}
          totalPrice={totalPrice}
          onConfirm={handleConfirmCheckout} // H√†m x√°c nh·∫≠n thanh to√°n
          onCancel={handleCancelCheckout} // H√†m h·ªßy thanh to√°n
        />
      )}
      {/* C√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng */}
      <div className="cart-links">
        <Link to="/orders" className="order-history-link">
          üìú Xem l·ªãch s·ª≠ ƒë∆°n h√†ng {/* Li√™n k·∫øt ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng */}
        </Link>
        <Link to="/home" className="back-button">
          ‚¨Ö Quay l·∫°i c·ª≠a h√†ng {/* Li√™n k·∫øt quay l·∫°i trang ch·ªß */}
        </Link>
      </div>
    </div>
  );
};

export default CartPage;