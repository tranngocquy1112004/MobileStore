import React, { useContext, useState, useEffect, useCallback } from "react"; // Import c√°c hook c·∫ßn thi·∫øt t·ª´ th∆∞ vi·ªán React: useContext ƒë·ªÉ truy c·∫≠p Context API, useState ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ª•c b·ªô, useEffect ƒë·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• ph·ª• (side effects), v√† useCallback ƒë·ªÉ ghi nh·ªõ (memoize) c√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán nh·∫±m t·ªëi ∆∞u hi·ªáu su·∫•t
import { Link, useNavigate } from "react-router-dom"; // Import c√°c th√†nh ph·∫ßn t·ª´ react-router-dom: Link ƒë·ªÉ t·∫°o c√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng SPA, v√† useNavigate ƒë·ªÉ th·ª±c hi·ªán ƒëi·ªÅu h∆∞·ªõng trang b·∫±ng code JavaScript
import { CartContext } from "./CartContext"; // Import CartContext t·ª´ c√πng th∆∞ m·ª•c. Context n√†y ch·ª©a tr·∫°ng th√°i gi·ªè h√†ng (cart) v√† c√°c h√†m ƒë·ªÉ qu·∫£n l√Ω gi·ªè h√†ng (addToCart, removeFromCart, increaseQuantity, decreaseQuantity, clearCart)
import { AuthContext } from "../account/AuthContext"; // Import AuthContext t·ª´ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi. Context n√†y ch·ª©a tr·∫°ng th√°i x√°c th·ª±c c·ªßa ng∆∞·ªùi d√πng (isLoggedIn)
import CheckoutModal from "../components/CheckoutModal"; // Import component Modal t√πy ch·ªânh ƒë·ªÉ hi·ªÉn th·ªã form thanh to√°n v√† nh·∫≠p th√¥ng tin giao h√†ng
import "./CartPage.css"; // Import file CSS t√πy ch·ªânh ƒë·ªÉ ƒë·ªãnh d·∫°ng giao di·ªán cho component CartPage n√†y

// --- ƒê·ªãnh nghƒ©a h·∫±ng s·ªë ---

// Object ch·ª©a c√°c chu·ªói th√¥ng b√°o s·∫Ω hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng, gi√∫p d·ªÖ d√†ng qu·∫£n l√Ω n·ªôi dung th√¥ng b√°o
const MESSAGES = {
  EMPTY_CART: "Gi·ªè h√†ng tr·ªëng", // Th√¥ng b√°o hi·ªÉn th·ªã khi gi·ªè h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m n√†o
  CHECKOUT_SUCCESS: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", // Th√¥ng b√°o hi·ªÉn th·ªã khi qu√° tr√¨nh ƒë·∫∑t h√†ng ho√†n t·∫•t th√†nh c√¥ng
  LOGIN_REQUIRED: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!", // Th√¥ng b√°o y√™u c·∫ßu ng∆∞·ªùi d√πng ph·∫£i ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th·ª±c hi·ªán thanh to√°n
};

// ƒê·ªãnh nghƒ©a key d√πng cho localStorage ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch c√°c ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t.
// Vi·ªác s·ª≠ d·ª•ng h·∫±ng s·ªë gi√∫p tr√°nh g√µ sai key v√† d·ªÖ d√†ng qu·∫£n l√Ω. Key n√†y n√™n nh·∫•t qu√°n v·ªõi OrderHistory.
const LOCAL_STORAGE_ORDERS_KEY = "orders";

// --- Component con: CartItem (Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt m·ªôt s·∫£n ph·∫©m trong gi·ªè h√†ng) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering c·ªßa component con n√†y.
// Component ch·ªâ render l·∫°i khi props c·ªßa n√≥ thay ƒë·ªïi (item, onIncrease, onDecrease, onRemove).
const CartItem = React.memo(({ item, onIncrease, onDecrease, onRemove }) => {
  // X√°c ƒë·ªãnh xem n√∫t gi·∫£m s·ªë l∆∞·ª£ng c√≥ n√™n b·ªã v√¥ hi·ªáu h√≥a hay kh√¥ng.
  // N√∫t n√†y s·∫Ω b·ªã v√¥ hi·ªáu h√≥a n·∫øu s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªán t·∫°i trong gi·ªè l√† 1.
  const isDecreaseDisabled = item.quantity === 1;

  return (
    <li className="cart-item"> {/* Container ch√≠nh cho m·ªôt s·∫£n ph·∫©m ri√™ng l·∫ª trong danh s√°ch gi·ªè h√†ng */}
      {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
      <img
        src={item.image} // ƒê∆∞·ªùng d·∫´n ·∫£nh s·∫£n ph·∫©m
        alt={item.name} // Alt text cho ·∫£nh, s·ª≠ d·ª•ng t√™n s·∫£n ph·∫©m ƒë·ªÉ h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n
        className="cart-image" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng ·∫£nh trong gi·ªè h√†ng
        loading="lazy" // S·ª≠ d·ª•ng thu·ªôc t√≠nh loading="lazy" ƒë·ªÉ tr√¨nh duy·ªát ch·ªâ t·∫£i ·∫£nh khi n√≥ g·∫ßn hi·ªÉn th·ªã tr√™n viewport, c·∫£i thi·ªán hi·ªáu su·∫•t t·∫£i trang ban ƒë·∫ßu
      />
      {/* Ph·∫ßn chi ti·∫øt th√¥ng tin s·∫£n ph·∫©m (t√™n, gi√°, ƒëi·ªÅu khi·ªÉn s·ªë l∆∞·ª£ng) */}
      <div className="cart-item-details">
        <p className="cart-name">{item.name}</p> {/* Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m */}
        <p className="cart-price">
          üí∞ {item.price.toLocaleString("vi-VN")} VNƒê{" "} {/* Hi·ªÉn th·ªã gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng theo ti·ªÅn t·ªá Vi·ªát Nam */}
        </p>
        {/* ƒêi·ªÅu khi·ªÉn tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m */}
        <div className="quantity-controls"> {/* Container cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn s·ªë l∆∞·ª£ng */}
          {/* N√∫t gi·∫£m s·ªë l∆∞·ª£ng */}
          <button
            onClick={() => onDecrease(item.id)} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click. G·ªçi h√†m 'onDecrease' (ƒë∆∞·ª£c truy·ªÅn t·ª´ component cha th√¥ng qua props) v·ªõi ID c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i.
            disabled={isDecreaseDisabled} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu bi·∫øn 'isDecreaseDisabled' l√† true.
            className={isDecreaseDisabled ? "disabled" : ""} // Th√™m class CSS 'disabled' v√†o n√∫t khi n√≥ b·ªã v√¥ hi·ªáu h√≥a ƒë·ªÉ thay ƒë·ªïi giao di·ªán.
            aria-label={`Gi·∫£m s·ªë l∆∞·ª£ng ${item.name}`} // Thu·ªôc t√≠nh h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n cho ng∆∞·ªùi d√πng s·ª≠ d·ª•ng tr√¨nh ƒë·ªçc m√†n h√¨nh.
          >
            - {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t gi·∫£m */}
          </button>
          <span>{item.quantity}</span> {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng hi·ªán t·∫°i c·ªßa s·∫£n ph·∫©m trong gi·ªè */}
          {/* N√∫t tƒÉng s·ªë l∆∞·ª£ng */}
          <button
            onClick={() => onIncrease(item.id)} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click. G·ªçi h√†m 'onIncrease' (ƒë∆∞·ª£c truy·ªÅn t·ª´ component cha th√¥ng qua props) v·ªõi ID c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i.
            aria-label={`TƒÉng s·ªë l∆∞·ª£ng ${item.name}`} // Thu·ªôc t√≠nh h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n
          >
            + {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t tƒÉng */}
          </button>
        </div>
      </div>
      {/* N√∫t x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng */}
      <button
        className="remove-button" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng n√∫t x√≥a
        onClick={() => onRemove(item.id)} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click. G·ªçi h√†m 'onRemove' (ƒë∆∞·ª£c truy·ªÅn t·ª´ component cha th√¥ng qua props) v·ªõi ID c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i.
        aria-label={`X√≥a ${item.name} kh·ªèi gi·ªè h√†ng`} // Thu·ªôc t√≠nh h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n
      >
        X√≥a {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t x√≥a */}
      </button>
    </li>
  );
}); // K·∫øt th√∫c React.memo() cho component CartItem

// --- Component con: CartSummary (Hi·ªÉn th·ªã t√≥m t·∫Øt gi·ªè h√†ng v√† n√∫t thanh to√°n) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering.
// Component ch·ªâ render l·∫°i khi props c·ªßa n√≥ thay ƒë·ªïi (totalPrice, onCheckout).
const CartSummary = React.memo(({ totalPrice, onCheckout }) => (
  <div className="cart-summary"> {/* Container cho ph·∫ßn t√≥m t·∫Øt gi·ªè h√†ng */}
    <h3 className="total-price">
      T·ªïng ti·ªÅn: {totalPrice.toLocaleString("vi-VN")} VNƒê{" "} {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng, ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá Vi·ªát Nam */}
      {/* H√†m toLocaleString("vi-VN") gi√∫p ƒë·ªãnh d·∫°ng s·ªë th√†nh chu·ªói ti·ªÅn t·ªá theo quy ∆∞·ªõc c·ªßa Vi·ªát Nam */}
    </h3>
    {/* N√∫t "Mua h√†ng" ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh thanh to√°n */}
    <button className="checkout-button" onClick={onCheckout}> {/* G·∫Øn h√†m 'onCheckout' (truy·ªÅn qua props) v√†o s·ª± ki·ªán click n√∫t */}
      üõç Mua h√†ng {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t */}
    </button>
  </div>
)); // K·∫øt th√∫c React.memo() cho component CartSummary

// --- Component con: EmptyCart (Hi·ªÉn th·ªã th√¥ng b√°o khi gi·ªè h√†ng r·ªóng) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering.
// Component n√†y kh√¥ng nh·∫≠n props, n√™n n√≥ ch·ªâ render l·∫°i khi component cha render v√† g·ª≠i c√πng props (kh√¥ng thay ƒë·ªïi).
const EmptyCart = React.memo(() => (
  <div className="empty-cart-message-container"> {/* Container cho th√¥ng b√°o gi·ªè h√†ng tr·ªëng */}
    {/* C√≥ th·ªÉ th√™m icon ho·∫∑c h√¨nh ·∫£nh minh h·ªça gi·ªè h√†ng tr·ªëng t·∫°i ƒë√¢y */}
    <p className="empty-cart-message">{MESSAGES.EMPTY_CART}</p>{" "} {/* Hi·ªÉn th·ªã th√¥ng b√°o "Gi·ªè h√†ng tr·ªëng" t·ª´ h·∫±ng s·ªë MESSAGES */}
    {/* Li√™n k·∫øt (Link) m·ªùi ng∆∞·ªùi d√πng quay l·∫°i trang mua s·∫Øm (danh s√°ch s·∫£n ph·∫©m) */}
    <Link to="/products" className="shop-now-link"> {/* 'to="/products"' ch·ªâ ƒë·ªãnh route c·∫ßn ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn */}
      üõí Ti·∫øp t·ª•c mua s·∫Øm {/* N·ªôi dung hi·ªÉn th·ªã tr√™n li√™n k·∫øt */}
    </Link>
  </div>
)); // K·∫øt th√∫c React.memo() cho component EmptyCart


// --- Component ch√≠nh: CartPage (Trang hi·ªÉn th·ªã gi·ªè h√†ng) ---
// ƒê√¢y l√† functional component hi·ªÉn th·ªã to√†n b·ªô n·ªôi dung c·ªßa trang gi·ªè h√†ng.
const CartPage = () => {
  const navigate = useNavigate(); // S·ª≠ d·ª•ng hook useNavigate ƒë·ªÉ th·ª±c hi·ªán ƒëi·ªÅu h∆∞·ªõng trang b·∫±ng code.

  // S·ª≠ d·ª•ng hook useContext ƒë·ªÉ truy c·∫≠p v√†o CartContext v√† l·∫•y ra c√°c gi√° tr·ªã v√† h√†m c·∫ßn thi·∫øt:
  // - cart: M·∫£ng ch·ª©a danh s√°ch c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng hi·ªán t·∫°i.
  // - removeFromCart: H√†m x√≥a m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè.
  // - increaseQuantity: H√†m tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.
  // - decreaseQuantity: H√†m gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.
  // - clearCart: H√†m x√≥a to√†n b·ªô gi·ªè h√†ng.
  const { cart, removeFromCart, increaseQuantity, decreaseQuantity, clearCart } =
    useContext(CartContext);

  // S·ª≠ d·ª•ng hook useContext ƒë·ªÉ truy c·∫≠p v√†o AuthContext v√† l·∫•y ra tr·∫°ng th√°i 'isLoggedIn'.
  // Cung c·∫•p gi√° tr·ªã m·∫∑c ƒë·ªãnh `{ isLoggedIn: false }` ƒë·ªÉ ƒë·∫£m b·∫£o ·ª©ng d·ª•ng kh√¥ng g·∫∑p l·ªói n·∫øu AuthContext ch∆∞a ƒë∆∞·ª£c cung c·∫•p ƒë·∫ßy ƒë·ªß ho·∫∑c thu·ªôc t√≠nh isLoggedIn kh√¥ng t·ªìn t·∫°i.
  const { isLoggedIn } = useContext(AuthContext) || { isLoggedIn: false };

  // --- State qu·∫£n l√Ω tr·∫°ng th√°i hi·ªÉn th·ªã c·ªßa Component CartPage ---
  // State 'showModal': Boolean ki·ªÉm so√°t vi·ªác Modal thanh to√°n c√≥ ƒëang hi·ªÉn th·ªã hay kh√¥ng. Ban ƒë·∫ßu l√† false (·∫©n).
  const [showModal, setShowModal] = useState(false);
  // State 'isLoading': Boolean qu·∫£n l√Ω tr·∫°ng th√°i loading. ƒê∆∞·ª£c s·ª≠ d·ª•ng ·ªü ƒë√¢y ƒë·ªÉ gi·∫£ l·∫≠p th·ªùi gian t·∫£i trang gi·ªè h√†ng ban ƒë·∫ßu. Ban ƒë·∫ßu l√† true.
  const [isLoading, setIsLoading] = useState(true);

  // --- Effect hook ƒë·ªÉ gi·∫£ l·∫≠p th·ªùi gian t·∫£i d·ªØ li·ªáu khi component mount ---
  // Effect n√†y s·∫Ω ch·∫°y M·ªòT L·∫¶N duy nh·∫•t sau l·∫ßn render ƒë·∫ßu ti√™n c·ªßa component (t∆∞∆°ng t·ª± componentDidMount).
  useEffect(() => {
    // T·∫°o m·ªôt h·∫πn gi·ªù (setTimeout) ƒë·ªÉ sau 1000ms (1 gi√¢y), h√†m callback b√™n trong s·∫Ω ƒë∆∞·ª£c th·ª±c thi.
    // H√†m callback n√†y ch·ªâ ƒë∆°n gi·∫£n l√† c·∫≠p nh·∫≠t state 'isLoading' th√†nh false.
    // Trong m·ªôt ·ª©ng d·ª•ng th·ª±c t·∫ø, effect n√†y s·∫Ω l√† n∆°i b·∫°n fetch d·ªØ li·ªáu gi·ªè h√†ng t·ª´ m·ªôt API n·∫øu d·ªØ li·ªáu ƒë√≥ kh√¥ng ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Context ho·∫∑c c·∫ßn ƒë∆∞·ª£c t·∫£i l·∫°i khi v√†o trang.
    const timer = setTimeout(() => setIsLoading(false), 1000); // 1000ms = 1 gi√¢y

    // H√†m cleanup cho effect n√†y. H√†m n√†y s·∫Ω ch·∫°y khi component b·ªã h·ªßy b·ªè (unmount)
    // ho·∫∑c khi effect chu·∫©n b·ªã ch·∫°y l·∫°i (trong tr∆∞·ªùng h·ª£p dependencies thay ƒë·ªïi, nh∆∞ng ·ªü ƒë√¢y dependency array l√† r·ªóng).
    // Cleanup function s·∫Ω x√≥a b·ªè h·∫πn gi·ªù ƒë√£ t·∫°o, ngƒÉn n√≥ ch·∫°y v√† c·∫≠p nh·∫≠t state sau khi component ƒë√£ unmount.
    return () => clearTimeout(timer);
  }, []); // M·∫£ng dependencies r·ªóng []: ƒë·∫£m b·∫£o effect ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t khi component ƒë∆∞·ª£c mount l·∫ßn ƒë·∫ßu.

  // --- T√≠nh to√°n c√°c gi√° tr·ªã d·∫´n xu·∫•t t·ª´ state 'cart' ---
  // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c .reduce() ƒë·ªÉ t√≠nh t·ªïng gi√° tr·ªã c·ªßa t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng.
  // L·∫∑p qua m·∫£ng 'cart', c·ªông d·ªìn (sum) gi√° tr·ªã c·ªßa m·ªói item (item.price * item.quantity).
  // Gi√° tr·ªã kh·ªüi t·∫°o ban ƒë·∫ßu cho 'sum' l√† 0.
  const totalPrice = cart.reduce(
    (sum, item) => sum + item.price * item.quantity, // H√†m callback th·ª±c hi·ªán t√≠nh t·ªïng
    0 // Gi√° tr·ªã kh·ªüi t·∫°o ban ƒë·∫ßu
  );
  // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c .reduce() ƒë·ªÉ t√≠nh t·ªïng s·ªë l∆∞·ª£ng c·ªßa t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng.
  // L·∫∑p qua m·∫£ng 'cart', c·ªông d·ªìn (sum) s·ªë l∆∞·ª£ng c·ªßa m·ªói item (item.quantity).
  // Gi√° tr·ªã kh·ªüi t·∫°o ban ƒë·∫ßu cho 'sum' l√† 0.
  const totalItems = cart.reduce(
    (sum, item) => sum + item.quantity, // H√†m callback
    0 // Gi√° tr·ªã kh·ªüi t·∫°o ban ƒë·∫ßu
  );

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Mua h√†ng" ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ghi nh·ªõ h√†m n√†y. H√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi.
  // Dependencies ·ªü ƒë√¢y l√† 'isLoggedIn' (t·ª´ AuthContext) v√† 'navigate' (t·ª´ hook useNavigate).
  const handleCheckout = useCallback(() => {
    // 1. Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng.
    if (!isLoggedIn) {
      alert(MESSAGES.LOGIN_REQUIRED); // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã m·ªôt h·ªôp tho·∫°i th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p.
      navigate("/"); // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang g·ªëc (th∆∞·ªùng l√† trang ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω ho·∫∑c trang ch·ªß). B·∫°n c√≥ th·ªÉ thay ƒë·ªïi route n√†y n·∫øu c·∫ßn.
      return; // D·ª´ng h√†m, kh√¥ng ti·∫øp t·ª•c x·ª≠ l√Ω thanh to√°n n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p.
    }
    // 2. N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã modal thanh to√°n.
    setShowModal(true); // C·∫≠p nh·∫≠t state 'showModal' th√†nh true ƒë·ªÉ hi·ªÉn th·ªã component CheckoutModal.
  }, [isLoggedIn, navigate]); // M·∫£ng dependencies: h√†m ph·ª• thu·ªôc v√†o tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† h√†m ƒëi·ªÅu h∆∞·ªõng.

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n trong modal ---
  // H√†m n√†y nh·∫≠n ƒë·ªëi t∆∞·ª£ng 'shippingInfo' (th√¥ng tin giao h√†ng ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p trong modal) l√†m tham s·ªë.
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ghi nh·ªõ h√†m n√†y. H√†m s·∫Ω ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi.
  // Dependencies bao g·ªìm: 'cart', 'totalPrice' (ƒë·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng), 'clearCart' (ƒë·ªÉ x√≥a gi·ªè sau khi ƒë·∫∑t), v√† 'navigate' (ƒë·ªÉ chuy·ªÉn h∆∞·ªõng).
  const handleConfirmCheckout = useCallback((shippingInfo) => {
    // 1. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng bi·ªÉu di·ªÖn ƒë∆°n h√†ng m·ªõi.
    const order = {
      id: Date.now(), // T·∫°o m·ªôt ID duy nh·∫•t cho ƒë∆°n h√†ng b·∫±ng c√°ch s·ª≠ d·ª•ng timestamp hi·ªán t·∫°i (milliseconds t·ª´ Epoch). ƒê√¢y l√† m·ªôt c√°ch ƒë∆°n gi·∫£n cho demo.
      items: cart, // L∆∞u danh s√°ch c√°c s·∫£n ph·∫©m hi·ªán c√≥ trong gi·ªè h√†ng v√†o thu·ªôc t√≠nh 'items' c·ªßa ƒë∆°n h√†ng.
      totalPrice, // L∆∞u t·ªïng gi√° tr·ªã c·ªßa gi·ªè h√†ng v√†o thu·ªôc t√≠nh 'totalPrice'.
      shippingInfo, // L∆∞u th√¥ng tin giao h√†ng nh·∫≠n ƒë∆∞·ª£c t·ª´ modal v√†o thu·ªôc t√≠nh 'shippingInfo'.
      date: new Date().toISOString(), // L∆∞u l·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t h√†ng d∆∞·ªõi d·∫°ng chu·ªói ƒë·ªãnh d·∫°ng ISO 8601.
    };

    // 2. L∆∞u ƒë∆°n h√†ng m·ªõi v√†o localStorage. (ƒê√¢y l√† ph∆∞∆°ng ph√°p demo ƒë∆°n gi·∫£n, kh√¥ng an to√†n v√† kh√¥ng b·ªÅn v·ªØng cho ·ª©ng d·ª•ng th·ª±c t·∫ø).
    // L·∫•y danh s√°ch c√°c ƒë∆°n h√†ng ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥ t·ª´ localStorage. S·ª≠ d·ª•ng key ƒë√£ ƒë·ªãnh nghƒ©a.
    // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu (localStorage.getItem tr·∫£ v·ªÅ null), m·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng [].
    // S·ª≠ d·ª•ng try-catch ƒë·ªÉ x·ª≠ l√Ω l·ªói parse JSON n·∫øu d·ªØ li·ªáu trong localStorage b·ªã h·ªèng.
     let existingOrders = [];
     try {
        existingOrders = JSON.parse(localStorage.getItem(LOCAL_STORAGE_ORDERS_KEY)) || [];
     } catch (error) {
        console.error("L·ªói khi ƒë·ªçc danh s√°ch ƒë∆°n h√†ng t·ª´ localStorage:", error);
        localStorage.removeItem(LOCAL_STORAGE_ORDERS_KEY); // X√≥a d·ªØ li·ªáu l·ªói
        existingOrders = []; // ƒê·∫∑t l·∫°i danh s√°ch ƒë∆°n h√†ng l√† r·ªóng
     }


    // T·∫°o m·ªôt m·∫£ng m·ªõi b·∫±ng c√°ch sao ch√©p c√°c ƒë∆°n h√†ng hi·ªán c√≥ (...existingOrders) v√† th√™m ƒë∆°n h√†ng m·ªõi v√†o cu·ªëi.
    const updatedOrders = [...existingOrders, order];
    // L∆∞u m·∫£ng ƒë∆°n h√†ng ƒë√£ c·∫≠p nh·∫≠t tr·ªü l·∫°i v√†o localStorage (chuy·ªÉn th√†nh chu·ªói JSON tr∆∞·ªõc khi l∆∞u).
    localStorage.setItem(LOCAL_STORAGE_ORDERS_KEY, JSON.stringify(updatedOrders));

    // 3. C·∫≠p nh·∫≠t UI v√† ƒëi·ªÅu h∆∞·ªõng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng.
    alert(MESSAGES.CHECKOUT_SUCCESS); // Hi·ªÉn th·ªã m·ªôt h·ªôp tho·∫°i th√¥ng b√°o th√†nh c√¥ng.
    clearCart(); // G·ªçi h√†m 'clearCart' t·ª´ CartContext ƒë·ªÉ x√≥a to√†n b·ªô s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng sau khi ƒë√£ ƒë·∫∑t.
    setShowModal(false); // ·∫®n Modal thanh to√°n b·∫±ng c√°ch ƒë·∫∑t state 'showModal' v·ªÅ false.
    navigate("/orders"); // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng ƒë·ªÉ h·ªç xem ƒë∆°n h√†ng v·ª´a ƒë·∫∑t.
  }, [cart, totalPrice, clearCart, navigate]); // M·∫£ng dependencies: h√†m ph·ª• thu·ªôc v√†o 'cart' v√† 'totalPrice' (ƒë·ªÉ t·∫°o ƒë∆°n h√†ng), h√†m 'clearCart' (ƒë·ªÉ x√≥a gi·ªè), v√† h√†m 'navigate' (ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng).

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy b·ªè modal thanh to√°n ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ghi nh·ªõ h√†m n√†y. Dependency array r·ªóng v√¨ h√†m ch·ªâ thay ƒë·ªïi state c·ª•c b·ªô 'showModal' d·ª±a tr√™n gi√° tr·ªã c·ªë ƒë·ªãnh.
  const handleCancelCheckout = useCallback(() => {
    setShowModal(false); // ƒê·∫∑t state 'showModal' v·ªÅ false ƒë·ªÉ ·∫©n Modal thanh to√°n.
  }, []); // M·∫£ng dependency r·ªóng []: H√†m kh√¥ng ph·ª• thu·ªôc v√†o b·∫•t k·ª≥ bi·∫øn n√†o t·ª´ scope ngo√†i c·∫ßn theo d√µi.

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X√≥a t·∫•t c·∫£" trong gi·ªè h√†ng ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ghi nh·ªõ h√†m n√†y. H√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi h√†m 'clearCart' t·ª´ Context thay ƒë·ªïi.
  const handleClearCart = useCallback(() => {
    // Hi·ªÉn th·ªã m·ªôt h·ªôp tho·∫°i x√°c nh·∫≠n c·ªßa tr√¨nh duy·ªát tr∆∞·ªõc khi th·ª±c hi·ªán x√≥a to√†n b·ªô gi·ªè h√†ng.
    // window.confirm() tr·∫£ v·ªÅ true n·∫øu ng∆∞·ªùi d√πng nh·∫•n 'OK', false n·∫øu nh·∫•n 'Cancel'.
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?")) {
      return; // N·∫øu ng∆∞·ªùi d√πng ch·ªçn 'Cancel' (k·∫øt qu·∫£ l√† false), d·ª´ng h√†m t·∫°i ƒë√¢y v√† kh√¥ng l√†m g√¨ c·∫£.
    }
    clearCart(); // N·∫øu ng∆∞·ªùi d√πng ch·ªçn 'OK', g·ªçi h√†m 'clearCart' t·ª´ CartContext ƒë·ªÉ x√≥a h·∫øt s·∫£n ph·∫©m trong gi·ªè.
  }, [clearCart]); // M·∫£ng dependency: h√†m ph·ª• thu·ªôc v√†o h√†m 'clearCart' t·ª´ CartContext.

  // --- Render giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i loading ban ƒë·∫ßu ---

  // N·∫øu state 'isLoading' l√† true (ƒëang trong giai ƒëo·∫°n gi·∫£ l·∫≠p t·∫£i trang ban ƒë·∫ßu), hi·ªÉn th·ªã giao di·ªán loading.
  if (isLoading) {
    return (
      <div className="loading-container"> {/* Container bao quanh spinner v√† text loading */}
        <div className="loading-spinner"></div> {/* Bi·ªÉu t∆∞·ª£ng spinner quay */}
        <p className="loading-text">ƒêang t·∫£i...</p> {/* Hi·ªÉn th·ªã th√¥ng b√°o "ƒêang t·∫£i..." */}
      </div>
    );
  }

  // --- Render giao di·ªán ch√≠nh c·ªßa trang Gi·ªè h√†ng khi kh√¥ng c√≤n loading ---
  return (
    <div className="cart-container"> {/* Container ch√≠nh bao b·ªçc to√†n b·ªô n·ªôi dung c·ªßa trang Gi·ªè h√†ng */}
      {/* Ti√™u ƒë·ªÅ trang hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng hi·ªán t·∫°i */}
      <h2>üõç Gi·ªè H√†ng ({totalItems} s·∫£n ph·∫©m)</h2> {/* Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng item trong gi·ªè (totalItems) */}

      {/* --- Hi·ªÉn th·ªã n·ªôi dung d·ª±a tr√™n tr·∫°ng th√°i gi·ªè h√†ng (c√≥ r·ªóng hay kh√¥ng) --- */}
      {cart.length === 0 ? ( // Ki·ªÉm tra n·∫øu m·∫£ng 'cart' r·ªóng (kh√¥ng c√≥ s·∫£n ph·∫©m n√†o)
        <EmptyCart /> // N·∫øu r·ªóng, hi·ªÉn th·ªã component con EmptyCart.
      ) : (
        // N·∫øu gi·ªè h√†ng C√ì s·∫£n ph·∫©m (cart.length > 0)
        <> {/* S·ª≠ d·ª•ng Fragment ƒë·ªÉ nh√≥m nhi·ªÅu ph·∫ßn t·ª≠ (danh s√°ch s·∫£n ph·∫©m, n√∫t x√≥a t·∫•t c·∫£, t√≥m t·∫Øt gi·ªè h√†ng) m√† kh√¥ng th√™m DOM node d∆∞ th·ª´a v√†o c√¢y. */}
          {/* Danh s√°ch (unordered list) hi·ªÉn th·ªã t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng */}
          <ul className="cart-list">
            {cart.map((item) => ( // L·∫∑p (map) qua m·∫£ng 'cart' ƒë·ªÉ t·∫°o m·ªôt component CartItem cho m·ªói s·∫£n ph·∫©m.
              <CartItem
                key={item.id} // Key duy nh·∫•t cho m·ªói item trong danh s√°ch, gi√∫p React nh·∫≠n di·ªán hi·ªáu qu·∫£ khi c√≥ thay ƒë·ªïi. S·ª≠ d·ª•ng ID s·∫£n ph·∫©m l√†m key.
                item={item} // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m hi·ªán t·∫°i ('item') l√†m prop cho CartItem.
                onIncrease={increaseQuantity} // Truy·ªÅn h√†m 'increaseQuantity' (t·ª´ CartContext) l√†m prop 'onIncrease' cho CartItem.
                onDecrease={decreaseQuantity} // Truy·ªÅn h√†m 'decreaseQuantity' (t·ª´ CartContext) l√†m prop 'onDecrease' cho CartItem.
                onRemove={removeFromCart} // Truy·ªÅn h√†m 'removeFromCart' (t·ª´ CartContext) l√†m prop 'onRemove' cho CartItem.
              />
            ))}
          </ul>
          {/* N√∫t x√≥a to√†n b·ªô gi·ªè h√†ng */}
          <button
            className="clear-cart-button" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng n√∫t
            onClick={handleClearCart} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click (ƒë√£ memoize)
            aria-label="X√≥a to√†n b·ªô gi·ªè h√†ng" // Thu·ªôc t√≠nh h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n
          >
            X√≥a t·∫•t c·∫£ {/* N·ªôi dung n√∫t */}
          </button>
          {/* Hi·ªÉn th·ªã component t√≥m t·∫Øt gi·ªè h√†ng (t·ªïng ti·ªÅn v√† n√∫t mua h√†ng) */}
          <CartSummary
            totalPrice={totalPrice} // Truy·ªÅn bi·∫øn 'totalPrice' ƒë√£ t√≠nh to√°n l√†m prop 'totalPrice' cho CartSummary.
            onCheckout={handleCheckout} // Truy·ªÅn h√†m x·ª≠ l√Ω s·ª± ki·ªán click n√∫t "Mua h√†ng" ('handleCheckout', ƒë√£ memoize) l√†m prop 'onCheckout' cho CartSummary.
          />
        </>
      )}

      {/* --- Hi·ªÉn th·ªã Modal thanh to√°n (n·∫øu c·∫ßn) --- */}
      {/* Conditional rendering: N·∫øu state 'showModal' l√† true, render component CheckoutModal. */}
      {showModal && (
        <CheckoutModal
          cart={cart} // Truy·ªÅn d·ªØ li·ªáu gi·ªè h√†ng hi·ªán t·∫°i v√†o modal. C√≥ th·ªÉ modal c·∫ßn hi·ªÉn th·ªã l·∫°i danh s√°ch s·∫£n ph·∫©m.
          totalPrice={totalPrice} // Truy·ªÅn t·ªïng ti·ªÅn v√†o modal.
          onConfirm={handleConfirmCheckout} // Truy·ªÅn h√†m x·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n trong modal (ƒë√£ memoize).
          onCancel={handleCancelCheckout} // Truy·ªÅn h√†m x·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng h·ªßy b·ªè modal (ƒë√£ memoize).
        />
      )}

      {/* --- C√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng kh√°c --- */}
      <div className="cart-links"> {/* Container cho c√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng */}
        {/* Li√™n k·∫øt ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng */}
        <Link to="/orders" className="order-history-link"> {/* 'to="/orders"' l√† route ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng */}
          üìú Xem l·ªãch s·ª≠ ƒë∆°n h√†ng {/* N·ªôi dung li√™n k·∫øt */}
        </Link>
        {/* Li√™n k·∫øt quay l·∫°i trang ch·ªß ho·∫∑c trang danh s√°ch s·∫£n ph·∫©m */}
        <Link to="/home" className="back-button"> {/* 'to="/home"' l√† route ƒë·∫øn trang ch·ªß ho·∫∑c trang danh s√°ch s·∫£n ph·∫©m */}
          ‚¨Ö Quay l·∫°i c·ª≠a h√†ng {/* N·ªôi dung li√™n k·∫øt */}
        </Link>
      </div>
    </div>
  );
};

export default CartPage; // Export component CartPage l√†m default export ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü c√°c file kh√°c (th∆∞·ªùng l√† trong c·∫•u h√¨nh ƒë·ªãnh tuy·∫øn)