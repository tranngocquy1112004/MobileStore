// Import c√°c th∆∞ vi·ªán v√† hook c·∫ßn thi·∫øt t·ª´ React
import React, { useContext, useState } from "react";
// Import c√°c component t·ª´ react-router-dom ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
import { Link, useNavigate } from "react-router-dom";
// Import c√°c context ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu gi·ªè h√†ng v√† x√°c th·ª±c
import { CartContext } from "./CartContext";
import { AuthContext } from "../account/AuthContext";
// Import component modal thanh to√°n
import CheckoutModal from "../components/CheckoutModal";
// Import file CSS cho trang gi·ªè h√†ng
import "./CartPage.css";

// ƒê·ªãnh nghƒ©a c√°c th√¥ng b√°o s·ª≠ d·ª•ng trong ·ª©ng d·ª•ng
const MESSAGES = {
  EMPTY_CART: "Gi·ªè h√†ng tr·ªëng",
  CHECKOUT_SUCCESS: "ƒê·∫∑t h√†ng th√†nh c√¥ng!",
  LOGIN_REQUIRED: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!",
};

// Component CartItem hi·ªÉn th·ªã th√¥ng tin m·ªôt s·∫£n ph·∫©m trong gi·ªè h√†ng
const CartItem = ({ item, onIncrease, onDecrease, onRemove }) => {
  // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng = 1 th√¨ disable n√∫t gi·∫£m s·ªë l∆∞·ª£ng
  const isDecreaseDisabled = item.quantity === 1;

  return (
    <li className="cart-item">
      {/* ·∫¢nh s·∫£n ph·∫©m */}
      <img src={item.image} alt={item.name} className="cart-image" />
      
      {/* Chi ti·∫øt s·∫£n ph·∫©m */}
      <div className="cart-item-details">
        <p className="cart-name">{item.name}</p> {/* T√™n s·∫£n ph·∫©m */}
        {/* Gi√° s·∫£n ph·∫©m ƒë·ªãnh d·∫°ng VNƒê */}
        <p className="cart-price">üí∞ {item.price.toLocaleString("vi-VN")} VNƒê</p>
        
        {/* ƒêi·ªÅu khi·ªÉn s·ªë l∆∞·ª£ng */}
        <div className="quantity-controls">
          <button
            onClick={() => onDecrease(item.id)} // X·ª≠ l√Ω gi·∫£m s·ªë l∆∞·ª£ng
            disabled={isDecreaseDisabled} // Disable n·∫øu s·ªë l∆∞·ª£ng = 1
            className={isDecreaseDisabled ? "disabled" : ""} // Th√™m class disabled n·∫øu b·ªã disable
          >
            -
          </button>
          <span>{item.quantity}</span> {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng hi·ªán t·∫°i */}
          <button onClick={() => onIncrease(item.id)}>+</button> {/* X·ª≠ l√Ω tƒÉng s·ªë l∆∞·ª£ng */}
        </div>
      </div>
      
      {/* N√∫t x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng */}
      <button className="remove-button" onClick={() => onRemove(item.id)}>
        X√≥a
      </button>
    </li>
  );
};

// Component CartSummary hi·ªÉn th·ªã t·ªïng ti·ªÅn v√† n√∫t thanh to√°n
const CartSummary = ({ totalPrice, onCheckout }) => (
  <div className="cart-summary">
    {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn ƒë·ªãnh d·∫°ng VNƒê */}
    <h3 className="total-price">
      T·ªïng ti·ªÅn: {totalPrice.toLocaleString("vi-VN")} VNƒê
    </h3>
    {/* N√∫t thanh to√°n */}
    <button className="checkout-button" onClick={onCheckout}>
      üõç Mua h√†ng
    </button>
  </div>
);

// Component EmptyCart hi·ªÉn th·ªã khi gi·ªè h√†ng tr·ªëng
const EmptyCart = () => (
  <p className="empty-cart-message">{MESSAGES.EMPTY_CART}</p>
);

// Component ch√≠nh CartPage
const CartPage = () => {
  // Hook useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng trang
  const navigate = useNavigate();
  
  // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng v√† c√°c h√†m x·ª≠ l√Ω t·ª´ CartContext
  const { cart, removeFromCart, increaseQuantity, decreaseQuantity, clearCart } = useContext(CartContext);
  
  // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ AuthContext
  const { isLoggedIn } = useContext(AuthContext) || { isLoggedIn: false };
  
  // State qu·∫£n l√Ω hi·ªÉn th·ªã modal thanh to√°n
  const [showModal, setShowModal] = useState(false);

  // T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng
  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  // X·ª≠ l√Ω khi nh·∫•n n√∫t thanh to√°n
  const handleCheckout = () => {
    // Ki·ªÉm tra n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ th√¥ng b√°o v√† chuy·ªÉn h∆∞·ªõng
    if (!isLoggedIn) {
      alert(MESSAGES.LOGIN_REQUIRED);
      navigate("/");
      return;
    }
    // Hi·ªÉn th·ªã modal thanh to√°n n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
    setShowModal(true);
  };

  // X·ª≠ l√Ω khi x√°c nh·∫≠n thanh to√°n
  const handleConfirmCheckout = (shippingInfo) => {
    // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng m·ªõi
    const order = {
      id: Date.now(), // ID ƒë∆°n h√†ng l√† timestamp hi·ªán t·∫°i
      items: cart, // Danh s√°ch s·∫£n ph·∫©m
      totalPrice, // T·ªïng ti·ªÅn
      shippingInfo, // Th√¥ng tin giao h√†ng t·ª´ modal
      date: new Date().toISOString(), // Ng√†y ƒë·∫∑t h√†ng
    };
    
    // L·∫•y danh s√°ch ƒë∆°n h√†ng c≈© t·ª´ localStorage ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
    const existingOrders = JSON.parse(localStorage.getItem("orders")) || [];
    
    // L∆∞u ƒë∆°n h√†ng m·ªõi v√†o localStorage
    localStorage.setItem("orders", JSON.stringify([...existingOrders, order]));
    
    // Th√¥ng b√°o th√†nh c√¥ng
    alert(MESSAGES.CHECKOUT_SUCCESS);
    
    // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
    clearCart();
    
    // ƒê√≥ng modal
    setShowModal(false);
    
    // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
    navigate("/home");
  };

  // X·ª≠ l√Ω khi h·ªßy thanh to√°n
  const handleCancelCheckout = () => setShowModal(false);

  return (
    <div className="cart-container">
      <h2>üõç Gi·ªè H√†ng</h2> {/* Ti√™u ƒë·ªÅ trang */}
      
      {/* Ki·ªÉm tra n·∫øu gi·ªè h√†ng tr·ªëng th√¨ hi·ªÉn th·ªã EmptyCart, ng∆∞·ª£c l·∫°i hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m */}
      {cart.length === 0 ? (
        <EmptyCart />
      ) : (
        <>
          <ul className="cart-list">
            {/* Render t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng */}
            {cart.map((item) => (
              <CartItem
                key={item.id} // Key duy nh·∫•t cho m·ªói s·∫£n ph·∫©m
                item={item} // Th√¥ng tin s·∫£n ph·∫©m
                onIncrease={increaseQuantity} // H√†m tƒÉng s·ªë l∆∞·ª£ng
                onDecrease={decreaseQuantity} // H√†m gi·∫£m s·ªë l∆∞·ª£ng
                onRemove={removeFromCart} // H√†m x√≥a s·∫£n ph·∫©m
              />
            ))}
          </ul>
          {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn v√† n√∫t thanh to√°n */}
          <CartSummary totalPrice={totalPrice} onCheckout={handleCheckout} />
        </>
      )}
      
      {/* Hi·ªÉn th·ªã modal thanh to√°n khi showModal = true */}
      {showModal && (
        <CheckoutModal
          cart={cart} // Truy·ªÅn danh s√°ch s·∫£n ph·∫©m
          totalPrice={totalPrice} // Truy·ªÅn t·ªïng ti·ªÅn
          onConfirm={handleConfirmCheckout} // H√†m x·ª≠ l√Ω khi x√°c nh·∫≠n
          onCancel={handleCancelCheckout} // H√†m x·ª≠ l√Ω khi h·ªßy
        />
      )}
      
      {/* C√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng */}
      <div className="cart-links">
        <Link to="/orders" className="order-history-link">
          üìú Xem l·ªãch s·ª≠ ƒë∆°n h√†ng
        </Link>
        <Link to="/home" className="back-button">
          ‚¨Ö Quay l·∫°i c·ª≠a h√†ng
        </Link>
      </div>
    </div>
  );
};

export default CartPage; // Xu·∫•t component ƒë·ªÉ s·ª≠ d·ª•ng