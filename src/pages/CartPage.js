import React, { useContext, useState, useEffect, useCallback } from "react"; // Import c√°c hook c·∫ßn thi·∫øt t·ª´ React: useContext, useState, useEffect, v√† useCallback ƒë·ªÉ memoize h√†m
import { Link, useNavigate } from "react-router-dom"; // Import Link ƒë·ªÉ t·∫°o li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng v√† useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng b·∫±ng code
import { CartContext } from "./CartContext"; // Import CartContext ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu v√† c√°c h√†m qu·∫£n l√Ω gi·ªè h√†ng
import { AuthContext } from "../account/AuthContext"; // Import AuthContext ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
import CheckoutModal from "../components/CheckoutModal"; // Import component Modal ƒë·ªÉ hi·ªÉn th·ªã form thanh to√°n
import "./CartPage.css"; // Import file CSS t√πy ch·ªânh cho component CartPage

// --- ƒê·ªãnh nghƒ©a h·∫±ng s·ªë ---

// Object ch·ª©a c√°c th√¥ng b√°o s·∫Ω hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
const MESSAGES = {
  EMPTY_CART: "Gi·ªè h√†ng tr·ªëng", // Th√¥ng b√°o khi gi·ªè h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m
  CHECKOUT_SUCCESS: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", // Th√¥ng b√°o khi ƒë·∫∑t h√†ng th√†nh c√¥ng
  LOGIN_REQUIRED: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!", // Th√¥ng b√°o khi c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n
};

// ƒê·ªãnh nghƒ©a key d√πng cho localStorage ƒë·ªÉ l∆∞u tr·ªØ ƒë∆°n h√†ng (n√™n nh·∫•t qu√°n v·ªõi OrderHistory)
const LOCAL_STORAGE_ORDERS_KEY = "orders";

// --- Component con: CartItem (Hi·ªÉn th·ªã th√¥ng tin m·ªôt s·∫£n ph·∫©m trong gi·ªè h√†ng) ---
// S·ª≠ d·ª•ng React.memo ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t
const CartItem = React.memo(({ item, onIncrease, onDecrease, onRemove }) => {
  // X√°c ƒë·ªãnh xem n√∫t gi·∫£m s·ªë l∆∞·ª£ng c√≥ n√™n b·ªã v√¥ hi·ªáu h√≥a hay kh√¥ng (khi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m l√† 1)
  const isDecreaseDisabled = item.quantity === 1;

  return (
    <li className="cart-item"> {/* Container ch√≠nh cho m·ªôt s·∫£n ph·∫©m trong gi·ªè */}
      {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
      <img
        src={item.image}
        alt={item.name} // Alt text cho ·∫£nh
        className="cart-image"
        loading="lazy" // S·ª≠ d·ª•ng lazy loading cho ·∫£nh ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t t·∫£i trang
      />
      {/* Ph·∫ßn chi ti·∫øt th√¥ng tin s·∫£n ph·∫©m (t√™n, gi√°, ƒëi·ªÅu khi·ªÉn s·ªë l∆∞·ª£ng) */}
      <div className="cart-item-details">
        <p className="cart-name">{item.name}</p> {/* T√™n s·∫£n ph·∫©m */}
        <p className="cart-price">
          üí∞ {item.price.toLocaleString("vi-VN")} VNƒê{" "}
          {/* Gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng theo ti·ªÅn t·ªá Vi·ªát Nam */}
        </p>
        {/* ƒêi·ªÅu khi·ªÉn tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m */}
        <div className="quantity-controls">
          {/* N√∫t gi·∫£m s·ªë l∆∞·ª£ng */}
          <button
            onClick={() => onDecrease(item.id)} // G·ªçi h√†m onDecrease (t·ª´ props) v·ªõi ID s·∫£n ph·∫©m
            disabled={isDecreaseDisabled} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu isDecreaseDisabled l√† true
            className={isDecreaseDisabled ? "disabled" : ""} // Th√™m class 'disabled' ƒë·ªÉ styling khi b·ªã v√¥ hi·ªáu h√≥a
            aria-label={`Gi·∫£m s·ªë l∆∞·ª£ng ${item.name}`} // Aria label cho kh·∫£ nƒÉng ti·∫øp c·∫≠n
          >
            -
          </button>
          <span>{item.quantity}</span> {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng hi·ªán t·∫°i */}
          {/* N√∫t tƒÉng s·ªë l∆∞·ª£ng */}
          <button
            onClick={() => onIncrease(item.id)} // G·ªçi h√†m onIncrease (t·ª´ props) v·ªõi ID s·∫£n ph·∫©m
            aria-label={`TƒÉng s·ªë l∆∞·ª£ng ${item.name}`} // Aria label cho kh·∫£ nƒÉng ti·∫øp c·∫≠n
          >
            +
          </button>
        </div>
      </div>
      {/* N√∫t x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng */}
      <button
        className="remove-button"
        onClick={() => onRemove(item.id)} // G·ªçi h√†m onRemove (t·ª´ props) v·ªõi ID s·∫£n ph·∫©m
        aria-label={`X√≥a ${item.name} kh·ªèi gi·ªè h√†ng`} // Aria label cho kh·∫£ nƒÉng ti·∫øp c·∫≠n
      >
        X√≥a
      </button>
    </li>
  );
}); // K·∫øt th√∫c React.memo cho CartItem

// --- Component con: CartSummary (Hi·ªÉn th·ªã t√≥m t·∫Øt gi·ªè h√†ng v√† n√∫t thanh to√°n) ---
// S·ª≠ d·ª•ng React.memo ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t
const CartSummary = React.memo(({ totalPrice, onCheckout }) => (
  <div className="cart-summary"> {/* Container cho ph·∫ßn t√≥m t·∫Øt */}
    <h3 className="total-price">
      T·ªïng ti·ªÅn: {totalPrice.toLocaleString("vi-VN")} VNƒê{" "}
      {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng, ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá */}
    </h3>
    {/* N√∫t "Mua h√†ng" ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh thanh to√°n */}
    <button className="checkout-button" onClick={onCheckout}>
      üõç Mua h√†ng
    </button>
  </div>
)); // K·∫øt th√∫c React.memo cho CartSummary

// --- Component con: EmptyCart (Hi·ªÉn th·ªã th√¥ng b√°o khi gi·ªè h√†ng r·ªóng) ---
// S·ª≠ d·ª•ng React.memo ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t
const EmptyCart = React.memo(() => (
  <div className="empty-cart-message-container"> {/* Container cho th√¥ng b√°o gi·ªè h√†ng tr·ªëng */}
    {/* C√≥ th·ªÉ th√™m icon ho·∫∑c h√¨nh ·∫£nh minh h·ªça gi·ªè h√†ng tr·ªëng */}
    <p className="empty-cart-message">{MESSAGES.EMPTY_CART}</p>{" "}
    {/* Hi·ªÉn th·ªã th√¥ng b√°o "Gi·ªè h√†ng tr·ªëng" */}
    {/* N√∫t ho·∫∑c li√™n k·∫øt m·ªùi ng∆∞·ªùi d√πng quay l·∫°i trang mua s·∫Øm */}
    <Link to="/products" className="shop-now-link">
      üõí Ti·∫øp t·ª•c mua s·∫Øm
    </Link>
  </div>
)); // K·∫øt th√∫c React.memo cho EmptyCart


// --- Component ch√≠nh: CartPage (Trang hi·ªÉn th·ªã gi·ªè h√†ng) ---
const CartPage = () => {
  const navigate = useNavigate(); // S·ª≠ d·ª•ng hook useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng gi·ªØa c√°c route
  // S·ª≠ d·ª•ng useContext ƒë·ªÉ truy c·∫≠p state 'cart' v√† c√°c h√†m qu·∫£n l√Ω gi·ªè h√†ng t·ª´ CartContext
  const { cart, removeFromCart, increaseQuantity, decreaseQuantity, clearCart } =
    useContext(CartContext);
  // S·ª≠ d·ª•ng useContext ƒë·ªÉ truy c·∫≠p tr·∫°ng th√°i ƒëƒÉng nh·∫≠p 'isLoggedIn' t·ª´ AuthContext.
  // Cung c·∫•p gi√° tr·ªã m·∫∑c ƒë·ªãnh { isLoggedIn: false } ƒë·ªÉ tr√°nh l·ªói n·∫øu context ch∆∞a ƒë∆∞·ª£c cung c·∫•p.
  const { isLoggedIn } = useContext(AuthContext) || { isLoggedIn: false };

  // --- State qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa Component CartPage ---
  const [showModal, setShowModal] = useState(false); // State boolean ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã modal thanh to√°n
  // State boolean qu·∫£n l√Ω tr·∫°ng th√°i loading (v√≠ d·ª•: gi·∫£ l·∫≠p th·ªùi gian t·∫£i d·ªØ li·ªáu gi·ªè h√†ng ban ƒë·∫ßu)
  const [isLoading, setIsLoading] = useState(true);

  // --- Effect hook ƒë·ªÉ gi·∫£ l·∫≠p th·ªùi gian t·∫£i d·ªØ li·ªáu khi component mount ---
  // Effect n√†y ch·∫°y m·ªôt l·∫ßn duy nh·∫•t sau l·∫ßn render ƒë·∫ßu ti√™n.
  useEffect(() => {
    // T·∫°o m·ªôt setTimeout ƒë·ªÉ ƒë·∫∑t isLoading v·ªÅ false sau 1000ms (1 gi√¢y), gi·∫£ l·∫≠p th·ªùi gian t·∫£i.
    // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω fetch d·ªØ li·ªáu gi·ªè h√†ng t·ª´ API ·ªü ƒë√¢y v√† set isLoading sau khi fetch xong.
    const timer = setTimeout(() => setIsLoading(false), 1000);
    // Cleanup function: H·ªßy b·ªè timeout n·∫øu component unmount tr∆∞·ªõc khi timeout k·ªãp ch·∫°y.
    return () => clearTimeout(timer);
  }, []); // M·∫£ng dependencies r·ªóng []: effect ch·ªâ ch·∫°y M·ªòT L·∫¶N duy nh·∫•t.

  // --- T√≠nh to√°n c√°c gi√° tr·ªã d·∫´n xu·∫•t t·ª´ state 'cart' ---
  // T√≠nh t·ªïng gi√° tr·ªã c·ªßa t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
  const totalPrice = cart.reduce(
    (sum, item) => sum + item.price * item.quantity, // H√†m callback: c·ªông d·ªìn gi√° * s·ªë l∆∞·ª£ng
    0 // Gi√° tr·ªã kh·ªüi t·∫°o ban ƒë·∫ßu cho 'sum'
  );
  // T√≠nh t·ªïng s·ªë l∆∞·ª£ng c√°c m·∫∑t h√†ng (t·ªïng quantity c·ªßa t·∫•t c·∫£ s·∫£n ph·∫©m) trong gi·ªè h√†ng
  const totalItems = cart.reduce(
    (sum, item) => sum + item.quantity, // H√†m callback: c·ªông d·ªìn s·ªë l∆∞·ª£ng
    0 // Gi√° tr·ªã kh·ªüi t·∫°o ban ƒë·∫ßu cho 'sum'
  );

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Mua h√†ng" ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi.
  const handleCheckout = useCallback(() => {
    // 1. Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
    if (!isLoggedIn) {
      alert(MESSAGES.LOGIN_REQUIRED); // Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p
      navigate("/"); // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p (ho·∫∑c trang ch·ªß t√πy c·∫•u h√¨nh route)
      return; // D·ª´ng h√†m, kh√¥ng th·ª±c hi·ªán ti·∫øp
    }
    // 2. N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã modal thanh to√°n
    setShowModal(true);
  }, [isLoggedIn, navigate]); // Dependency array: h√†m ph·ª• thu·ªôc v√†o isLoggedIn v√† navigate

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n trong modal ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi.
  const handleConfirmCheckout = useCallback((shippingInfo) => {
    // 1. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng m·ªõi
    const order = {
      id: Date.now(), // T·∫°o m·ªôt ID ƒë∆°n h√†ng duy nh·∫•t d·ª±a tr√™n timestamp hi·ªán t·∫°i
      items: cart, // Danh s√°ch c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t
      totalPrice, // T·ªïng gi√° tr·ªã c·ªßa ƒë∆°n h√†ng
      shippingInfo, // Th√¥ng tin giao h√†ng do ng∆∞·ªùi d√πng nh·∫≠p t·ª´ modal
      date: new Date().toISOString(), // L∆∞u l·∫°i th·ªùi gian ƒë·∫∑t h√†ng d∆∞·ªõi d·∫°ng chu·ªói ISO 8601
    };

    // 2. L∆∞u ƒë∆°n h√†ng v√†o localStorage (ƒë√¢y l√† ph∆∞∆°ng ph√°p demo, th·ª±c t·∫ø c·∫ßn l∆∞u v√†o Database ·ªü backend)
    // L·∫•y danh s√°ch c√°c ƒë∆°n h√†ng hi·ªán c√≥ t·ª´ localStorage. N·∫øu ch∆∞a c√≥, m·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng.
    const existingOrders = JSON.parse(localStorage.getItem(LOCAL_STORAGE_ORDERS_KEY)) || [];
    // Th√™m ƒë∆°n h√†ng m·ªõi v√†o danh s√°ch hi·ªán c√≥ v√† l∆∞u l·∫°i v√†o localStorage (chuy·ªÉn th√†nh chu·ªói JSON)
    localStorage.setItem(LOCAL_STORAGE_ORDERS_KEY, JSON.stringify([...existingOrders, order]));

    // 3. Th√¥ng b√°o th√†nh c√¥ng v√† c·∫≠p nh·∫≠t UI
    alert(MESSAGES.CHECKOUT_SUCCESS); // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
    clearCart(); // G·ªçi h√†m clearCart t·ª´ CartContext ƒë·ªÉ x√≥a to√†n b·ªô s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    setShowModal(false); // ·∫®n modal thanh to√°n
    navigate("/orders"); // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng
  }, [cart, totalPrice, clearCart, navigate]); // Dependency array: h√†m ph·ª• thu·ªôc v√†o cart, totalPrice, clearCart, v√† navigate

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy b·ªè modal thanh to√°n ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m n√†y ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi (·ªü ƒë√¢y l√† kh√¥ng c√≥ dependency n√†o)
  const handleCancelCheckout = useCallback(() => {
    setShowModal(false); // ƒê·∫∑t state showModal v·ªÅ false ƒë·ªÉ ·∫©n modal
  }, []); // Dependency array r·ªóng []: h√†m kh√¥ng ph·ª• thu·ªôc v√†o bi·∫øn n√†o t·ª´ scope ngo√†i c·∫ßn theo d√µi.

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X√≥a t·∫•t c·∫£" trong gi·ªè h√†ng ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m ch·ªâ ƒë∆∞·ª£c t·∫°o l·∫°i khi c√°c dependencies thay ƒë·ªïi.
  const handleClearCart = useCallback(() => {
    // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a to√†n b·ªô gi·ªè h√†ng
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?")) {
      return; // N·∫øu ng∆∞·ªùi d√πng ch·ªçn 'Cancel', d·ª´ng h√†m t·∫°i ƒë√¢y.
    }
    clearCart(); // G·ªçi h√†m clearCart t·ª´ CartContext ƒë·ªÉ x√≥a h·∫øt s·∫£n ph·∫©m trong gi·ªè
  }, [clearCart]); // Dependency array: h√†m ph·ª• thu·ªôc v√†o h√†m clearCart t·ª´ Context

  // --- Render giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i loading ---

  // N·∫øu ƒëang trong tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu (isLoading l√† true)
  if (isLoading) {
    return (
      <div className="loading-container"> {/* Container cho loading */}
        <div className="loading-spinner"></div> {/* Bi·ªÉu t∆∞·ª£ng spinner quay */}
        <p className="loading-text">ƒêang t·∫£i...</p> {/* Th√¥ng b√°o "ƒêang t·∫£i..." */}
      </div>
    );
  }

  // --- Render giao di·ªán ch√≠nh c·ªßa trang Gi·ªè h√†ng ---
  return (
    <div className="cart-container"> {/* Container ch√≠nh bao quanh n·ªôi dung trang Gi·ªè h√†ng */}
      {/* Ti√™u ƒë·ªÅ trang hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng */}
      <h2>üõç Gi·ªè H√†ng ({totalItems} s·∫£n ph·∫©m)</h2>

      {/* --- Hi·ªÉn th·ªã n·ªôi dung d·ª±a tr√™n tr·∫°ng th√°i gi·ªè h√†ng (c√≥ r·ªóng hay kh√¥ng) --- */}
      {cart.length === 0 ? ( // N·∫øu gi·ªè h√†ng r·ªóng
        <EmptyCart /> // Hi·ªÉn th·ªã component EmptyCart
      ) : (
        // N·∫øu gi·ªè h√†ng c√≥ s·∫£n ph·∫©m
        <> {/* S·ª≠ d·ª•ng Fragment ƒë·ªÉ nh√≥m nhi·ªÅu ph·∫ßn t·ª≠ m√† kh√¥ng th√™m DOM node d∆∞ th·ª´a */}
          {/* Danh s√°ch c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng */}
          <ul className="cart-list">
            {cart.map((item) => ( // Map qua m·∫£ng 'cart' ƒë·ªÉ render t·ª´ng CartItem
              <CartItem
                key={item.id} // Key duy nh·∫•t cho m·ªói CartItem
                item={item} // Truy·ªÅn d·ªØ li·ªáu s·∫£n ph·∫©m hi·ªán t·∫°i
                onIncrease={increaseQuantity} // Truy·ªÅn h√†m tƒÉng s·ªë l∆∞·ª£ng t·ª´ Context
                onDecrease={decreaseQuantity} // Truy·ªÅn h√†m gi·∫£m s·ªë l∆∞·ª£ng t·ª´ Context
                onRemove={removeFromCart} // Truy·ªÅn h√†m x√≥a s·∫£n ph·∫©m t·ª´ Context
              />
            ))}
          </ul>
          {/* N√∫t x√≥a to√†n b·ªô gi·ªè h√†ng */}
          <button
            className="clear-cart-button"
            onClick={handleClearCart} // G·∫Øn h√†m x·ª≠ l√Ω x√≥a to√†n b·ªô gi·ªè h√†ng (ƒë√£ memoize)
            aria-label="X√≥a to√†n b·ªô gi·ªè h√†ng" // Aria label cho kh·∫£ nƒÉng ti·∫øp c·∫≠n
          >
            X√≥a t·∫•t c·∫£
          </button>
          {/* Hi·ªÉn th·ªã component t√≥m t·∫Øt gi·ªè h√†ng (t·ªïng ti·ªÅn v√† n√∫t mua h√†ng) */}
          <CartSummary
            totalPrice={totalPrice} // Truy·ªÅn t·ªïng ti·ªÅn ƒë√£ t√≠nh
            onCheckout={handleCheckout} // Truy·ªÅn h√†m x·ª≠ l√Ω khi nh·∫•n n√∫t mua h√†ng (ƒë√£ memoize)
          />
        </>
      )}

      {/* --- Hi·ªÉn th·ªã Modal thanh to√°n --- */}
      {/* N·∫øu state showModal l√† true, render component CheckoutModal */}
      {showModal && (
        <CheckoutModal
          cart={cart} // Truy·ªÅn d·ªØ li·ªáu gi·ªè h√†ng v√†o modal (c√≥ th·ªÉ c·∫ßn hi·ªÉn th·ªã l·∫°i trong modal)
          totalPrice={totalPrice} // Truy·ªÅn t·ªïng ti·ªÅn v√†o modal
          onConfirm={handleConfirmCheckout} // Truy·ªÅn h√†m x·ª≠ l√Ω x√°c nh·∫≠n thanh to√°n (ƒë√£ memoize)
          onCancel={handleCancelCheckout} // Truy·ªÅn h√†m x·ª≠ l√Ω h·ªßy b·ªè (ƒë√£ memoize)
        />
      )}

      {/* --- C√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng kh√°c --- */}
      <div className="cart-links">
        {/* Li√™n k·∫øt ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng */}
        <Link to="/orders" className="order-history-link">
          üìú Xem l·ªãch s·ª≠ ƒë∆°n h√†ng
        </Link>
        {/* Li√™n k·∫øt quay l·∫°i trang ch·ªß ho·∫∑c trang danh s√°ch s·∫£n ph·∫©m */}
        <Link to="/home" className="back-button">
          ‚¨Ö Quay l·∫°i c·ª≠a h√†ng
        </Link>
      </div>
    </div>
  );
};

export default CartPage; // Export component CartPage ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c (trong ph·∫ßn routing)