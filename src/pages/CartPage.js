import React, { useContext, useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { CartContext } from "./CartContext"; // Context ƒë·ªÉ qu·∫£n l√Ω gi·ªè h√†ng
import { AuthContext } from "../account/AuthContext"; // Context ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
import CheckoutModal from "../components/CheckoutModal"; // Component modal thanh to√°n
import "./CartPage.css";

// C√°c th√¥ng b√°o c·ªë ƒë·ªãnh
const MESSAGES = {
  EMPTY_CART: "Gi·ªè h√†ng tr·ªëng", // Th√¥ng b√°o khi kh√¥ng c√≥ s·∫£n ph·∫©m trong gi·ªè
  CHECKOUT_SUCCESS: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", // Th√¥ng b√°o khi thanh to√°n th√†nh c√¥ng
  LOGIN_REQUIRED: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!", // Th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p
};

// Component hi·ªÉn th·ªã t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng
const CartItem = ({ item, onIncrease, onDecrease, onRemove }) => {
  const isDecreaseDisabled = item.quantity === 1; // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng l√† 1 th√¨ v√¥ hi·ªáu h√≥a n√∫t gi·∫£m

  return (
    <li className="cart-item">
      <img
        src={item.image} // ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh s·∫£n ph·∫©m
        alt={item.name} // VƒÉn b·∫£n thay th·∫ø cho h√¨nh ·∫£nh
        className="cart-image" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng ·∫£nh
      />
      <div className="cart-item-details">
        <p className="cart-name">{item.name}</p> {/* Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m */}
        <p className="cart-price">
          üí∞ {item.price.toLocaleString("vi-VN")} VNƒê
        </p> {/* Hi·ªÉn th·ªã gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng ti·ªÅn Vi·ªát Nam */}
        <div className="quantity-controls">
          <button
            onClick={() => onDecrease(item.id)} // Gi·∫£m s·ªë l∆∞·ª£ng khi nh·∫•p
            disabled={isDecreaseDisabled} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu s·ªë l∆∞·ª£ng l√† 1
            className={isDecreaseDisabled ? "disabled" : ""} // Th√™m class disabled n·∫øu n√∫t b·ªã v√¥ hi·ªáu h√≥a
          >
            -
          </button>
          <span>{item.quantity}</span> {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng hi·ªán t·∫°i */}
          <button onClick={() => onIncrease(item.id)}>+</button> {/* TƒÉng s·ªë l∆∞·ª£ng khi nh·∫•p */}
        </div>
      </div>
      <button
        className="remove-button" // Class CSS cho n√∫t x√≥a
        onClick={() => onRemove(item.id)} // X√≥a s·∫£n ph·∫©m khi nh·∫•p
      >
        X√≥a {/* N√∫t x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng */}
      </button>
    </li>
  );
};

// Component hi·ªÉn th·ªã t·ªïng ti·ªÅn v√† n√∫t mua h√†ng
const CartSummary = ({ totalPrice, onCheckout }) => (
  <div className="cart-summary">
    <h3 className="total-price">
      T·ªïng ti·ªÅn: {totalPrice.toLocaleString("vi-VN")} VNƒê
    </h3> {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng, ƒë·ªãnh d·∫°ng ti·ªÅn Vi·ªát Nam */}
    <button
      className="checkout-button" // Class CSS cho n√∫t thanh to√°n
      onClick={onCheckout} // G·ªçi h√†m thanh to√°n khi nh·∫•p
    >
      üõç Mua h√†ng {/* N√∫t ti·∫øn h√†nh thanh to√°n */}
    </button>
  </div>
);

// Component hi·ªÉn th·ªã th√¥ng b√°o khi gi·ªè h√†ng tr·ªëng
const EmptyCart = () => (
  <p className="empty-cart-message">{MESSAGES.EMPTY_CART}</p> // Th√¥ng b√°o khi gi·ªè h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m
);

// Component ch√≠nh: Trang gi·ªè h√†ng
const CartPage = () => {
  const navigate = useNavigate(); // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn c√°c trang kh√°c
  const { cart, removeFromCart, increaseQuantity, decreaseQuantity, clearCart } =
    useContext(CartContext); // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng v√† c√°c h√†m x·ª≠ l√Ω t·ª´ CartContext
  const { isLoggedIn } = useContext(AuthContext) || { isLoggedIn: false }; // L·∫•y tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ AuthContext, m·∫∑c ƒë·ªãnh l√† false n·∫øu kh√¥ng c√≥
  const [showModal, setShowModal] = useState(false); // State ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã modal thanh to√°n
  const [isLoading, setIsLoading] = useState(true); // State ki·ªÉm so√°t tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu

  // Gi·∫£ l·∫≠p th·ªùi gian t·∫£i d·ªØ li·ªáu khi component mount
  useEffect(() => {
    const simulateLoading = async () => {
      await new Promise((resolve) => setTimeout(resolve, 1000)); // Delay 1 gi√¢y ƒë·ªÉ gi·∫£ l·∫≠p t·∫£i d·ªØ li·ªáu
      setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
    };
    simulateLoading(); // G·ªçi h√†m gi·∫£ l·∫≠p t·∫£i
  }, []); // Dependency r·ªóng: ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount

  // Hi·ªÉn th·ªã giao di·ªán khi ƒëang t·∫£i
  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div> {/* Hi·ªáu ·ª©ng spinner khi t·∫£i */}
        <p className="loading-text">ƒêang t·∫£i...</p> {/* Th√¥ng b√°o ƒëang t·∫£i */}
      </div>
    );
  }

  // T√≠nh t·ªïng ti·ªÅn v√† t·ªïng s·ªë s·∫£n ph·∫©m trong gi·ªè h√†ng
  const totalPrice = cart.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  ); // T·ªïng ti·ªÅn = gi√° t·ª´ng s·∫£n ph·∫©m * s·ªë l∆∞·ª£ng, c·ªông d·ªìn
  const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); // T·ªïng s·ªë s·∫£n ph·∫©m trong gi·ªè

  // X·ª≠ l√Ω khi nh·∫•n n√∫t "Mua h√†ng"
  const handleCheckout = () => {
    if (!isLoggedIn) {
      alert(MESSAGES.LOGIN_REQUIRED); // Th√¥ng b√°o n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
      navigate("/"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
      return;
    }
    setShowModal(true); // Hi·ªÉn th·ªã modal thanh to√°n n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
  };

  // X·ª≠ l√Ω x√°c nh·∫≠n thanh to√°n t·ª´ modal
  const handleConfirmCheckout = (shippingInfo) => {
    const order = {
      id: Date.now(), // T·∫°o ID ƒë∆°n h√†ng d·ª±a tr√™n timestamp hi·ªán t·∫°i
      items: cart, // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
      totalPrice, // T·ªïng ti·ªÅn c·ªßa ƒë∆°n h√†ng
      shippingInfo, // Th√¥ng tin giao h√†ng t·ª´ modal
      date: new Date().toISOString(), // Th·ªùi gian ƒë·∫∑t h√†ng (ƒë·ªãnh d·∫°ng ISO)
    };

    // L∆∞u ƒë∆°n h√†ng v√†o localStorage
    const existingOrders = JSON.parse(localStorage.getItem("orders")) || []; // L·∫•y danh s√°ch ƒë∆°n h√†ng c≈©, n·∫øu kh√¥ng c√≥ th√¨ m·∫£ng r·ªóng
    localStorage.setItem(
      "orders",
      JSON.stringify([...existingOrders, order])
    ); // Th√™m ƒë∆°n h√†ng m·ªõi v√†o danh s√°ch v√† l∆∞u l·∫°i

    // Th√¥ng b√°o th√†nh c√¥ng v√† l√†m s·∫°ch gi·ªè h√†ng
    alert(MESSAGES.CHECKOUT_SUCCESS); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    clearCart(); // X√≥a to√†n b·ªô s·∫£n ph·∫©m trong gi·ªè h√†ng
    setShowModal(false); // ƒê√≥ng modal thanh to√°n
    navigate("/home"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
  };

  // X·ª≠ l√Ω h·ªßy thanh to√°n
  const handleCancelCheckout = () => {
    setShowModal(false); // ƒê√≥ng modal thanh to√°n
  };

  // X·ª≠ l√Ω x√≥a to√†n b·ªô gi·ªè h√†ng
  const handleClearCart = () => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?")) { // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
      clearCart(); // X√≥a to√†n b·ªô gi·ªè h√†ng
    }
  };

  // Giao di·ªán ch√≠nh c·ªßa trang gi·ªè h√†ng
  return (
    <div className="cart-container">
      <h2>üõç Gi·ªè H√†ng ({totalItems} s·∫£n ph·∫©m)</h2> {/* Ti√™u ƒë·ªÅ hi·ªÉn th·ªã t·ªïng s·ªë s·∫£n ph·∫©m */}
      {cart.length === 0 ? (
        <EmptyCart /> // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu gi·ªè h√†ng tr·ªëng
      ) : (
        <>
          <ul className="cart-list">
            {cart.map((item) => (
              <CartItem
                key={item.id} // Key duy nh·∫•t cho m·ªói s·∫£n ph·∫©m
                item={item} // D·ªØ li·ªáu s·∫£n ph·∫©m
                onIncrease={increaseQuantity} // H√†m tƒÉng s·ªë l∆∞·ª£ng
                onDecrease={decreaseQuantity} // H√†m gi·∫£m s·ªë l∆∞·ª£ng
                onRemove={removeFromCart} // H√†m x√≥a s·∫£n ph·∫©m
              />
            ))}
          </ul>
          <button
            className="clear-cart-button" // Class CSS cho n√∫t x√≥a t·∫•t c·∫£
            onClick={handleClearCart} // G·ªçi h√†m x√≥a to√†n b·ªô gi·ªè h√†ng
          >
            X√≥a t·∫•t c·∫£ {/* N√∫t x√≥a to√†n b·ªô gi·ªè h√†ng */}
          </button>
          <CartSummary
            totalPrice={totalPrice} // T·ªïng ti·ªÅn truy·ªÅn v√†o
            onCheckout={handleCheckout} // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t mua h√†ng
          />
        </>
      )}
      {showModal && (
        <CheckoutModal
          cart={cart} // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
          totalPrice={totalPrice} // T·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng
          onConfirm={handleConfirmCheckout} // H√†m x√°c nh·∫≠n thanh to√°n
          onCancel={handleCancelCheckout} // H√†m h·ªßy thanh to√°n
        />
      )}
      <div className="cart-links">
        <Link to="/orders" className="order-history-link">
          üìú Xem l·ªãch s·ª≠ ƒë∆°n h√†ng {/* Li√™n k·∫øt ƒë·∫øn trang l·ªãch s·ª≠ ƒë∆°n h√†ng */}
        </Link>
        <Link to="/home" className="back-button">
          ‚¨Ö Quay l·∫°i c·ª≠a h√†ng {/* Li√™n k·∫øt quay l·∫°i trang ch·ªß */}
        </Link>
      </div>
    </div>
  );
};

export default CartPage; // Xu·∫•t component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c