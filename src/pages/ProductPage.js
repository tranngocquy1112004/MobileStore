import React, { useEffect, useState, useCallback } from "react"; // Import c√°c hook c·∫ßn thi·∫øt t·ª´ React
import { Link } from "react-router-dom"; // Import Link ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
import "./ProductPage.css"; // Import file CSS cho styling

// Constants - ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë
const API_URL = `${process.env.PUBLIC_URL}/db.json`; // URL API l·∫•y d·ªØ li·ªáu t·ª´ file JSON
const PRODUCTS_PER_PAGE = 8; // S·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã tr√™n m·ªói trang
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"]; // Danh s√°ch th∆∞∆°ng hi·ªáu ƒë·ªÉ l·ªçc

// H√†m fetch d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
const fetchProducts = async (signal) => { // Nh·∫≠n signal ƒë·ªÉ h·ªßy request n·∫øu c·∫ßn
  const response = await fetch(API_URL, { signal }); // G·ª≠i request t·ªõi API
  if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!"); // Ki·ªÉm tra l·ªói response
  const data = await response.json(); // Chuy·ªÉn response th√†nh JSON
  return Array.isArray(data) ? data : data.products || []; // Tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m ho·∫∑c r·ªóng n·∫øu kh√¥ng h·ª£p l·ªá
};

// Component ProductCard - Hi·ªÉn th·ªã th√¥ng tin m·ªôt s·∫£n ph·∫©m
const ProductCard = ({ product }) => { // Nh·∫≠n prop product
  // Ki·ªÉm tra d·ªØ li·ªáu s·∫£n ph·∫©m c√≥ h·ª£p l·ªá kh√¥ng
  if (!product?.id || !product.name || !product.image || typeof product.price !== "number") {
    console.error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", product); // Log l·ªói n·∫øu d·ªØ li·ªáu kh√¥ng ƒë√∫ng
    return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng h·ª£p l·ªá
  }

  return (
    <Link to={`/products/${product.id}`} className="product-card-link" aria-label={`Xem chi ti·∫øt ${product.name}`}>
      {/* Link ƒëi·ªÅu h∆∞·ªõng t·ªõi trang chi ti·∫øt s·∫£n ph·∫©m */}
      <div className="product-card"> {/* Container cho card s·∫£n ph·∫©m */}
        <img src={product.image} alt={product.name} className="product-image" loading="lazy" /> {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
        <h3>{product.name}</h3> {/* T√™n s·∫£n ph·∫©m */}
        <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p> {/* Gi√° s·∫£n ph·∫©m ƒë·ªãnh d·∫°ng VN */}
      </div>
    </Link>
  );
};

// Component Pagination - ƒêi·ªÅu khi·ªÉn ph√¢n trang
const Pagination = ({ currentPage, totalPages, onPageChange }) => { // Nh·∫≠n c√°c prop c·∫ßn thi·∫øt
  // Ki·ªÉm tra prop h·ª£p l·ªá
  if (typeof currentPage !== "number" || typeof totalPages !== "number" || typeof onPageChange !== "function") {
    console.error("Props ph√¢n trang kh√¥ng h·ª£p l·ªá"); // Log l·ªói n·∫øu prop kh√¥ng ƒë√∫ng
    return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng h·ª£p l·ªá
  }

  return (
    <div className="pagination"> {/* Container cho ph√¢n trang */}
      <button
        className="pagination-button" // N√∫t "Trang tr∆∞·ªõc"
        onClick={() => onPageChange(currentPage - 1)} // Gi·∫£m trang hi·ªán t·∫°i
        disabled={currentPage === 1} // V√¥ hi·ªáu h√≥a n·∫øu ƒëang ·ªü trang 1
      >
        Trang tr∆∞·ªõc
      </button>
      <span className="pagination-current">Trang {currentPage}</span> {/* Hi·ªÉn th·ªã trang hi·ªán t·∫°i */}
      <button
        className="pagination-button" // N√∫t "Trang sau"
        onClick={() => onPageChange(currentPage + 1)} // TƒÉng trang hi·ªán t·∫°i
        disabled={currentPage === totalPages} // V√¥ hi·ªáu h√≥a n·∫øu ƒëang ·ªü trang cu·ªëi
      >
        Trang sau
      </button>
    </div>
  );
};

// Component BrandFilter - L·ªçc theo th∆∞∆°ng hi·ªáu
const BrandFilter = ({ brands, selectedBrand, onBrandSelect }) => { // Nh·∫≠n c√°c prop c·∫ßn thi·∫øt
  if (!Array.isArray(brands)) { // Ki·ªÉm tra brands c√≥ ph·∫£i m·∫£ng kh√¥ng
    console.error("Danh s√°ch th∆∞∆°ng hi·ªáu ph·∫£i l√† m·∫£ng"); // Log l·ªói n·∫øu kh√¥ng h·ª£p l·ªá
    return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng h·ª£p l·ªá
  }

  return (
    <div className="brand-buttons"> {/* Container cho c√°c n√∫t th∆∞∆°ng hi·ªáu */}
      {brands.map((brand) => ( // Duy·ªát qua danh s√°ch th∆∞∆°ng hi·ªáu
        <button
          key={brand} // Key duy nh·∫•t cho m·ªói n√∫t
          className={`brand-button ${selectedBrand === brand ? "active" : ""}`} // Class ƒë·ªông d·ª±a tr√™n l·ª±a ch·ªçn
          onClick={() => onBrandSelect(brand)} // G·ªçi h√†m ch·ªçn th∆∞∆°ng hi·ªáu
        >
          {brand} {/* T√™n th∆∞∆°ng hi·ªáu */}
        </button>
      ))}
    </div>
  );
};

// Component ch√≠nh ProductPage - Trang danh s√°ch s·∫£n ph·∫©m
const ProductPage = () => {
  // State qu·∫£n l√Ω d·ªØ li·ªáu v√† tr·∫°ng th√°i
  const [products, setProducts] = useState([]); // Danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
  const [filteredProducts, setFilteredProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
  const [isLoading, setIsLoading] = useState(true); // Tr·∫°ng th√°i ƒëang t·∫£i
  const [error, setError] = useState(null); // L∆∞u l·ªói n·∫øu c√≥
  const [currentPage, setCurrentPage] = useState(1); // Trang hi·ªán t·∫°i
  const [filters, setFilters] = useState({ brand: "T·∫•t c·∫£", search: "" }); // B·ªô l·ªçc (th∆∞∆°ng hi·ªáu v√† t√¨m ki·∫øm)

  // useEffect ƒë·ªÉ fetch d·ªØ li·ªáu khi component mount
  useEffect(() => {
    const controller = new AbortController(); // T·∫°o controller ƒë·ªÉ h·ªßy request
    const loadProducts = async () => { // H√†m t·∫£i s·∫£n ph·∫©m
      try {
        const productList = await fetchProducts(controller.signal); // G·ªçi h√†m fetch v·ªõi signal
        setProducts(productList); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
        setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
      } catch (err) {
        if (err.name !== "AbortError") { // Ki·ªÉm tra l·ªói kh√¥ng ph·∫£i do h·ªßy request
          setError(err.message); // C·∫≠p nh·∫≠t l·ªói
          setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
        }
      }
    };

    loadProducts(); // G·ªçi h√†m t·∫£i s·∫£n ph·∫©m
    return () => controller.abort(); // Cleanup: h·ªßy request khi unmount
  }, []); // Dependency r·ªóng: ch·ªâ ch·∫°y khi mount

  // useEffect ƒë·ªÉ l·ªçc s·∫£n ph·∫©m khi filters ho·∫∑c products thay ƒë·ªïi
  useEffect(() => {
    const filtered = products
      .filter((product) => filters.brand === "T·∫•t c·∫£" || product.brand === filters.brand) // L·ªçc theo th∆∞∆°ng hi·ªáu
      .filter((product) =>
        filters.search.trim() // L·ªçc theo t√¨m ki·∫øm (n·∫øu c√≥)
          ? product.name.toLowerCase().includes(filters.search.toLowerCase())
          : true
      );
    setFilteredProducts(filtered); // C·∫≠p nh·∫≠t danh s√°ch ƒë√£ l·ªçc
    setCurrentPage(1); // Reset v·ªÅ trang 1 khi l·ªçc thay ƒë·ªïi
  }, [filters, products]); // Dependency: filters v√† products

  // T√≠nh to√°n ph√¢n trang
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE); // T·ªïng s·ªë trang
  const currentProducts = filteredProducts.slice( // L·∫•y s·∫£n ph·∫©m cho trang hi·ªán t·∫°i
    (currentPage - 1) * PRODUCTS_PER_PAGE,
    currentPage * PRODUCTS_PER_PAGE
  );

  // Handlers - C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán
  const handlePageChange = useCallback(
    (page) => setCurrentPage(Math.max(1, Math.min(page, totalPages))), // ƒê·∫£m b·∫£o trang trong kho·∫£ng h·ª£p l·ªá
    [totalPages] // Dependency: totalPages
  );

  const handleBrandSelect = useCallback(
    (brand) => setFilters((prev) => ({ ...prev, brand })), // C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu trong filters
    [] // Kh√¥ng c√≥ dependency
  );

  const handleSearchChange = useCallback(
    (e) => setFilters((prev) => ({ ...prev, search: e.target.value })), // C·∫≠p nh·∫≠t t√¨m ki·∫øm trong filters
    [] // Kh√¥ng c√≥ dependency
  );

  const resetFilters = () => setFilters({ brand: "T·∫•t c·∫£", search: "" }); // Reset b·ªô l·ªçc v·ªÅ m·∫∑c ƒë·ªãnh

  // Render giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i
  if (isLoading) { // Tr·∫°ng th√°i ƒëang t·∫£i
    return (
      <div className="status loading"> {/* Container cho tr·∫°ng th√°i t·∫£i */}
        <p>‚è≥ ƒêang t·∫£i s·∫£n ph·∫©m...</p> {/* Th√¥ng b√°o ƒëang t·∫£i */}
      </div>
    );
  }

  if (error) { // Tr·∫°ng th√°i l·ªói
    return (
      <div className="status error"> {/* Container cho tr·∫°ng th√°i l·ªói */}
        <p>‚ùå {error}</p> {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói */}
        <button onClick={() => window.location.reload()} className="retry-button"> {/* N√∫t th·ª≠ l·∫°i */}
          Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  return (
    <main className="product-page"> {/* Container ch√≠nh c·ªßa trang */}
      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1> {/* Ti√™u ƒë·ªÅ trang */}

      <div className="filter-section"> {/* Ph·∫ßn b·ªô l·ªçc */}
        <input
          type="text" // √î t√¨m ki·∫øm
          className="search-input"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          value={filters.search} // Gi√° tr·ªã t√¨m ki·∫øm t·ª´ state
          onChange={handleSearchChange} // X·ª≠ l√Ω thay ƒë·ªïi t√¨m ki·∫øm
          aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m" // Accessibility
        />
        <BrandFilter
          brands={BRANDS} // Truy·ªÅn danh s√°ch th∆∞∆°ng hi·ªáu
          selectedBrand={filters.brand} // Th∆∞∆°ng hi·ªáu ƒëang ch·ªçn
          onBrandSelect={handleBrandSelect} // H√†m ch·ªçn th∆∞∆°ng hi·ªáu
        />
      </div>

      <div className="product-list"> {/* Danh s√°ch s·∫£n ph·∫©m */}
        {currentProducts.length > 0 ? ( // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m n√†o kh√¥ng
          currentProducts.map((product) => ( // Duy·ªát qua s·∫£n ph·∫©m hi·ªán t·∫°i
            <ProductCard key={product.id} product={product} /> // Render t·ª´ng s·∫£n ph·∫©m
          ))
        ) : (
          <div className="no-products-container"> {/* Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ s·∫£n ph·∫©m */}
            <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm</p>
            <button onClick={resetFilters} className="reset-filters-button"> {/* N√∫t reset b·ªô l·ªçc */}
              <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc
            </button>
          </div>
        )}
      </div>

      {totalPages > 1 && ( // Hi·ªÉn th·ªã ph√¢n trang n·∫øu c√≥ h∆°n 1 trang
        <Pagination
          currentPage={currentPage} // Trang hi·ªán t·∫°i
          totalPages={totalPages} // T·ªïng s·ªë trang
          onPageChange={handlePageChange} // H√†m thay ƒë·ªïi trang
        />
      )}
    </main>
  );
};

export default ProductPage; // Xu·∫•t component ƒë·ªÉ s·ª≠ d·ª•ng