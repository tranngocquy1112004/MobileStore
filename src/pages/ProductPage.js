import React, { useEffect, useState, useCallback } from "react";
import { Link } from "react-router-dom";
import "./ProductPage.css";

// C√°c h·∫±ng s·ªë c·ªë ƒë·ªãnh
const API_URL = `${process.env.PUBLIC_URL}/db.json`; // ƒê∆∞·ªùng d·∫´n t·ªõi file JSON ch·ª©a d·ªØ li·ªáu s·∫£n ph·∫©m
const PRODUCTS_PER_PAGE = 8; // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã tr√™n m·ªói trang
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"]; // Danh s√°ch c√°c th∆∞∆°ng hi·ªáu ƒë·ªÉ l·ªçc s·∫£n ph·∫©m

// H√†m l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
const fetchProducts = async (signal) => {
  const response = await fetch(API_URL, { signal }); // G·ª≠i y√™u c·∫ßu l·∫•y d·ªØ li·ªáu v·ªõi kh·∫£ nƒÉng h·ªßy (AbortController)
  if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!"); // N√©m l·ªói n·∫øu y√™u c·∫ßu th·∫•t b·∫°i
  const data = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu t·ª´ JSON sang object JavaScript
  return Array.isArray(data) ? data : data.products || []; // Tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m, n·∫øu kh√¥ng h·ª£p l·ªá th√¨ tr·∫£ m·∫£ng r·ªóng
};

// Component hi·ªÉn th·ªã th√¥ng tin c·ªßa t·ª´ng s·∫£n ph·∫©m
const ProductCard = ({ product }) => {
  if (!product?.id || !product.name || !product.image || typeof product.price !== "number") {
    console.error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", product); // Ghi log l·ªói n·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m thi·∫øu ho·∫∑c sai
    return null; // Kh√¥ng render n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
  }

  return (
    <div className="product-card">
      <Link to={`/products/${product.id}`} aria-label={`Xem chi ti·∫øt ${product.name}`}>
        {/* Li√™n k·∫øt ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m khi nh·∫•p v√†o ·∫£nh */}
        <img
          src={product.image} // ƒê∆∞·ªùng d·∫´n ·∫£nh s·∫£n ph·∫©m
          alt={product.name} // T√™n s·∫£n ph·∫©m l√†m vƒÉn b·∫£n thay th·∫ø (alt text)
          className="product-image" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng ·∫£nh
          loading="lazy" // T·∫£i ·∫£nh theo ki·ªÉu lazy ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô
        />
      </Link>
      <h3>{product.name}</h3> {/* Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m */}
      <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p>
      {/* Hi·ªÉn th·ªã gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng theo ki·ªÉu ti·ªÅn t·ªá Vi·ªát Nam */}
      <Link
        to={`/products/${product.id}`} // Li√™n k·∫øt ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
        className="view-details-button" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng n√∫t
        aria-label={`Xem chi ti·∫øt ${product.name}`} // VƒÉn b·∫£n m√¥ t·∫£ cho accessibility
      >
        Xem chi ti·∫øt {/* N√∫t ƒë·ªÉ xem chi ti·∫øt s·∫£n ph·∫©m */}
      </Link>
    </div>
  );
};

// Component ph√¢n trang
const Pagination = ({ currentPage, totalPages, onPageChange }) => (
  <div className="pagination">
    <button
      className="pagination-button" // Class CSS cho n√∫t "Trang tr∆∞·ªõc"
      onClick={() => onPageChange(currentPage - 1)} // Chuy·ªÉn sang trang tr∆∞·ªõc khi nh·∫•p
      disabled={currentPage === 1} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu ƒëang ·ªü trang ƒë·∫ßu ti√™n
    >
      Trang tr∆∞·ªõc
    </button>
    <span className="pagination-current">Trang {currentPage}</span>
    {/* Hi·ªÉn th·ªã s·ªë trang hi·ªán t·∫°i */}
    <button
      className="pagination-button" // Class CSS cho n√∫t "Trang sau"
      onClick={() => onPageChange(currentPage + 1)} // Chuy·ªÉn sang trang sau khi nh·∫•p
      disabled={currentPage === totalPages} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu ƒëang ·ªü trang cu·ªëi
    >
      Trang sau
    </button>
  </div>
);

// Component l·ªçc theo th∆∞∆°ng hi·ªáu
const BrandFilter = ({ brands, selectedBrand, onBrandSelect }) => (
  <div className="brand-buttons">
    {brands.map((brand) => (
      <button
        key={brand} // Key duy nh·∫•t cho m·ªói n√∫t th∆∞∆°ng hi·ªáu
        className={`brand-button ${selectedBrand === brand ? "active" : ""}`}
        // Th√™m class "active" n·∫øu th∆∞∆°ng hi·ªáu ƒëang ƒë∆∞·ª£c ch·ªçn
        onClick={() => onBrandSelect(brand)} // G·ªçi h√†m ch·ªçn th∆∞∆°ng hi·ªáu khi nh·∫•p
      >
        {brand} {/* Hi·ªÉn th·ªã t√™n th∆∞∆°ng hi·ªáu */}
      </button>
    ))}
  </div>
);

// Component ch√≠nh: Trang danh s√°ch s·∫£n ph·∫©m
const ProductPage = () => {
  const [products, setProducts] = useState([]); // State l∆∞u danh s√°ch s·∫£n ph·∫©m g·ªëc
  const [filteredProducts, setFilteredProducts] = useState([]); // State l∆∞u danh s√°ch s·∫£n ph·∫©m sau khi l·ªçc
  const [isLoading, setIsLoading] = useState(true); // State ki·ªÉm so√°t tr·∫°ng th√°i ƒëang t·∫£i
  const [error, setError] = useState(null); // State l∆∞u th√¥ng b√°o l·ªói n·∫øu c√≥
  const [currentPage, setCurrentPage] = useState(1); // State l∆∞u s·ªë trang hi·ªán t·∫°i
  const [filters, setFilters] = useState({ brand: "T·∫•t c·∫£", search: "" });
  // State l∆∞u c√°c b·ªô l·ªçc (th∆∞∆°ng hi·ªáu v√† t·ª´ kh√≥a t√¨m ki·∫øm)

  // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const controller = new AbortController(); // T·∫°o AbortController ƒë·ªÉ h·ªßy y√™u c·∫ßu fetch n·∫øu c·∫ßn
    const loadProducts = async () => {
      try {
        const productList = await fetchProducts(controller.signal); // G·ªçi h√†m l·∫•y d·ªØ li·ªáu
        setProducts(productList); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m g·ªëc
        setFilteredProducts(productList); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
        setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
      } catch (err) {
        if (err.name !== "AbortError") {
          setError(err.message); // L∆∞u th√¥ng b√°o l·ªói n·∫øu kh√¥ng ph·∫£i l·ªói h·ªßy
          setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
        }
      }
    };
    loadProducts(); // G·ªçi h√†m t·∫£i d·ªØ li·ªáu
    return () => controller.abort(); // Cleanup: H·ªßy fetch khi component unmount
  }, []); // Dependency r·ªóng: ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount

  // L·ªçc s·∫£n ph·∫©m khi filters thay ƒë·ªïi
  useEffect(() => {
    let filtered = [...products]; // T·∫°o b·∫£n sao c·ªßa danh s√°ch s·∫£n ph·∫©m g·ªëc

    if (filters.brand !== "T·∫•t c·∫£") {
      filtered = filtered.filter((product) => product.brand === filters.brand);
      // L·ªçc theo th∆∞∆°ng hi·ªáu n·∫øu kh√¥ng ph·∫£i "T·∫•t c·∫£"
    }

    if (filters.search.trim()) {
      filtered = filtered.filter((product) =>
        product.name.toLowerCase().includes(filters.search.toLowerCase())
      );
      // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    }

    setFilteredProducts(filtered); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n sau khi l·ªçc
  }, [filters, products]); // Dependency: ch·∫°y l·∫°i khi filters ho·∫∑c products thay ƒë·ªïi

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi trang
  const handlePageChange = useCallback(
    (page) => {
      setCurrentPage(Math.max(1, Math.min(page, Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE))));
      // Gi·ªõi h·∫°n trang trong kho·∫£ng t·ª´ 1 ƒë·∫øn t·ªïng s·ªë trang
    },
    [filteredProducts] // Dependency: c·∫≠p nh·∫≠t khi danh s√°ch s·∫£n ph·∫©m l·ªçc thay ƒë·ªïi
  );

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi b·ªô l·ªçc
  const handleFilterChange = (e) => {
    const { name, value } = e.target; // L·∫•y name v√† value t·ª´ input
    setFilters((prev) => ({ ...prev, [name]: value })); // C·∫≠p nh·∫≠t gi√° tr·ªã b·ªô l·ªçc t∆∞∆°ng ·ª©ng
  };

  // H√†m x·ª≠ l√Ω ch·ªçn th∆∞∆°ng hi·ªáu
  const handleBrandSelect = (brand) => {
    setFilters((prev) => ({ ...prev, brand })); // C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn
  };

  // H√†m s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° tƒÉng d·∫ßn
  const sortLowToHigh = () => {
    const sorted = [...filteredProducts].sort((a, b) => a.price - b.price); // S·∫Øp x·∫øp t·ª´ th·∫•p ƒë·∫øn cao
    setFilteredProducts(sorted); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // H√†m s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° gi·∫£m d·∫ßn
  const sortHighToLow = () => {
    const sorted = [...filteredProducts].sort((a, b) => b.price - a.price); // S·∫Øp x·∫øp t·ª´ cao ƒë·∫øn th·∫•p
    setFilteredProducts(sorted); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // H√†m reset b·ªô l·ªçc v·ªÅ m·∫∑c ƒë·ªãnh
  const resetFilters = () => {
    setFilters({ brand: "T·∫•t c·∫£", search: "" }); // ƒê·∫∑t l·∫°i b·ªô l·ªçc v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
    setFilteredProducts(products); // Kh√¥i ph·ª•c danh s√°ch s·∫£n ph·∫©m g·ªëc
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // T√≠nh to√°n s·∫£n ph·∫©m hi·ªÉn th·ªã v√† t·ªïng s·ªë trang
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE); // T·ªïng s·ªë trang
  const currentProducts = filteredProducts.slice(
    (currentPage - 1) * PRODUCTS_PER_PAGE,
    currentPage * PRODUCTS_PER_PAGE
  ); // L·∫•y danh s√°ch s·∫£n ph·∫©m cho trang hi·ªán t·∫°i

  // Hi·ªÉn th·ªã giao di·ªán khi ƒëang t·∫£i d·ªØ li·ªáu
  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div> {/* Hi·ªáu ·ª©ng spinner khi t·∫£i */}
        <p className="loading-text">ƒêang t·∫£i...</p> {/* Th√¥ng b√°o ƒëang t·∫£i */}
      </div>
    );
  }

  // Hi·ªÉn th·ªã giao di·ªán khi c√≥ l·ªói
  if (error) {
    return (
      <div className="status error">
        <p>‚ùå {error}</p> {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói */}
        <button onClick={() => window.location.reload()} className="retry-button">
          Th·ª≠ l·∫°i {/* N√∫t ƒë·ªÉ th·ª≠ t·∫£i l·∫°i trang */}
        </button>
      </div>
    );
  }

  // Giao di·ªán ch√≠nh c·ªßa trang s·∫£n ph·∫©m
  return (
    <main className="product-page">
      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1> {/* Ti√™u ƒë·ªÅ trang */}
      <div className="filter-section">
        <input
          type="text"
          name="search"
          className="search-input" // Class CSS cho √¥ t√¨m ki·∫øm
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..." // G·ª£i √Ω trong √¥ t√¨m ki·∫øm
          value={filters.search} // Gi√° tr·ªã hi·ªán t·∫°i c·ªßa √¥ t√¨m ki·∫øm
          onChange={handleFilterChange} // X·ª≠ l√Ω khi nh·∫≠p/x√≥a t·ª´ kh√≥a
          aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m" // VƒÉn b·∫£n m√¥ t·∫£ cho accessibility
        />
        <BrandFilter
          brands={BRANDS} // Danh s√°ch th∆∞∆°ng hi·ªáu
          selectedBrand={filters.brand} // Th∆∞∆°ng hi·ªáu ƒëang ƒë∆∞·ª£c ch·ªçn
          onBrandSelect={handleBrandSelect} // H√†m x·ª≠ l√Ω khi ch·ªçn th∆∞∆°ng hi·ªáu
        />
        <button className="sort-button" onClick={sortLowToHigh}>
          Gi√° t·ª´ th·∫•p t·ªõi cao {/* N√∫t s·∫Øp x·∫øp gi√° tƒÉng d·∫ßn */}
        </button>
        <button className="sort-button" onClick={sortHighToLow}>
          Gi√° t·ª´ cao t·ªõi th·∫•p {/* N√∫t s·∫Øp x·∫øp gi√° gi·∫£m d·∫ßn */}
        </button>
      </div>
      <div className="product-list">
        {currentProducts.length > 0 ? (
          currentProducts.map((product) => (
            <ProductCard key={product.id} product={product} />
            // Hi·ªÉn th·ªã t·ª´ng s·∫£n ph·∫©m trong danh s√°ch hi·ªán t·∫°i
          ))
        ) : (
          <div className="no-products-container">
            <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p</p>
            {/* Th√¥ng b√°o khi kh√¥ng c√≥ s·∫£n ph·∫©m n√†o kh·ªõp b·ªô l·ªçc */}
            <button onClick={resetFilters} className="reset-filters-button">
              <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc
              {/* N√∫t x√≥a b·ªô l·ªçc ƒë·ªÉ quay v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu */}
            </button>
          </div>
        )}
      </div>
      {totalPages > 1 && (
        <Pagination
          currentPage={currentPage} // Trang hi·ªán t·∫°i
          totalPages={totalPages} // T·ªïng s·ªë trang
          onPageChange={handlePageChange} // H√†m x·ª≠ l√Ω khi chuy·ªÉn trang
        />
        // Hi·ªÉn th·ªã ph√¢n trang n·∫øu c√≥ h∆°n 1 trang
      )}
    </main>
  );
};

export default ProductPage; // Xu·∫•t component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c