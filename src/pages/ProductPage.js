import React, { useEffect, useState, useCallback } from "react";
import { Link } from "react-router-dom"; // Import Link ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
import "./ProductPage.css";

// C√°c h·∫±ng s·ªë c·ªë ƒë·ªãnh
const API_URL = `${process.env.PUBLIC_URL}/db.json`; // URL API ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
const PRODUCTS_PER_PAGE = 8; // S·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã tr√™n m·ªói trang
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"]; // Danh s√°ch th∆∞∆°ng hi·ªáu ƒë·ªÉ l·ªçc

// H√†m fetch d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
const fetchProducts = async (signal) => {
  const response = await fetch(API_URL, { signal }); // G·ª≠i y√™u c·∫ßu l·∫•y d·ªØ li·ªáu
  if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!"); // B√°o l·ªói n·∫øu fetch th·∫•t b·∫°i
  const data = await response.json(); // Parse d·ªØ li·ªáu JSON
  return Array.isArray(data) ? data : data.products || []; // Tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m ho·∫∑c m·∫£ng r·ªóng n·∫øu kh√¥ng h·ª£p l·ªá
};

// Component hi·ªÉn th·ªã t·ª´ng s·∫£n ph·∫©m
const ProductCard = ({ product }) => {
  // Ki·ªÉm tra d·ªØ li·ªáu s·∫£n ph·∫©m c√≥ h·ª£p l·ªá kh√¥ng
  if (!product?.id || !product.name || !product.image || typeof product.price !== "number") {
    console.error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", product); // Ghi log l·ªói n·∫øu d·ªØ li·ªáu sai
    return null; // Kh√¥ng hi·ªÉn th·ªã n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
  }

  return (
    <div className="product-card">
      {/* ·∫¢nh s·∫£n ph·∫©m, b·ªçc trong Link ƒë·ªÉ nh·∫•p v√†o ·∫£nh d·∫´n ƒë·∫øn trang chi ti·∫øt */}
      <Link to={`/products/${product.id}`} aria-label={`Xem chi ti·∫øt ${product.name}`}>
        <img
          src={product.image}
          alt={product.name}
          className="product-image"
          loading="lazy" // T·∫£i ·∫£nh theo ki·ªÉu lazy ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
        />
      </Link>
      {/* T√™n s·∫£n ph·∫©m */}
      <h3>{product.name}</h3>
      {/* Gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VNƒê */}
      <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p>
      {/* N√∫t "Xem chi ti·∫øt", c≈©ng d·∫´n ƒë·∫øn trang chi ti·∫øt */}
      <Link
        to={`/products/${product.id}`}
        className="view-details-button"
        aria-label={`Xem chi ti·∫øt ${product.name}`}
      >
        Xem chi ti·∫øt
      </Link>
    </div>
  );
};

// Component ph√¢n trang
const Pagination = ({ currentPage, totalPages, onPageChange }) => (
  <div className="pagination">
    <button
      className="pagination-button"
      onClick={() => onPageChange(currentPage - 1)}
      disabled={currentPage === 1} // V√¥ hi·ªáu h√≥a n·∫øu ƒëang ·ªü trang ƒë·∫ßu
    >
      Trang tr∆∞·ªõc
    </button>
    <span className="pagination-current">Trang {currentPage}</span> {/* Hi·ªÉn th·ªã trang hi·ªán t·∫°i */}
    <button
      className="pagination-button"
      onClick={() => onPageChange(currentPage + 1)}
      disabled={currentPage === totalPages} // V√¥ hi·ªáu h√≥a n·∫øu ƒëang ·ªü trang cu·ªëi
    >
      Trang sau
    </button>
  </div>
);

// Component l·ªçc theo th∆∞∆°ng hi·ªáu
const BrandFilter = ({ brands, selectedBrand, onBrandSelect }) => (
  <div className="brand-buttons">
    {brands.map((brand) => (
      <button
        key={brand}
        className={`brand-button ${selectedBrand === brand ? "active" : ""}`} // Th√™m class active n·∫øu th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn
        onClick={() => onBrandSelect(brand)}
      >
        {brand}
      </button>
    ))}
  </div>
);

// Component ch√≠nh: Trang s·∫£n ph·∫©m
const ProductPage = () => {
  const [products, setProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m g·ªëc
  const [filteredProducts, setFilteredProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
  const [isLoading, setIsLoading] = useState(true); // Tr·∫°ng th√°i ƒëang t·∫£i d·ªØ li·ªáu
  const [error, setError] = useState(null); // L∆∞u l·ªói n·∫øu x·∫£y ra
  const [currentPage, setCurrentPage] = useState(1); // Trang hi·ªán t·∫°i
  const [filters, setFilters] = useState({
    brand: "T·∫•t c·∫£", // B·ªô l·ªçc th∆∞∆°ng hi·ªáu
    search: "", // B·ªô l·ªçc t√¨m ki·∫øm
  });

  // Fetch d·ªØ li·ªáu s·∫£n ph·∫©m khi component mount
  useEffect(() => {
    const controller = new AbortController(); // T·∫°o controller ƒë·ªÉ h·ªßy fetch
    const loadProducts = async () => {
      try {
        const productList = await fetchProducts(controller.signal); // L·∫•y d·ªØ li·ªáu t·ª´ API
        setProducts(productList); // L∆∞u danh s√°ch s·∫£n ph·∫©m g·ªëc
        setFilteredProducts(productList); // L∆∞u danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
        setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
      } catch (err) {
        if (err.name !== "AbortError") {
          setError(err.message); // L∆∞u l·ªói n·∫øu kh√¥ng ph·∫£i l·ªói h·ªßy fetch
          setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
        }
      }
    };
    loadProducts();
    return () => controller.abort(); // Cleanup: H·ªßy fetch khi component unmount
  }, []);

  // T·ª± ƒë·ªông l·ªçc s·∫£n ph·∫©m khi filters thay ƒë·ªïi
  useEffect(() => {
    let filtered = products;

    // L·ªçc theo th∆∞∆°ng hi·ªáu
    if (filters.brand !== "T·∫•t c·∫£") {
      filtered = filtered.filter((product) => product.brand === filters.brand);
    }

    // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
    if (filters.search.trim()) {
      filtered = filtered.filter((product) =>
        product.name.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    setFilteredProducts(filtered); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n
  }, [filters, products]); // Dependency: ch·∫°y l·∫°i khi filters ho·∫∑c products thay ƒë·ªïi

  // X·ª≠ l√Ω thay ƒë·ªïi trang
  const handlePageChange = useCallback(
    (page) => setCurrentPage(Math.max(1, Math.min(page, Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE)))),
    [filteredProducts] // Gi·ªõi h·∫°n trang trong kho·∫£ng h·ª£p l·ªá
  );

  // X·ª≠ l√Ω thay ƒë·ªïi b·ªô l·ªçc (t√¨m ki·∫øm, th∆∞∆°ng hi·ªáu)
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value })); // C·∫≠p nh·∫≠t gi√° tr·ªã b·ªô l·ªçc
  };

  // X·ª≠ l√Ω ch·ªçn th∆∞∆°ng hi·ªáu
  const handleBrandSelect = (brand) => {
    setFilters((prev) => ({ ...prev, brand })); // C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn
  };

  // S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° tƒÉng d·∫ßn (th·∫•p t·ªõi cao)
  const sortLowToHigh = () => {
    const sorted = [...filteredProducts].sort((a, b) => a.price - b.price); // S·∫Øp x·∫øp tƒÉng d·∫ßn theo gi√°
    setFilteredProducts(sorted); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° gi·∫£m d·∫ßn (cao t·ªõi th·∫•p)
  const sortHighToLow = () => {
    const sorted = [...filteredProducts].sort((a, b) => b.price - a.price); // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo gi√°
    setFilteredProducts(sorted); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // Reset b·ªô l·ªçc v·ªÅ m·∫∑c ƒë·ªãnh
  const resetFilters = () => {
    setFilters({ brand: "T·∫•t c·∫£", search: "" }); // ƒê·∫∑t l·∫°i b·ªô l·ªçc
    setFilteredProducts(products); // Kh√¥i ph·ª•c danh s√°ch s·∫£n ph·∫©m g·ªëc
    setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu
  };

  // T√≠nh to√°n s·∫£n ph·∫©m hi·ªÉn th·ªã v√† s·ªë trang
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE); // T·ªïng s·ªë trang
  const currentProducts = filteredProducts.slice(
    (currentPage - 1) * PRODUCTS_PER_PAGE,
    currentPage * PRODUCTS_PER_PAGE
  ); // L·∫•y s·∫£n ph·∫©m cho trang hi·ªán t·∫°i

  // Hi·ªÉn th·ªã khi ƒëang t·∫£i
  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">ƒêang t·∫£i...</p>
      </div>
    );
  }

  // Hi·ªÉn th·ªã khi c√≥ l·ªói
  if (error) return (
    <div className="status error">
      <p>‚ùå {error}</p>
      <button onClick={() => window.location.reload()} className="retry-button">
        Th·ª≠ l·∫°i
      </button>
    </div>
  );

  // Giao di·ªán ch√≠nh c·ªßa trang
  return (
    <main className="product-page">
      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1> {/* Ti√™u ƒë·ªÅ trang */}
      <div className="filter-section">
        <input
          type="text"
          name="search"
          className="search-input"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          value={filters.search}
          onChange={handleFilterChange}
          aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m"
        /> {/* √î t√¨m ki·∫øm, t·ª± ƒë·ªông l·ªçc khi nh·∫≠p/x√≥a */}
        <BrandFilter
          brands={BRANDS}
          selectedBrand={filters.brand}
          onBrandSelect={handleBrandSelect} // T·ª± ƒë·ªông l·ªçc khi ch·ªçn th∆∞∆°ng hi·ªáu
        />
        {/* Hai button s·∫Øp x·∫øp gi√° */}
        <button className="sort-button" onClick={sortLowToHigh}>
          Gi√° t·ª´ th·∫•p t·ªõi cao
        </button>
        <button className="sort-button" onClick={sortHighToLow}>
          Gi√° t·ª´ cao t·ªõi th·∫•p
        </button>
      </div>
      <div className="product-list">
        {currentProducts.length > 0 ? (
          currentProducts.map((product) => (
            <ProductCard key={product.id} product={product} /> // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
          ))
        ) : (
          <div className="no-products-container">
            <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p</p>
            <button onClick={resetFilters} className="reset-filters-button">
              <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc {/* N√∫t x√≥a b·ªô l·ªçc */}
            </button>
          </div>
        )}
      </div>
      {totalPages > 1 && (
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        /> // Hi·ªÉn th·ªã ph√¢n trang n·∫øu c√≥ h∆°n 1 trang
      )}
    </main>
  );
};

export default ProductPage; // Xu·∫•t component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c