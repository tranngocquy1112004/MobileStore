import React, { useEffect, useState, useCallback } from "react"; // Import c√°c hook c·∫ßn thi·∫øt t·ª´ th∆∞ vi·ªán React: useEffect ƒë·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• ph·ª• (side effects), useState ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ª•c b·ªô, v√† useCallback ƒë·ªÉ ghi nh·ªõ (memoize) c√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán nh·∫±m t·ªëi ∆∞u hi·ªáu su·∫•t
import { Link } from "react-router-dom"; // Import component Link t·ª´ react-router-dom ƒë·ªÉ t·∫°o c√°c li√™n k·∫øt ƒëi·ªÅu h∆∞·ªõng trong ·ª©ng d·ª•ng SPA (Single Page Application) m√† kh√¥ng t·∫£i l·∫°i to√†n b·ªô trang
import Slider from "react-slick"; // Import th∆∞ vi·ªán slider ph·ªï bi·∫øn (react-slick) ƒë·ªÉ t·∫°o banner qu·∫£ng c√°o d·∫°ng carousel
import "slick-carousel/slick/slick.css"; // Import file CSS m·∫∑c ƒë·ªãnh c·ªßa th∆∞ vi·ªán react-slick (b·∫Øt bu·ªôc)
import "slick-carousel/slick/slick-theme.css"; // Import file CSS theme m·∫∑c ƒë·ªãnh c·ªßa th∆∞ vi·ªán react-slick (b·∫°n c√≥ th·ªÉ thay th·∫ø b·∫±ng CSS t√πy ch·ªânh c·ªßa m√¨nh)
import "./ProductPage.css"; // Import file CSS t√πy ch·ªânh ƒë·ªÉ ƒë·ªãnh d·∫°ng giao di·ªán cho component ProductPage n√†y

// --- H·∫±ng s·ªë ---

// URL ho·∫∑c ƒë∆∞·ªùng d·∫´n t·ªõi ngu·ªìn d·ªØ li·ªáu s·∫£n ph·∫©m.
// S·ª≠ d·ª•ng `${process.env.PUBLIC_URL}/db.json` ƒë·ªÉ tham chi·∫øu ƒë·∫øn file db.json trong th∆∞ m·ª•c 'public'.
// ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ho·∫°t ƒë·ªông ƒë√∫ng trong c·∫£ m√¥i tr∆∞·ªùng ph√°t tri·ªÉn v√† production khi deploy.
const API_URL = `${process.env.PUBLIC_URL}/db.json`;
// S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªëi ƒëa s·∫Ω hi·ªÉn th·ªã tr√™n m·ªói trang khi th·ª±c hi·ªán ph√¢n trang.
const PRODUCTS_PER_PAGE = 6;
// M·∫£ng ch·ª©a danh s√°ch c√°c t√™n th∆∞∆°ng hi·ªáu c√≥ s·∫µn ƒë·ªÉ ng∆∞·ªùi d√πng l·ª±a ch·ªçn l·ªçc s·∫£n ph·∫©m.
// "T·∫•t c·∫£" l√† m·ªôt t√πy ch·ªçn ƒë·∫∑c bi·ªát ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m.
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"];

// M·∫£ng ch·ª©a d·ªØ li·ªáu (text, h√¨nh ·∫£nh, link) cho c√°c slide (banner) hi·ªÉn th·ªã ·ªü ƒë·∫ßu trang b·∫±ng Slider.
const SLIDES = [
  {
    image:
      "https://cdn.tgdd.vn/Products/Images/42/329149/iphone-16-pro-max-sa-mac-thumb-1-600x600.jpg", // ƒê∆∞·ªùng d·∫´n ·∫£nh cho slide 1
    title: "iPhone 16 Pro Max", // Ti√™u ƒë·ªÅ ch√≠nh c·ªßa slide 1
    subtitle: "Thi·∫øt k·∫ø Titan tuy·ªát ƒë·∫πp.", // Ph·ª• ƒë·ªÅ/m√¥ t·∫£ ng·∫Øn cho slide 1
    features: [
      "Tr·∫£ g√≥p l√™n ƒë·∫øn 3 TRI·ªÜU", // Danh s√°ch c√°c ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t ho·∫∑c ∆∞u ƒë√£i d·∫°ng bullet points
      "Kh√°ch h√†ng m·ªõi GI·∫¢M 300K",
      "G√≥p 12 Th√°ng t·ª´ 76K/Ng√†y",
    ],
    link: "/products/4", // ƒê∆∞·ªùng d·∫´n ƒëi·ªÅu h∆∞·ªõng khi ng∆∞·ªùi d√πng click v√†o slide ho·∫∑c n√∫t "Mua ngay"
    buttonText: "Mua ngay", // N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t h√†nh ƒë·ªông
  },
  {
    image:
      "https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/d/i/dien-thoai-samsung-galaxy-s25-ultra_1__3.png",
    title: "Samsung Galaxy S25 Ultra",
    subtitle: "C√¥ng ngh·ªá AI ti√™n ti·∫øn.",
    features: [
      "Gi·∫£m ngay 2 TRI·ªÜU",
      "T·∫∑ng k√®m s·∫°c nhanh 45W",
      "B·∫£o h√†nh ch√≠nh h√£ng 2 nƒÉm",
    ],
    link: "/products/1",
    buttonText: "Mua ngay",
  },
  {
    image:
      "https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/d/i/dien-thoai-xiaomi-15-ultra_12_.png",
    title: "Xiaomi 15 Ultra",
    subtitle: "Camera 200MP Leica ƒë·ªânh cao.",
    features: [
      "Tr·∫£ g√≥p 0% l√£i su·∫•t",
      "Gi·∫£m 500K khi thanh to√°n online",
      "T·∫∑ng tai nghe Xiaomi Buds 4",
    ],
    link: "/products/3",
    buttonText: "Mua ngay",
  },
];

// --- H√†m g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ---
// H√†m async th·ª±c hi·ªán vi·ªác g·ª≠i y√™u c·∫ßu fetch d·ªØ li·ªáu t·ª´ API_URL.
// Nh·∫≠n 'signal' t·ª´ AbortController ƒë·ªÉ c√≥ th·ªÉ h·ªßy y√™u c·∫ßu fetch n·∫øu component unmount tr∆∞·ªõc khi ho√†n th√†nh.
const fetchProducts = async (signal) => {
  const response = await fetch(API_URL, { signal }); // Th·ª±c hi·ªán y√™u c·∫ßu fetch t·ªõi API_URL v·ªõi signal
  // Ki·ªÉm tra thu·ªôc t√≠nh 'ok' c·ªßa response ƒë·ªÉ x√°c ƒë·ªãnh y√™u c·∫ßu c√≥ th√†nh c√¥ng hay kh√¥ng (status code 200-299).
  if (!response.ok) {
    // N·∫øu response kh√¥ng OK, n√©m ra m·ªôt ƒë·ªëi t∆∞·ª£ng Error m·ªõi v·ªõi th√¥ng b√°o l·ªói.
    throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!"); // S·ª≠ d·ª•ng m·ªôt chu·ªói th√¥ng b√°o c·ªë ƒë·ªãnh.
  }
  const data = await response.json(); // Parse body c·ªßa response th√†nh ƒë·ªëi t∆∞·ª£ng/m·∫£ng JavaScript t·ª´ JSON.
  // Tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m. Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:
  // N·∫øu 'data' b·∫£n th√¢n n√≥ l√† m·ªôt m·∫£ng (Array.isArray(data) l√† true), tr·∫£ v·ªÅ 'data'.
  // N·∫øu 'data' l√† m·ªôt ƒë·ªëi t∆∞·ª£ng V√Ä c√≥ thu·ªôc t√≠nh 'products' l√† m·∫£ng, tr·∫£ v·ªÅ 'data.products'.
  // N·∫øu kh√¥ng kh·ªõp v·ªõi hai tr∆∞·ªùng h·ª£p tr√™n, tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng [].
  return Array.isArray(data) ? data : data.products || [];
};

// --- Component con: ProductCard (Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt m·ªôt s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng th·∫ª) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering. Component ch·ªâ render l·∫°i khi props c·ªßa n√≥ thay ƒë·ªïi.
const ProductCard = React.memo(({ product }) => {
  // Th·ª±c hi·ªán ki·ªÉm tra c∆° b·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu s·∫£n ph·∫©m h·ª£p l·ªá tr∆∞·ªõc khi c·ªë g·∫Øng render.
  if (
    !product?.id || // ID ph·∫£i t·ªìn t·∫°i v√† kh√¥ng null/undefined
    !product.name || // T√™n s·∫£n ph·∫©m ph·∫£i t·ªìn t·∫°i
    !product.image || // ƒê∆∞·ªùng d·∫´n ·∫£nh ph·∫£i t·ªìn t·∫°i
    typeof product.price !== "number" // Gi√° ph·∫£i l√† m·ªôt s·ªë
  ) {
    console.error("Invalid product data:", product); // Ghi log l·ªói ra console n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    return null; // Tr·∫£ v·ªÅ null ƒë·ªÉ kh√¥ng render b·∫•t c·ª© th·ª© g√¨ cho d·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.
  }

  return (
    <div className="product-card">
      {" "}
      {/* Container ch√≠nh cho m·ªôt th·∫ª s·∫£n ph·∫©m ri√™ng l·∫ª */}
      {/* Li√™n k·∫øt (Link) bao quanh h√¨nh ·∫£nh s·∫£n ph·∫©m. Khi click v√†o ·∫£nh, s·∫Ω ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m. */}
      {/* 'to={`/products/${product.id}`}' t·∫°o ƒë∆∞·ªùng d·∫´n ƒë·ªông d·ª±a tr√™n ID c·ªßa s·∫£n ph·∫©m. */}
      <Link to={`/products/${product.id}`} aria-label={`Xem chi ti·∫øt ${product.name}`}>
        {" "}
        {/* 'aria-label' cung c·∫•p m√¥ t·∫£ cho ng∆∞·ªùi d√πng tr√¨nh ƒë·ªçc m√†n h√¨nh */}
        {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
        <img
          src={product.image} // ƒê∆∞·ªùng d·∫´n ·∫£nh
          alt={product.name} // Alt text cho ·∫£nh, s·ª≠ d·ª•ng t√™n s·∫£n ph·∫©m
          className="product-image" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng ·∫£nh
          loading="lazy" // Thu·ªôc t√≠nh HTML5 y√™u c·∫ßu tr√¨nh duy·ªát t·∫£i ·∫£nh theo ch·∫ø ƒë·ªô lazy loading (t·∫£i khi ·∫£nh g·∫ßn hi·ªÉn th·ªã), c·∫£i thi·ªán hi·ªáu su·∫•t ban ƒë·∫ßu.
        />
      </Link>
      <h3>{product.name}</h3> {/* Ti√™u ƒë·ªÅ (th·∫ª h3) hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m */}
      {/* ƒêo·∫°n vƒÉn b·∫£n hi·ªÉn th·ªã gi√° s·∫£n ph·∫©m, ƒë·ªãnh d·∫°ng theo ti·ªÅn t·ªá Vi·ªát Nam. */}
      <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p>{" "}
      {/* toLocaleString("vi-VN") ƒë·ªãnh d·∫°ng s·ªë th√†nh chu·ªói ti·ªÅn t·ªá VNƒê */}
      {/* N√∫t (Link) "Xem chi ti·∫øt" d·∫´n ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m */}
      <Link
        to={`/products/${product.id}`} // ƒê∆∞·ªùng d·∫´n ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
        className="view-details-button" // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng n√∫t
        aria-label={`Xem chi ti·∫øt ${product.name}`} // Thu·ªôc t√≠nh h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n
      >
        Xem chi ti·∫øt{" "}
        {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t */}
      </Link>
    </div>
  );
});

// --- Component con: Pagination (Hi·ªÉn th·ªã c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng ph√¢n trang) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering. Component ch·ªâ render l·∫°i khi props c·ªßa n√≥ thay ƒë·ªïi.
const Pagination = React.memo(({ currentPage, totalPages, onPageChange }) => {
  // N·∫øu t·ªïng s·ªë trang nh·ªè h∆°n ho·∫∑c b·∫±ng 1, kh√¥ng hi·ªÉn th·ªã b·ªô ph√¢n trang.
  if (totalPages <= 1) return null;

  return (
    <div className="pagination">
      {" "}
      {/* Container cho b·ªô ph·∫≠n ph√¢n trang */}
      {/* N√∫t "Trang tr∆∞·ªõc". B·ªã v√¥ hi·ªáu h√≥a n·∫øu ƒëang ·ªü trang ƒë·∫ßu ti√™n (currentPage l√† 1). */}
      <button
        onClick={() => onPageChange(currentPage - 1)} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click. G·ªçi h√†m 'onPageChange' (truy·ªÅn qua props) v·ªõi s·ªë trang m·ªõi l√† trang hi·ªán t·∫°i tr·ª´ ƒëi 1.
        disabled={currentPage === 1} // Thu·ªôc t√≠nh 'disabled' d·ª±a v√†o ƒëi·ªÅu ki·ªán.
        className="pagination-button" // Class CSS
      >
        Trang tr∆∞·ªõc{" "}
        {/* N·ªôi dung n√∫t */}
      </button>
      {/* Hi·ªÉn th·ªã th√¥ng tin trang hi·ªán t·∫°i. */}
      <span className="pagination-current">Trang {currentPage}</span>{" "}
      {/* Hi·ªÉn th·ªã s·ªë trang hi·ªán t·∫°i */}
      {/* N√∫t "Trang sau". B·ªã v√¥ hi·ªáu h√≥a n·∫øu ƒëang ·ªü trang cu·ªëi c√πng (currentPage b·∫±ng totalPages). */}
      <button
        onClick={() => onPageChange(currentPage + 1)} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click. G·ªçi h√†m 'onPageChange' v·ªõi s·ªë trang m·ªõi l√† trang hi·ªán t·∫°i c·ªông th√™m 1.
        disabled={currentPage === totalPages} // Thu·ªôc t√≠nh 'disabled' d·ª±a v√†o ƒëi·ªÅu ki·ªán.
        className="pagination-button" // Class CSS
      >
        Trang sau{" "}
        {/* N·ªôi dung n√∫t */}
      </button>
    </div>
  );
});

// --- Component con: BrandFilter (Hi·ªÉn th·ªã c√°c n√∫t l·ªçc theo th∆∞∆°ng hi·ªáu) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering. Component ch·ªâ render l·∫°i khi props c·ªßa n√≥ thay ƒë·ªïi.
const BrandFilter = React.memo(({ brands, selectedBrand, onBrandSelect }) => (
  <div className="brand-buttons">
    {" "}
    {/* Container cho nh√≥m n√∫t l·ªçc theo th∆∞∆°ng hi·ªáu */}
    {/* L·∫∑p (map) qua m·∫£ng 'brands' ƒë·ªÉ t·∫°o m·ªôt n√∫t button cho m·ªói th∆∞∆°ng hi·ªáu */}
    {brands.map((brand) => (
      <button
        key={brand} // Key duy nh·∫•t cho m·ªói n√∫t trong danh s√°ch (t√™n th∆∞∆°ng hi·ªáu l√† duy nh·∫•t)
        className={`brand-button ${selectedBrand === brand ? "active" : ""}`} // Th√™m class CSS 'active' v√†o n√∫t n·∫øu t√™n th∆∞∆°ng hi·ªáu c·ªßa n√∫t ƒë√≥ tr√πng v·ªõi 'selectedBrand' hi·ªán t·∫°i
        onClick={() => onBrandSelect(brand)} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán click. G·ªçi h√†m 'onBrandSelect' (truy·ªÅn qua props) v·ªõi t√™n th∆∞∆°ng hi·ªáu c·ªßa n√∫t ƒë√≥.
      >
        {brand}{" "}
        {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t (t√™n th∆∞∆°ng hi·ªáu) */}
      </button>
    ))}
  </div>
));

// --- Component con: Slide (Hi·ªÉn th·ªã n·ªôi dung m·ªôt slide trong carousel) ---
// S·ª≠ d·ª•ng React.memo() ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t rendering. Component ch·ªâ render l·∫°i khi props c·ªßa n√≥ thay ƒë·ªïi.
const Slide = React.memo(({ slide }) => (
  <div className="slide">
    {" "}
    {/* Container ch√≠nh cho m·ªôt slide */}
    <div className="slide-content">
      {" "}
      {/* Container ch·ª©a n·ªôi dung b√™n trong slide. S·ª≠ d·ª•ng flexbox ƒë·ªÉ cƒÉn ch·ªânh ·∫£nh v√† text. */}
      <div className="slide-text">
        {" "}
        {/* Ph·∫ßn b√™n tr√°i ch·ª©a vƒÉn b·∫£n (ti√™u ƒë·ªÅ, ph·ª• ƒë·ªÅ, ƒë·∫∑c ƒëi·ªÉm) */}
        <h2>{slide.title}</h2> {/* Ti√™u ƒë·ªÅ ch√≠nh c·ªßa slide */}
        <h3>{slide.subtitle}</h3> {/* Ph·ª• ƒë·ªÅ c·ªßa slide */}
        <ul>
          {" "}
          {/* Danh s√°ch c√°c ƒë·∫∑c ƒëi·ªÉm ho·∫∑c ∆∞u ƒë√£i */}
          {/* L·∫∑p (map) qua m·∫£ng 'features' c·ªßa slide ƒë·ªÉ t·∫°o c√°c list item */}
          {slide.features.map((feature, i) => (
            <li key={i}>{feature}</li> // Hi·ªÉn th·ªã t·ª´ng ƒë·∫∑c ƒëi·ªÉm. S·ª≠ d·ª•ng index l√†m key (an to√†n n·∫øu m·∫£ng features kh√¥ng thay ƒë·ªïi th·ª© t·ª±).
          ))}
        </ul>
      </div>
      <div className="slide-image">
        {" "}
        {/* Ph·∫ßn b√™n ph·∫£i ch·ª©a h√¨nh ·∫£nh c·ªßa slide */}
        <img src={slide.image} alt={slide.title} loading="lazy" />{" "}
        {/* H√¨nh ·∫£nh slide, s·ª≠ d·ª•ng ti√™u ƒë·ªÅ l√†m alt text, lazy loading */}
      </div>
      {/* N√∫t h√†nh ƒë·ªông (v√≠ d·ª•: "Mua ngay"), s·ª≠ d·ª•ng component Link ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m ho·∫∑c trang kh√°c. */}
      <Link to={slide.link} className="slide-button">
        {" "}
        {/* 'to={slide.link}' l√† ƒë∆∞·ªùng d·∫´n ƒë√≠ch */}
        {slide.buttonText}{" "}
        {/* N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t */}
      </Link>
    </div>
  </div>
));

// --- Component ch√≠nh: ProductPage (Trang hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m) ---
// ƒê√¢y l√† functional component hi·ªÉn th·ªã to√†n b·ªô n·ªôi dung c·ªßa trang danh s√°ch s·∫£n ph·∫©m.
const ProductPage = () => {
  // --- State qu·∫£n l√Ω d·ªØ li·ªáu v√† tr·∫°ng th√°i c·ªßa component ---
  // State 'products': L∆∞u tr·ªØ TO√ÄN B·ªò danh s√°ch s·∫£n ph·∫©m g·ªëc ƒë∆∞·ª£c fetch t·ª´ API. M·∫£ng n√†y kh√¥ng thay ƒë·ªïi khi √°p d·ª•ng l·ªçc/t√¨m ki·∫øm/s·∫Øp x·∫øp. Ban ƒë·∫ßu l√† m·∫£ng r·ªóng [].
  const [products, setProducts] = useState([]);
  // State 'filteredProducts': L∆∞u tr·ªØ danh s√°ch s·∫£n ph·∫©m SAU KHI ƒë√£ √°p d·ª•ng c√°c b·ªô l·ªçc (th∆∞∆°ng hi·ªáu, t√¨m ki·∫øm) v√† s·∫Øp x·∫øp. ƒê√¢y l√† m·∫£ng ƒë∆∞·ª£c d√πng ƒë·ªÉ hi·ªÉn th·ªã. Ban ƒë·∫ßu l√† m·∫£ng r·ªóng [].
  const [filteredProducts, setFilteredProducts] = useState([]);
  // State 'isLoading': Boolean theo d√µi tr·∫°ng th√°i ƒëang t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu t·ª´ API. Ban ƒë·∫ßu l√† true.
  const [isLoading, setIsLoading] = useState(true);
  // State 'error': L∆∞u tr·ªØ th√¥ng b√°o l·ªói (chu·ªói) n·∫øu qu√° tr√¨nh fetch d·ªØ li·ªáu g·∫∑p v·∫•n ƒë·ªÅ. Ban ƒë·∫ßu l√† null.
  const [error, setError] = useState(null);
  // State 'currentPage': L∆∞u tr·ªØ s·ªë trang hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã trong b·ªô ph√¢n trang. Ban ƒë·∫ßu l√† 1.
  const [currentPage, setCurrentPage] = useState(1);
  // State 'filters': ƒê·ªëi t∆∞·ª£ng l∆∞u tr·ªØ tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa c√°c b·ªô l·ªçc. Bao g·ªìm 'brand' (th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn) v√† 'search' (t·ª´ kh√≥a t√¨m ki·∫øm).
  const [filters, setFilters] = useState({ brand: "T·∫•t c·∫£", search: "" });
  // State 'isSearching': Boolean theo d√µi li·ªáu b·ªô l·ªçc/t√¨m ki·∫øm c√≥ ƒëang ƒë∆∞·ª£c √°p d·ª•ng v√† x·ª≠ l√Ω hay kh√¥ng (ƒë·ªÉ hi·ªÉn th·ªã spinner ho·∫∑c hi·ªáu ·ª©ng). Ban ƒë·∫ßu l√† false.
  const [isSearching, setIsSearching] = useState(false);
  // State 'showNoResults': Boolean theo d√µi li·ªáu c√≥ n√™n hi·ªÉn th·ªã th√¥ng b√°o "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p" hay kh√¥ng. Ban ƒë·∫ßu l√† false.
  const [showNoResults, setShowNoResults] = useState(false);

  // --- C√†i ƒë·∫∑t cho Slider carousel (component c·ªßa react-slick) ---
  // ƒê·ªëi t∆∞·ª£ng ch·ª©a c√°c t√πy ch·ªçn c·∫•u h√¨nh cho Slider.
  const sliderSettings = {
    dots: true, // Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë slide (d·∫°ng ch·∫•m) ·ªü d∆∞·ªõi carousel
    infinite: true, // Cho ph√©p l·∫∑p l·∫°i c√°c slide v√¥ h·∫°n sau khi ƒë·∫øn slide cu·ªëi c√πng
    speed: 500, // T·ªëc ƒë·ªô chuy·ªÉn ƒë·ªông gi·ªØa c√°c slide (miliseconds)
    slidesToShow: 1, // S·ªë l∆∞·ª£ng slide hi·ªÉn th·ªã c√πng l√∫c trong viewport
    slidesToScroll: 1, // S·ªë l∆∞·ª£ng slide cu·ªôn ƒëi sau m·ªói l·∫ßn chuy·ªÉn (t·ª± ƒë·ªông ho·∫∑c b·∫±ng n√∫t)
    autoplay: true, // T·ª± ƒë·ªông chuy·ªÉn slide sau m·ªói kho·∫£ng th·ªùi gian
    autoplaySpeed: 3000, // Kho·∫£ng th·ªùi gian ch·ªù tr∆∞·ªõc khi t·ª± ƒë·ªông chuy·ªÉn slide ti·∫øp theo (miliseconds)
    arrows: true, // Hi·ªÉn th·ªã c√°c m≈©i t√™n ƒëi·ªÅu h∆∞·ªõng (tr∆∞·ªõc/sau)
  };

  // --- Effect hook ƒë·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API khi component mount ---
  // Effect n√†y l√† n∆°i th·ª±c hi·ªán vi·ªác fetch d·ªØ li·ªáu s·∫£n ph·∫©m ban ƒë·∫ßu.
  useEffect(() => {
    // T·∫°o m·ªôt instance c·ªßa AbortController. ƒê∆∞·ª£c d√πng ƒë·ªÉ h·ªßy y√™u c·∫ßu fetch n·∫øu component b·ªã h·ªßy tr∆∞·ªõc khi fetch ho√†n th√†nh.
    const controller = new AbortController();
    const signal = controller.signal; // L·∫•y signal t·ª´ controller ƒë·ªÉ truy·ªÅn v√†o t√πy ch·ªçn c·ªßa fetch().

    // ƒê·ªãnh nghƒ©a m·ªôt h√†m async ƒë·ªÉ th·ª±c hi·ªán qu√° tr√¨nh t·∫£i d·ªØ li·ªáu v√† c·∫≠p nh·∫≠t state.
    const load = async () => {
      try {
        setIsLoading(true); // B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i, ƒë·∫∑t state 'isLoading' th√†nh true.
        setError(null); // X√≥a th√¥ng b√°o l·ªói c≈© n·∫øu c√≥.

        // G·ªçi h√†m fetchProducts ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API, truy·ªÅn signal ƒë·ªÉ c√≥ th·ªÉ h·ªßy.
        const productList = await fetchProducts(signal);
        setProducts(productList); // C·∫≠p nh·∫≠t state 'products' (danh s√°ch g·ªëc) v·ªõi d·ªØ li·ªáu v·ª´a t·∫£i.
        setFilteredProducts(productList); // Ban ƒë·∫ßu, danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc c≈©ng ch√≠nh l√† danh s√°ch g·ªëc.
        // Kh√¥ng c·∫ßn ƒë·∫∑t showNoResults ·ªü ƒë√¢y ngay l·∫≠p t·ª©c. Logic trong effect l·ªçc (useEffect th·ª© hai) s·∫Ω x·ª≠ l√Ω sau.
      } catch (err) {
        // B·∫Øt c√°c l·ªói x·∫£y ra trong qu√° tr√¨nh fetch.
        // Ki·ªÉm tra n·∫øu l·ªói KH√îNG ph·∫£i l√† AbortError (l·ªói do cleanup h·ªßy y√™u c·∫ßu).
        if (err.name !== "AbortError") {
          console.error("Error fetching products:", err); // Ghi log l·ªói th·∫≠t ra console.
          setError(err.message); // C·∫≠p nh·∫≠t state 'error' v·ªõi th√¥ng b√°o l·ªói ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI.
          setProducts([]); // ƒê·∫∑t state 'products' v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói fetch.
          setFilteredProducts([]); // ƒê·∫£m b·∫£o 'filteredProducts' c≈©ng r·ªóng khi c√≥ l·ªói.
          setShowNoResults(true); // Hi·ªÉn th·ªã th√¥ng b√°o "Kh√¥ng c√≥ k·∫øt qu·∫£" n·∫øu fetch l·ªói ho·∫∑c tr·∫£ v·ªÅ danh s√°ch r·ªóng.
        }
        // N·∫øu l√† AbortError, b·ªè qua v√¨ ƒë√≥ l√† l·ªói do cleanup x·ª≠ l√Ω.
      } finally {
        // Kh·ªëi finally lu√¥n ch·∫°y sau try/catch (tr·ª´ khi c√≥ l·ªói nghi√™m tr·ªçng kh√¥ng th·ªÉ ph·ª•c h·ªìi).
        setIsLoading(false); // K·∫øt th√∫c qu√° tr√¨nh t·∫£i, ƒë·∫∑t state 'isLoading' th√†nh false.
      }
    };

    load(); // G·ªçi h√†m load() ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i d·ªØ li·ªáu khi component mount.

    // H√†m cleanup cho effect n√†y. Ch·∫°y khi component unmount ho·∫∑c khi dependencies thay ƒë·ªïi v√† effect s·∫Øp ch·∫°y l·∫°i.
    return () => controller.abort(); // H·ªßy y√™u c·∫ßu fetch API ƒëang ch·ªù x·ª≠ l√Ω n·∫øu n√≥ v·∫´n ch∆∞a ho√†n th√†nh. Gi√∫p tr√°nh memory leaks v√† c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn c·∫≠p nh·∫≠t state tr√™n component ƒë√£ b·ªã h·ªßy.
  }, []); // M·∫£ng dependencies r·ªóng []: ƒê·∫£m b·∫£o effect n√†y ch·ªâ ch·∫°y M·ªòT L·∫¶N duy nh·∫•t sau l·∫ßn render ƒë·∫ßu ti√™n (t∆∞∆°ng t·ª± lifecycle method componentDidMount).

  // --- Effect hook ƒë·ªÉ √°p d·ª•ng c√°c b·ªô l·ªçc (t√¨m ki·∫øm v√† th∆∞∆°ng hi·ªáu) v√† s·∫Øp x·∫øp ---
  // Effect n√†y ch·∫°y m·ªói khi state 'filters' ho·∫∑c state 'products' thay ƒë·ªïi.
  useEffect(() => {
    let filtered = [...products]; // T·∫°o m·ªôt b·∫£n sao c·ªßa danh s√°ch s·∫£n ph·∫©m g·ªëc ('products') ƒë·ªÉ l√†m vi·ªác, tr√°nh s·ª≠a ƒë·ªïi tr·ª±c ti·∫øp state g·ªëc.

    // 1. L·ªçc theo th∆∞∆°ng hi·ªáu: N·∫øu b·ªô l·ªçc th∆∞∆°ng hi·ªáu hi·ªán t·∫°i KH√îNG ph·∫£i l√† "T·∫•t c·∫£"
    if (filters.brand !== "T·∫•t c·∫£") {
      filtered = filtered.filter((p) => p.brand === filters.brand); // L·ªçc v√† ch·ªâ gi·ªØ l·∫°i c√°c s·∫£n ph·∫©m c√≥ thu·ªôc t√≠nh 'brand' tr√πng kh·ªõp v·ªõi 'filters.brand'.
    }

    // 2. L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm: N·∫øu c√≥ t·ª´ kh√≥a t√¨m ki·∫øm (ki·ªÉm tra sau khi lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu/cu·ªëi kh√¥ng r·ªóng)
    if (filters.search.trim()) {
      // L·ªçc v√† ch·ªâ gi·ªØ l·∫°i c√°c s·∫£n ph·∫©m c√≥ thu·ªôc t√≠nh 'name' (sau khi chuy·ªÉn sang ch·ªØ th∆∞·ªùng)
      // bao g·ªìm (includes) chu·ªói t·ª´ kh√≥a t√¨m ki·∫øm (sau khi lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn sang ch·ªØ th∆∞·ªùng).
      filtered = filtered.filter((p) =>
        p.name.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    // --- Logic Debouncing v√† c·∫≠p nh·∫≠t UI ---
    setIsSearching(true); // ƒê·∫∑t state 'isSearching' th√†nh true ƒë·ªÉ b√°o hi·ªáu r·∫±ng ƒëang c√≥ qu√° tr√¨nh l·ªçc/t√¨m ki·∫øm (c√≥ th·ªÉ hi·ªÉn th·ªã spinner ho·∫∑c hi·ªáu ·ª©ng).
    setShowNoResults(false); // ·∫®n th√¥ng b√°o "Kh√¥ng c√≥ k·∫øt qu·∫£" trong khi ƒëang x·ª≠ l√Ω t√¨m ki·∫øm m·ªõi.

    // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng "debounce". Logic c·∫≠p nh·∫≠t state 'filteredProducts' v√† 'isSearching'
    // s·∫Ω ch·ªâ ƒë∆∞·ª£c th·ª±c thi sau khi ng∆∞·ªùi d√πng ng·ª´ng g√µ ho·∫∑c thay ƒë·ªïi b·ªô l·ªçc trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh (500ms).
    // ƒêi·ªÅu n√†y gi√∫p gi·∫£m s·ªë l·∫ßn c·∫≠p nh·∫≠t UI kh√¥ng c·∫ßn thi·∫øt khi ng∆∞·ªùi d√πng g√µ nhanh li√™n t·ª•c v√†o √¥ t√¨m ki·∫øm.
    const timeout = setTimeout(() => {
      setFilteredProducts(filtered); // C·∫≠p nh·∫≠t state 'filteredProducts' v·ªõi danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc cu·ªëi c√πng.
      setIsSearching(false); // K·∫øt th√∫c tr·∫°ng th√°i ƒëang t√¨m ki·∫øm.
      // Sau khi qu√° tr√¨nh l·ªçc/t√¨m ki·∫øm ho√†n t·∫•t, ki·ªÉm tra xem danh s√°ch k·∫øt qu·∫£ ('filtered') c√≥ r·ªóng kh√¥ng.
      // N·∫øu r·ªóng, ƒë·∫∑t state 'showNoResults' th√†nh true ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p".
      setShowNoResults(filtered.length === 0);
      setCurrentPage(1); // Lu√¥n reset v·ªÅ trang 1 m·ªói khi √°p d·ª•ng b·ªô l·ªçc m·ªõi ho·∫∑c khi danh s√°ch s·∫£n ph·∫©m g·ªëc thay ƒë·ªïi.
    }, 500); // ƒê·ªô tr·ªÖ l√† 500 miliseconds.

    // H√†m cleanup cho effect n√†y: Ch·∫°y khi state 'filters' ho·∫∑c 'products' thay ƒë·ªïi (tr∆∞·ªõc khi effect m·ªõi ch·∫°y l·∫°i)
    // ho·∫∑c khi component unmount.
    // X√≥a b·ªè h·∫πn gi·ªù ƒë√£ t·∫°o (timeout) ƒë·ªÉ ngƒÉn h√†m callback b√™n trong setTimeout ch·∫°y
    // n·∫øu m·ªôt thay ƒë·ªïi kh√°c ƒë·∫øn tr∆∞·ªõc khi timeout c≈© k·∫øt th√∫c.
    return () => clearTimeout(timeout);
  }, [filters, products]); // M·∫£ng dependencies: Effect ch·∫°y l·∫°i m·ªói khi state 'filters' ho·∫∑c state 'products' thay ƒë·ªïi.

  // --- H√†m x·ª≠ l√Ω khi chuy·ªÉn trang (trong ph√¢n trang) ---
  // Nh·∫≠n s·ªë trang m·ªõi c·∫ßn chuy·ªÉn ƒë·∫øn ('page').
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ghi nh·ªõ h√†m n√†y. H√†m s·∫Ω ƒë∆∞·ª£c t·∫°o l·∫°i khi state 'filteredProducts' thay ƒë·ªïi.
  // ƒêi·ªÅu n√†y l√† c·∫ßn thi·∫øt v√¨ logic gi·ªõi h·∫°n s·ªë trang h·ª£p l·ªá ph·ª• thu·ªôc v√†o t·ªïng s·ªë trang, m√† t·ªïng s·ªë trang l·∫°i ph·ª• thu·ªôc v√†o 'filteredProducts'.
  const handlePageChange = useCallback(
    (page) => {
      // T√≠nh to√°n s·ªë trang m·ªõi, ƒë·∫£m b·∫£o n√≥ n·∫±m trong kho·∫£ng h·ª£p l·ªá t·ª´ 1 ƒë·∫øn t·ªïng s·ªë trang ('totalPages').
      // Math.max(1, page) ƒë·∫£m b·∫£o s·ªë trang kh√¥ng nh·ªè h∆°n 1.
      // Math.min(..., totalPages) ƒë·∫£m b·∫£o s·ªë trang kh√¥ng l·ªõn h∆°n t·ªïng s·ªë trang.
      const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE); // T√≠nh l·∫°i t·ªïng s·ªë trang (ph·ª• thu·ªôc v√†o filteredProducts)
      const newPage = Math.max(1, Math.min(page, totalPages));
      setCurrentPage(newPage); // C·∫≠p nh·∫≠t state 'currentPage' v·ªõi s·ªë trang m·ªõi ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n h·ª£p l·ªá.
    },
    [filteredProducts] // M·∫£ng dependencies: H√†m ph·ª• thu·ªôc v√†o state 'filteredProducts' (ƒë·ªÉ t√≠nh t·ªïng s·ªë trang).
  );

  // --- H√†m x·ª≠ l√Ω khi gi√° tr·ªã c·ªßa input t√¨m ki·∫øm ho·∫∑c input kh√°c trong filter-section thay ƒë·ªïi ---
  // Nh·∫≠n s·ª± ki·ªán thay ƒë·ªïi (change event 'e').
  const handleFilterChange = (e) => {
    const { name, value } = e.target; // L·∫•y thu·ªôc t√≠nh 'name' v√† 'value' c·ªßa input ƒë√£ thay ƒë·ªïi.
    // C·∫≠p nh·∫≠t state 'filters'. S·ª≠ d·ª•ng functional update ƒë·ªÉ ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t d·ª±a tr√™n gi√° tr·ªã tr∆∞·ªõc ƒë√≥ ('prev').
    // T·∫°o m·ªôt b·∫£n sao c·ªßa state 'filters' hi·ªán t·∫°i (...prev) v√† ghi ƒë√® l√™n thu·ªôc t√≠nh c√≥ t√™n [name] v·ªõi gi√° tr·ªã m·ªõi 'value'.
    setFilters((prev) => ({ ...prev, [name]: value }));
    // L∆∞u √Ω: Vi·ªác c·∫≠p nh·∫≠t state 'filters' s·∫Ω k√≠ch ho·∫°t effect hook th·ª© hai (useEffect([filters, products])) ƒë·ªÉ th·ª±c hi·ªán l·ªçc l·∫°i.
  };

  // --- H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt th∆∞∆°ng hi·ªáu t·ª´ b·ªô l·ªçc n√∫t ---
  // Nh·∫≠n t√™n th∆∞∆°ng hi·ªáu ('brand') ƒë∆∞·ª£c ch·ªçn.
  const handleBrandSelect = (brand) => {
    // C·∫≠p nh·∫≠t state 'filters'. ƒê·∫∑t l·∫°i ch·ªâ thu·ªôc t√≠nh 'brand' th√†nh t√™n th∆∞∆°ng hi·ªáu m·ªõi ƒë∆∞·ª£c ch·ªçn.
    setFilters((prev) => ({ ...prev, brand }));
    // Vi·ªác c·∫≠p nh·∫≠t state 'filters' n√†y c≈©ng s·∫Ω k√≠ch ho·∫°t effect hook th·ª© hai ƒë·ªÉ th·ª±c hi·ªán l·ªçc l·∫°i.
  };

  // --- H√†m x·ª≠ l√Ω s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° t·ª´ th·∫•p ƒë·∫øn cao ---
  const sortLowToHigh = () => {
    // T·∫°o m·ªôt b·∫£n sao c·ªßa m·∫£ng 'filteredProducts' hi·ªán t·∫°i ([...filteredProducts]).
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c .sort() ƒë·ªÉ s·∫Øp x·∫øp b·∫£n sao n√†y.
    // H√†m so s√°nh (a, b) => a.price - b.price s·∫Ω s·∫Øp x·∫øp tƒÉng d·∫ßn theo gi√° (a ƒë·ª©ng tr∆∞·ªõc b n·∫øu gi√° a nh·ªè h∆°n gi√° b).
    setFilteredProducts([...filteredProducts].sort((a, b) => a.price - b.price)); // C·∫≠p nh·∫≠t state 'filteredProducts' v·ªõi m·∫£ng ƒë√£ s·∫Øp x·∫øp.
    setCurrentPage(1); // Reset v·ªÅ trang 1 sau khi s·∫Øp x·∫øp.
  };

  // --- H√†m x·ª≠ l√Ω s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° t·ª´ cao ƒë·∫øn th·∫•p ---
  const sortHighToLow = () => {
    // T·∫°o m·ªôt b·∫£n sao c·ªßa m·∫£ng 'filteredProducts' hi·ªán t·∫°i ([...filteredProducts]).
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c .sort() ƒë·ªÉ s·∫Øp x·∫øp b·∫£n sao n√†y.
    // H√†m so s√°nh (a, b) => b.price - a.price s·∫Ω s·∫Øp x·∫øp gi·∫£m d·∫ßn theo gi√° (b ƒë·ª©ng tr∆∞·ªõc a n·∫øu gi√° b l·ªõn h∆°n gi√° a).
    setFilteredProducts([...filteredProducts].sort((a, b) => b.price - a.price)); // C·∫≠p nh·∫≠t state 'filteredProducts' v·ªõi m·∫£ng ƒë√£ s·∫Øp x·∫øp.
    setCurrentPage(1); // Reset v·ªÅ trang 1 sau khi s·∫Øp x·∫øp.
  };

  // --- H√†m x·ª≠ l√Ω reset l·∫°i t·∫•t c·∫£ c√°c b·ªô l·ªçc (th∆∞∆°ng hi·ªáu v√† t√¨m ki·∫øm) ---
  const resetFilters = () => {
    // ƒê·∫∑t l·∫°i state 'filters' v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ban ƒë·∫ßu ("T·∫•t c·∫£" th∆∞∆°ng hi·ªáu, t√¨m ki·∫øm r·ªóng).
    setFilters({ brand: "T·∫•t c·∫£", search: "" });
    setFilteredProducts(products); // ƒê·∫∑t l·∫°i danh s√°ch s·∫£n ph·∫©m hi·ªÉn th·ªã v·ªÅ to√†n b·ªô danh s√°ch g·ªëc ('products').
    setCurrentPage(1); // Reset v·ªÅ trang 1.
  };

  // --- T√≠nh to√°n c√°c gi√° tr·ªã d·∫´n xu·∫•t t·ª´ state ---
  // C√°c gi√° tr·ªã n√†y ƒë∆∞·ª£c t√≠nh to√°n m·ªói khi state li√™n quan thay ƒë·ªïi v√† component re-render.

  // T√≠nh t·ªïng s·ªë trang c·∫ßn thi·∫øt cho ph√¢n trang d·ª±a tr√™n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ l·ªçc v√† s·ªë s·∫£n ph·∫©m tr√™n m·ªói trang.
  // Math.ceil() ƒë·∫£m b·∫£o l√†m tr√≤n l√™n ƒë·ªÉ c√≥ ƒë·ªß trang cho nh·ªØng s·∫£n ph·∫©m l·∫ª.
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);
  // T√≠nh ch·ªâ s·ªë (index) b·∫Øt ƒë·∫ßu c·ªßa slice m·∫£ng 'filteredProducts' ƒë·ªÉ l·∫•y ra c√°c s·∫£n ph·∫©m cho trang hi·ªán t·∫°i.
  const startIndex = (currentPage - 1) * PRODUCTS_PER_PAGE;
  // T√≠nh ch·ªâ s·ªë (index) k·∫øt th√∫c (kh√¥ng bao g·ªìm) c·ªßa slice m·∫£ng 'filteredProducts'.
  const endIndex = startIndex + PRODUCTS_PER_PAGE;
  // L·∫•y ra m·∫£ng con ch·ª©a c√°c s·∫£n ph·∫©m ch·ªâ hi·ªÉn th·ªã tr√™n trang hi·ªán t·∫°i b·∫±ng ph∆∞∆°ng th·ª©c .slice().
  const currentProducts = filteredProducts.slice(startIndex, endIndex);

  // --- Render giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i loading v√† l·ªói ---

  // N·∫øu state 'isLoading' l√† true (ƒëang t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu), hi·ªÉn th·ªã giao di·ªán loading spinner.
  if (isLoading) {
    return (
      <div className="loading-container">
        {" "}
        {/* Container cho giao di·ªán loading */}
        <div className="loading-spinner"></div>{" "}
        {/* Bi·ªÉu t∆∞·ª£ng spinner quay */}
        <p className="loading-text">ƒêang t·∫£i...</p>{" "}
        {/* Th√¥ng b√°o "ƒêang t·∫£i..." */}
      </div>
    );
  }

  // N·∫øu state 'error' c√≥ gi√° tr·ªã (kh√°c null), hi·ªÉn th·ªã th√¥ng b√°o l·ªói.
  if (error) {
    return (
      <div className="status error">
        {" "}
        {/* Container cho th√¥ng b√°o l·ªói */}
        <p>‚ùå {error}</p>{" "}
        {/* Hi·ªÉn th·ªã n·ªôi dung th√¥ng b√°o l·ªói */}
        {/* N√∫t "Th·ª≠ l·∫°i", khi click s·∫Ω t·∫£i l·∫°i to√†n b·ªô trang tr√¨nh duy·ªát ƒë·ªÉ th·ª≠ fetch l·∫°i d·ªØ li·ªáu. */}
        <button onClick={() => window.location.reload()} className="retry-button">
          Th·ª≠ l·∫°i{" "}
          {/* N·ªôi dung n√∫t */}
        </button>
      </div>
    );
  }

  // --- Render giao di·ªán ch√≠nh c·ªßa trang s·∫£n ph·∫©m khi d·ªØ li·ªáu ƒë√£ t·∫£i xong v√† kh√¥ng c√≥ l·ªói ---
  // ƒê√¢y l√† ph·∫ßn giao di·ªán hi·ªÉn th·ªã sau khi qu√° tr√¨nh t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu ho√†n t·∫•t th√†nh c√¥ng.
  return (
    <main className="product-page">
      {" "}
      {/* Th·∫ª <main> bao b·ªçc n·ªôi dung ch√≠nh c·ªßa trang */}
      {/* Ph·∫ßn hi·ªÉn th·ªã Carousel (banner qu·∫£ng c√°o) ·ªü ƒë·∫ßu trang */}
      <div className="carousel-section">
        {/* S·ª≠ d·ª•ng component Slider t·ª´ react-slick. Thu·ªôc t√≠nh {...sliderSettings} √°p d·ª•ng t·∫•t c·∫£ c√°c c√†i ƒë·∫∑t ƒë√£ ƒë·ªãnh nghƒ©a tr∆∞·ªõc ƒë√≥. */}
        <Slider {...sliderSettings}>
          {/* L·∫∑p (map) qua m·∫£ng SLIDES (ch·ª©a d·ªØ li·ªáu cho c√°c banner) */}
          {SLIDES.map((slide, i) => (
            <Slide key={i} slide={slide} /> // Render component con Slide cho m·ªói banner. S·ª≠ d·ª•ng index l√†m key (an to√†n v√¨ m·∫£ng SLIDES c·ªë ƒë·ªãnh).
          ))}
        </Slider>
      </div>

      {/* Ti√™u ƒë·ªÅ ch√≠nh c·ªßa trang danh s√°ch s·∫£n ph·∫©m */}
      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1>{" "}
      {/* Ti√™u ƒë·ªÅ trang */}

      {/* Ph·∫ßn ch·ª©a c√°c b·ªô l·ªçc v√† s·∫Øp x·∫øp s·∫£n ph·∫©m */}
      <div className="filter-section">
        {" "}
        {/* Container cho c√°c b·ªô ƒëi·ªÅu khi·ªÉn l·ªçc v√† s·∫Øp x·∫øp */}
        {/* Input ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n */}
        <input
          type="text" // Ki·ªÉu input l√† text
          name="search" // T√™n c·ªßa input, d√πng ƒë·ªÉ c·∫≠p nh·∫≠t state 'filters'
          className="search-input" // Class CSS
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..." // Placeholder
          value={filters.search} // G√°n gi√° tr·ªã t·ª´ state 'filters.search' (Controlled Component)
          onChange={handleFilterChange} // G·∫Øn h√†m x·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi input.
          aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n" // Thu·ªôc t√≠nh h·ªó tr·ª£ kh·∫£ nƒÉng ti·∫øp c·∫≠n
        />
        {/* Component BrandFilter ƒë·ªÉ hi·ªÉn th·ªã c√°c n√∫t l·ªçc theo th∆∞∆°ng hi·ªáu */}
        <BrandFilter
          brands={BRANDS} // Truy·ªÅn danh s√°ch c√°c th∆∞∆°ng hi·ªáu c√≥ s·∫µn (t·ª´ h·∫±ng s·ªë)
          selectedBrand={filters.brand} // Truy·ªÅn th∆∞∆°ng hi·ªáu hi·ªán t·∫°i ƒëang ƒë∆∞·ª£c ch·ªçn t·ª´ state 'filters'
          onBrandSelect={handleBrandSelect} // Truy·ªÅn h√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt th∆∞∆°ng hi·ªáu t·ª´ b·ªô l·ªçc
        />
        {/* N√∫t ƒë·ªÉ s·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo gi√° t·ª´ th·∫•p ƒë·∫øn cao */}
        <button className="sort-button" onClick={sortLowToHigh}>
          Gi√° t·ª´ th·∫•p t·ªõi cao{" "}
          {/* N·ªôi dung n√∫t */}
        </button>
        {/* N√∫t ƒë·ªÉ s·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo gi√° t·ª´ cao ƒë·∫øn th·∫•p */}
        <button className="sort-button" onClick={sortHighToLow}>
          Gi√° t·ª´ cao t·ªõi th·∫•p{" "}
          {/* N·ªôi dung n√∫t */}
        </button>
      </div>

      {/* Khu v·ª±c hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ho·∫∑c c√°c th√¥ng b√°o tr·∫°ng th√°i kh√°c */}
      <div className="product-list">
        {" "}
        {/* Container ch√≠nh hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ho·∫∑c th√¥ng b√°o */}
        {/* Conditional Rendering: Hi·ªÉn th·ªã spinner n·∫øu ƒëang t√¨m ki·∫øm, th√¥ng b√°o "Kh√¥ng c√≥ k·∫øt qu·∫£" n·∫øu kh√¥ng t√¨m th·∫•y, ho·∫∑c l∆∞·ªõi s·∫£n ph·∫©m. */}
        {isSearching ? ( // N·∫øu state 'isSearching' l√† true
          <div className="loading-container">
            {" "}
            {/* Container cho spinner loading */}
            <div className="loading-spinner"></div>{" "}
            {/* Bi·ªÉu t∆∞·ª£ng spinner quay */}
            <p className="loading-text">ƒêang t·∫£i...</p>{" "}
            {/* Th√¥ng b√°o "ƒêang t·∫£i..." */}
          </div>
        ) : showNoResults ? ( // N·∫øu KH√îNG ƒëang t√¨m ki·∫øm V√Ä state 'showNoResults' l√† true (nghƒ©a l√† kh√¥ng c√≥ s·∫£n ph·∫©m n√†o kh·ªõp b·ªô l·ªçc)
          <div className="no-products-container">
            {" "}
            {/* Container th√¥ng b√°o kh√¥ng c√≥ k·∫øt qu·∫£ */}
            <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p</p>{" "}
            {/* Th√¥ng b√°o "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p" */}
            {/* N√∫t "X√≥a b·ªô l·ªçc", khi click s·∫Ω g·ªçi h√†m resetFilters ƒë·ªÉ ƒë·∫∑t l·∫°i t·∫•t c·∫£ c√°c b·ªô l·ªçc. */}
            <button onClick={resetFilters} className="reset-filters-button">
              <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc{" "}
              {/* N·ªôi dung n√∫t */}
            </button>
          </div>
        ) : (
          // N·∫øu KH√îNG ƒëang t√¨m ki·∫øm V√Ä state 'showNoResults' l√† false (nghƒ©a l√† c√≥ s·∫£n ph·∫©m sau khi l·ªçc)
          <div className="product-grid">
            {" "}
            {/* Container d·∫°ng l∆∞·ªõi ƒë·ªÉ hi·ªÉn th·ªã c√°c th·∫ª s·∫£n ph·∫©m */}
            {/* L·∫∑p (map) qua m·∫£ng 'currentProducts' (c√°c s·∫£n ph·∫©m ch·ªâ tr√™n trang hi·ªán t·∫°i)
                      ƒë·ªÉ render m·ªôt component ProductCard cho m·ªói s·∫£n ph·∫©m. */}
            {currentProducts.map((product) => (
              <ProductCard key={product.id} product={product} /> // Render component con ProductCard, truy·ªÅn ID s·∫£n ph·∫©m l√†m key v√† ƒë·ªëi t∆∞·ª£ng product l√†m prop.
            ))}
          </div>
        )}
      </div>

      {/* Hi·ªÉn th·ªã component Ph√¢n trang ch·ªâ khi t·ªïng s·ªë trang l·ªõn h∆°n 1 */}
      {totalPages > 1 && ( // Ki·ªÉm tra n·∫øu t·ªïng s·ªë trang (totalPages) l·ªõn h∆°n 1
        <Pagination
          currentPage={currentPage} // Truy·ªÅn state 'currentPage' l√†m prop cho Pagination
          totalPages={totalPages} // Truy·ªÅn bi·∫øn 'totalPages' ƒë√£ t√≠nh to√°n l√†m prop
          onPageChange={handlePageChange} // Truy·ªÅn h√†m x·ª≠ l√Ω chuy·ªÉn trang ('handlePageChange', ƒë√£ memoize) l√†m prop
        />
      )}
    </main>
  );
};

export default ProductPage; // Export component ProductPage l√†m default export ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü c√°c file kh√°c (th∆∞·ªùng l√† trong c·∫•u h√¨nh ƒë·ªãnh tuy·∫øn)