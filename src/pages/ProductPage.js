// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import React, { useEffect, useState, useCallback } from "react"; // C√°c hook c∆° b·∫£n c·ªßa React
import { Link } from "react-router-dom"; // Th∆∞ vi·ªán ƒëi·ªÅu h∆∞·ªõng trang
import "./ProductPage.css"; // File CSS cho trang s·∫£n ph·∫©m

// C√°c h·∫±ng s·ªë c·∫•u h√¨nh
const API_URL = `${process.env.PUBLIC_URL}/db.json`; // ƒê∆∞·ªùng d·∫´n file JSON ch·ª©a d·ªØ li·ªáu
const PRODUCTS_PER_PAGE = 8; // S·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã tr√™n m·ªói trang
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"]; // Danh s√°ch th∆∞∆°ng hi·ªáu ƒë·ªÉ l·ªçc

// H√†m fetch d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
const fetchProducts = async (signal) => {
  const response = await fetch(API_URL, { signal }); // G·ªçi API v·ªõi AbortSignal ƒë·ªÉ c√≥ th·ªÉ h·ªßy request
  if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!"); // B√°o l·ªói n·∫øu request kh√¥ng th√†nh c√¥ng
  const data = await response.json(); // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ JSON sang object
  return Array.isArray(data) ? data : data.products || []; // Tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m (x·ª≠ l√Ω c·∫£ 2 tr∆∞·ªùng h·ª£p data l√† array ho·∫∑c object)
};

// Component hi·ªÉn th·ªã th·∫ª s·∫£n ph·∫©m
const ProductCard = ({ product }) => {
  // Ki·ªÉm tra d·ªØ li·ªáu s·∫£n ph·∫©m h·ª£p l·ªá tr∆∞·ªõc khi hi·ªÉn th·ªã
  if (!product || !product.id || !product.name || !product.image || typeof product.price !== "number") {
    console.error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", product); // Log l·ªói ra console
    return null; // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
  }

  return (
    <Link to={`/products/${product.id}`} className="product-card-link" aria-label={`Xem chi ti·∫øt ${product.name}`}>
      <div className="product-card">
        <img 
          src={product.image} 
          alt={product.name} 
          className="product-image" 
          loading="lazy" // T·ªëi ∆∞u t·∫£i ·∫£nh
        />
        <h3>{product.name}</h3> {/* T√™n s·∫£n ph·∫©m */}
        <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p> {/* Gi√° s·∫£n ph·∫©m ƒë·ªãnh d·∫°ng VNƒê */}
      </div>
    </Link>
  );
};

// Component ph√¢n trang
const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  // Ki·ªÉm tra props truy·ªÅn v√†o c√≥ h·ª£p l·ªá kh√¥ng
  if (typeof currentPage !== "number" || typeof totalPages !== "number" || typeof onPageChange !== "function") {
    console.error("Props ph√¢n trang kh√¥ng h·ª£p l·ªá"); // Log l·ªói n·∫øu props kh√¥ng ƒë√∫ng
    return null; // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu props kh√¥ng h·ª£p l·ªá
  }

  return (
    <div className="pagination">
      <button
        className="pagination-button"
        onClick={() => onPageChange(currentPage - 1)} // Chuy·ªÉn v·ªÅ trang tr∆∞·ªõc
        disabled={currentPage === 1} // Disable n√∫t n·∫øu ƒëang ·ªü trang ƒë·∫ßu
      >
        Trang tr∆∞·ªõc
      </button>
      <span className="pagination-current">
        Trang {currentPage}/{totalPages} {/* Hi·ªÉn th·ªã s·ªë trang hi·ªán t·∫°i/t·ªïng s·ªë trang */}
      </span>
      <button
        className="pagination-button"
        onClick={() => onPageChange(currentPage + 1)} // Chuy·ªÉn ƒë·∫øn trang sau
        disabled={currentPage === totalPages} // Disable n√∫t n·∫øu ƒëang ·ªü trang cu·ªëi
      >
        Trang sau
      </button>
    </div>
  );
};

// Component b·ªô l·ªçc th∆∞∆°ng hi·ªáu
const BrandFilter = ({ brands, selectedBrand, onBrandSelect }) => {
  // Ki·ªÉm tra brands c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
  if (!Array.isArray(brands)) {
    console.error("Danh s√°ch th∆∞∆°ng hi·ªáu ph·∫£i l√† m·∫£ng");
    return null; // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu brands kh√¥ng ph·∫£i m·∫£ng
  }

  return (
    <div className="brand-buttons">
      {brands.map((brand) => ( // Render t·ª´ng n√∫t l·ªçc th∆∞∆°ng hi·ªáu
        <button
          key={brand} // Key duy nh·∫•t cho m·ªói n√∫t
          className={`brand-button ${selectedBrand === brand ? "active" : ""}`} // Th√™m class active n·∫øu ƒë∆∞·ª£c ch·ªçn
          onClick={() => onBrandSelect(brand)} // X·ª≠ l√Ω khi ch·ªçn th∆∞∆°ng hi·ªáu
        >
          {brand} {/* T√™n th∆∞∆°ng hi·ªáu */}
        </button>
      ))}
    </div>
  );
};

// Component ch√≠nh - Trang s·∫£n ph·∫©m
const ProductPage = () => {
  // State qu·∫£n l√Ω d·ªØ li·ªáu v√† tr·∫°ng th√°i
  const [products, setProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m g·ªëc
  const [filteredProducts, setFilteredProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m sau khi l·ªçc
  const [status, setStatus] = useState({ loading: true, error: null }); // Tr·∫°ng th√°i loading/error
  const [currentPage, setCurrentPage] = useState(1); // Trang hi·ªán t·∫°i
  const [filters, setFilters] = useState({ // B·ªô l·ªçc
    brand: "T·∫•t c·∫£", // L·ªçc theo th∆∞∆°ng hi·ªáu
    search: "" // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
  });

  // Effect l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m khi component mount
  useEffect(() => {
    const controller = new AbortController(); // T·∫°o AbortController ƒë·ªÉ h·ªßy request khi c·∫ßn
    let isMounted = true; // Bi·∫øn ki·ªÉm tra component c√≥ c√≤n mounted kh√¥ng

    const loadProducts = async () => {
      try {
        const productList = await fetchProducts(controller.signal); // G·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m
        if (isMounted) { // Ch·ªâ c·∫≠p nh·∫≠t state n·∫øu component v·∫´n mounted
          setProducts(productList); // L∆∞u danh s√°ch s·∫£n ph·∫©m
          setStatus({ loading: false, error: null }); // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
        }
      } catch (err) {
        if (isMounted && err.name !== "AbortError") { // B·ªè qua l·ªói do h·ªßy request
          setStatus({ loading: false, error: err.message }); // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
        }
      }
    };

    loadProducts(); // G·ªçi h√†m l·∫•y d·ªØ li·ªáu
    return () => { // Cleanup function khi component unmount
      isMounted = false; // ƒê√°nh d·∫•u component ƒë√£ unmount
      controller.abort(); // H·ªßy request n·∫øu ƒëang ch·∫°y
    };
  }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  // Effect l·ªçc s·∫£n ph·∫©m khi filters ho·∫∑c products thay ƒë·ªïi
  useEffect(() => {
    let filtered = [...products]; // T·∫°o b·∫£n sao c·ªßa danh s√°ch s·∫£n ph·∫©m
    
    // L·ªçc theo th∆∞∆°ng hi·ªáu n·∫øu kh√¥ng ch·ªçn "T·∫•t c·∫£"
    if (filters.brand !== "T·∫•t c·∫£") {
      filtered = filtered.filter(product => product.brand === filters.brand);
    }
    
    // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm n·∫øu c√≥
    if (filters.search.trim()) {
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(filters.search.toLowerCase())
      );
    }
    
    setFilteredProducts(filtered); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
    setCurrentPage(1); // Reset v·ªÅ trang 1 sau khi l·ªçc
  }, [filters, products]); // Ch·∫°y l·∫°i khi filters ho·∫∑c products thay ƒë·ªïi

  // T√≠nh to√°n s·ªë trang v√† s·∫£n ph·∫©m hi·ªán t·∫°i
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE); // T√≠nh t·ªïng s·ªë trang
  const currentProducts = filteredProducts.slice( // L·∫•y danh s√°ch s·∫£n ph·∫©m cho trang hi·ªán t·∫°i
    (currentPage - 1) * PRODUCTS_PER_PAGE,
    currentPage * PRODUCTS_PER_PAGE
  );

  // H√†m x·ª≠ l√Ω chuy·ªÉn trang (ƒë∆∞·ª£c memoize ƒë·ªÉ tr√°nh t·∫°o l·∫°i h√†m kh√¥ng c·∫ßn thi·∫øt)
  const handlePageChange = useCallback((page) => {
    setCurrentPage(Math.max(1, Math.min(page, totalPages))); // ƒê·∫£m b·∫£o trang n·∫±m trong kho·∫£ng h·ª£p l·ªá
  }, [totalPages]); // Ch·ªâ t·∫°o l·∫°i h√†m khi totalPages thay ƒë·ªïi

  // H√†m x·ª≠ l√Ω ch·ªçn th∆∞∆°ng hi·ªáu (ƒë∆∞·ª£c memoize)
  const handleBrandSelect = useCallback((brand) => {
    setFilters(prev => ({ ...prev, brand })); // C·∫≠p nh·∫≠t filter brand
  }, []); // Ch·ªâ t·∫°o l·∫°i h√†m m·ªôt l·∫ßn

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm (ƒë∆∞·ª£c memoize)
  const handleSearchChange = useCallback((e) => {
    setFilters(prev => ({ ...prev, search: e.target.value })); // C·∫≠p nh·∫≠t search term
  }, []); // Ch·ªâ t·∫°o l·∫°i h√†m m·ªôt l·∫ßn

  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  if (status.loading) {
    return (
      <div className="status loading">
        <p>‚è≥ ƒêang t·∫£i s·∫£n ph·∫©m...</p> {/* Th√¥ng b√°o loading */}
      </div>
    );
  }

  // Hi·ªÉn th·ªã tr·∫°ng th√°i l·ªói
  if (status.error) {
    return (
      <div className="status error">
        <p>‚ùå {status.error}</p> {/* Th√¥ng b√°o l·ªói */}
        <button onClick={() => window.location.reload()} className="retry-button">
          Th·ª≠ l·∫°i {/* N√∫t reload trang */}
        </button>
      </div>
    );
  }

  // Render giao di·ªán ch√≠nh
  return (
    <main className="product-page">
      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1> {/* Ti√™u ƒë·ªÅ trang */}
      
      {/* Ph·∫ßn b·ªô l·ªçc */}
      <div className="filter-section">
        {/* √î t√¨m ki·∫øm s·∫£n ph·∫©m */}
        <input
          type="text"
          className="search-input"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          value={filters.search}
          onChange={handleSearchChange} // X·ª≠ l√Ω khi thay ƒë·ªïi n·ªôi dung t√¨m ki·∫øm
          aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m" // M√¥ t·∫£ cho accessibility
        />
        
        {/* B·ªô l·ªçc th∆∞∆°ng hi·ªáu */}
        <BrandFilter 
          brands={BRANDS} 
          selectedBrand={filters.brand} 
          onBrandSelect={handleBrandSelect} 
        />
      </div>
      
      {/* Danh s√°ch s·∫£n ph·∫©m */}
      <div className="product-list">
        {currentProducts.length > 0 ? ( // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m n√†o kh√¥ng
          currentProducts.map(product => ( // Render danh s√°ch s·∫£n ph·∫©m
            <ProductCard key={product.id} product={product} />
          ))
        ) : (
          // Hi·ªÉn th·ªã khi kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p
          <div className="no-products-container">
            <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm</p>
            <button 
              onClick={() => setFilters({ brand: "T·∫•t c·∫£", search: "" })} // Reset b·ªô l·ªçc
              className="reset-filters-button"
            >
              <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc
            </button>
          </div>
        )}
      </div>
      
      {/* Hi·ªÉn th·ªã ph√¢n trang n·∫øu c√≥ nhi·ªÅu h∆°n 1 trang */}
      {totalPages > 1 && (
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        />
      )}
    </main>
  );
};

export default ProductPage; // Xu·∫•t component ƒë·ªÉ s·ª≠ d·ª•ng