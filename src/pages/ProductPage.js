import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import "./ProductPage.css";

// --- H·∫∞NG S·ªê ---
const API_URL = process.env.PUBLIC_URL + "/db.json";
const PRODUCTS_PER_PAGE = 6;
const SEARCH_DEBOUNCE = 500;
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"];
const SLIDES = [
  {
    image: "https://cdn.tgdd.vn/Products/Images/42/329149/iphone-16-pro-max-sa-mac-thumb-1-600x600.jpg",
    title: "iPhone 16 Pro Max",
    subtitle: "Thi·∫øt k·∫ø Titan tuy·ªát ƒë·∫πp.",
    features: ["Tr·∫£ g√≥p l√™n ƒë·∫øn 3 TRI·ªÜU", "Kh√°ch h√†ng m·ªõi GI·∫¢M 300K", "G√≥p 12 Th√°ng t·ª´ 76K/Ng√†y"],
    link: "/products/4",
    buttonText: "Mua ngay",
  },
  {
    image: "https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/d/i/dien-thoai-samsung-galaxy-s25-ultra_1__3.png",
    title: "Samsung Galaxy S25 Ultra",
    subtitle: "C√¥ng ngh·ªá AI ti√™n ti·∫øn.",
    features: ["Gi·∫£m ngay 2 TRI·ªÜU", "T·∫∑ng k√®m s·∫°c nhanh 45W", "B·∫£o h√†nh ch√≠nh h√£ng 2 nƒÉm"],
    link: "/products/1",
    buttonText: "Mua ngay",
  },
  {
    image: "https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/d/i/dien-thoai-xiaomi-15-ultra_12_.png",
    title: "Xiaomi 15 Ultra",
    subtitle: "Camera 200MP Leica ƒë·ªânh cao.",
    features: ["Tr·∫£ g√≥p 0% l√£i su·∫•t", "Gi·∫£m 500K khi thanh to√°n online", "T·∫∑ng tai nghe Xiaomi Buds 4"],
    link: "/products/3",
    buttonText: "Mua ngay",
  },
];

// --- H√ÄM TI·ªÜN √çCH ---
/**
 * L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ API
 * @param {AbortSignal} signal - T√≠n hi·ªáu ƒë·ªÉ h·ªßy fetch
 * @returns {Promise<Array>} Danh s√°ch s·∫£n ph·∫©m
 */
const fetchProducts = async (signal) => {
  const response = await fetch(API_URL, { signal });
  if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!");
  const data = await response.json();
  return Array.isArray(data) ? data : data.products || [];
};

// --- HOOK T√ôY CH·ªàNH ---
/**
 * Hook ƒë·ªÉ tr√¨ ho√£n gi√° tr·ªã (debounce)
 * @param {*} value - Gi√° tr·ªã c·∫ßn tr√¨ ho√£n
 * @param {number} delay - Th·ªùi gian tr√¨ ho√£n (ms)
 * @returns {*} Gi√° tr·ªã ƒë√£ tr√¨ ho√£n
 */
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(timer);
  }, [value, delay]);
  return debouncedValue;
};

// --- TH√ÄNH PH·∫¶N CON ---
/**
 * Hi·ªÉn th·ªã m·ªôt s·∫£n ph·∫©m
 * @param {Object} props - Props ch·ª©a th√¥ng tin s·∫£n ph·∫©m
 */
const ProductCard = React.memo(({ product }) => {
  if (!product?.id || !product.name || !product.image || typeof product.price !== "number") {
    console.error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", product);
    return null;
  }
  return (
    <div className="product-card">
      <Link to={`/products/${product.id}`} aria-label={`Xem chi ti·∫øt ${product.name}`}>
        <img src={product.image} alt={product.name} className="product-image" loading="lazy" />
      </Link>
      <h3>{product.name}</h3>
      <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p>
      <Link to={`/products/${product.id}`} className="view-details-button" aria-label={`Xem chi ti·∫øt ${product.name}`}>
        Xem chi ti·∫øt
      </Link>
    </div>
  );
});

/**
 * Hi·ªÉn th·ªã ph√¢n trang
 * @param {Object} props - Props ch·ª©a trang hi·ªán t·∫°i, t·ªïng s·ªë trang, v√† h√†m thay ƒë·ªïi trang
 */
const Pagination = React.memo(({ currentPage, totalPages, onPageChange }) => {
  if (totalPages <= 1) return null;
  return (
    <div className="pagination" role="navigation">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="pagination-button"
        aria-label="Trang tr∆∞·ªõc"
      >
        Trang tr∆∞·ªõc
      </button>
      <span className="pagination-current">Trang {currentPage}</span>
      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="pagination-button"
        aria-label="Trang sau"
      >
        Trang sau
      </button>
    </div>
  );
});

/**
 * Hi·ªÉn th·ªã b·ªô l·ªçc th∆∞∆°ng hi·ªáu
 * @param {Object} props - Props ch·ª©a danh s√°ch th∆∞∆°ng hi·ªáu, th∆∞∆°ng hi·ªáu ƒë√£ ch·ªçn, v√† h√†m ch·ªçn th∆∞∆°ng hi·ªáu
 */
const BrandFilter = React.memo(({ brands, selectedBrand, onBrandSelect }) => (
  <div className="brand-buttons">
    {brands.map((brand) => (
      <button
        key={brand}
        className={`brand-button ${selectedBrand === brand ? "active" : ""}`}
        onClick={() => onBrandSelect(brand)}
        aria-pressed={selectedBrand === brand}
      >
        {brand}
      </button>
    ))}
  </div>
));

/**
 * Hi·ªÉn th·ªã slide qu·∫£ng c√°o
 * @param {Object} props - Props ch·ª©a th√¥ng tin slide
 */
const Slide = React.memo(({ slide }) => (
  <div className="slide">
    <div className="slide-content">
      <div className="slide-text">
        <h2>{slide.title}</h2>
        <h3>{slide.subtitle}</h3>
        <ul>
          {slide.features.map((feature, i) => (
            <li key={i}>{feature}</li>
          ))}
        </ul>
      </div>
      <div className="slide-image">
        <img src={slide.image} alt={slide.title} loading="lazy" />
      </div>
      <Link to={slide.link} className="slide-button">
        {slide.buttonText}
      </Link>
    </div>
  </div>
));

/**
 * Hi·ªÉn th·ªã ph·∫ßn b·ªô l·ªçc
 * @param {Object} props - Props ch·ª©a b·ªô l·ªçc, c√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán
 */
const FilterSection = ({ filters, onFilterChange, onBrandSelect, onSortLowToHigh, onSortHighToLow, onResetFilters }) => (
  <div className="filter-section">
    <input
      type="text"
      name="search"
      value={filters.search}
      onChange={onFilterChange}
      className="search-input"
      placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
      aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n"
    />
    <BrandFilter brands={BRANDS} selectedBrand={filters.brand} onBrandSelect={onBrandSelect} />
    <button className="sort-button" onClick={onSortLowToHigh} aria-label="S·∫Øp x·∫øp gi√° t·ª´ th·∫•p t·ªõi cao">
      Gi√° t·ª´ th·∫•p t·ªõi cao
    </button>
    <button className="sort-button" onClick={onSortHighToLow} aria-label="S·∫Øp x·∫øp gi√° t·ª´ cao t·ªõi th·∫•p">
      Gi√° t·ª´ cao t·ªõi th·∫•p
    </button>
    {(filters.brand !== "T·∫•t c·∫£" || filters.search.trim()) && (
      <button onClick={onResetFilters} className="reset-filters-button" aria-label="X√≥a t·∫•t c·∫£ b·ªô l·ªçc">
        <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc
      </button>
    )}
  </div>
);

/**
 * Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
 * @param {Object} props - Props ch·ª©a tr·∫°ng th√°i t·∫£i, t√¨m ki·∫øm, k·∫øt qu·∫£, v√† danh s√°ch s·∫£n ph·∫©m
 */
const ProductList = ({ isLoading, isSearching, showNoResults, currentProducts }) => (
  <div className="product-list">
    {isSearching && !isLoading ? (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">ƒêang x·ª≠ l√Ω...</p>
      </div>
    ) : showNoResults ? (
      <div className="no-products-container">
        <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p</p>
      </div>
    ) : (
      <div className="product-grid">
        {currentProducts.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    )}
  </div>
);

// --- TH√ÄNH PH·∫¶N CH√çNH ---
/**
 * Trang danh s√°ch s·∫£n ph·∫©m
 */
const ProductPage = () => {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState({ brand: "T·∫•t c·∫£", search: "" });
  const [isSearching, setIsSearching] = useState(false);
  const [showNoResults, setShowNoResults] = useState(false);

  const debouncedFilters = useDebounce(filters, SEARCH_DEBOUNCE);

  const sliderSettings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 3000,
    arrows: true,
  };

  // L·∫•y s·∫£n ph·∫©m khi mount
  useEffect(() => {
    const controller = new AbortController();
    const loadProducts = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await fetchProducts(controller.signal);
        setProducts(data);
        setFilteredProducts(data);
      } catch (err) {
        if (err.name !== "AbortError") {
          setError(err.message || "L·ªói khi t·∫£i d·ªØ li·ªáu.");
          setProducts([]);
          setFilteredProducts([]);
          setShowNoResults(true);
        }
      } finally {
        setIsLoading(false);
      }
    };
    loadProducts();
    return () => controller.abort();
  }, []);

  // L·ªçc v√† s·∫Øp x·∫øp s·∫£n ph·∫©m
  useEffect(() => {
    if (isLoading) return;
    setIsSearching(true);
    const filtered = products
      .filter((p) => (debouncedFilters.brand === "T·∫•t c·∫£" ? true : p.brand === debouncedFilters.brand))
      .filter((p) =>
        debouncedFilters.search.trim()
          ? p.name.toLowerCase().includes(debouncedFilters.search.toLowerCase().trim())
          : true
      );
    setFilteredProducts(filtered);
    setIsSearching(false);
    setShowNoResults(filtered.length === 0);
    setCurrentPage(1);
  }, [debouncedFilters, products, isLoading]);

  // X·ª≠ l√Ω s·ª± ki·ªán
  const handlePageChange = (page) => {
    const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);
    setCurrentPage(Math.min(Math.max(page, 1), totalPages));
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const handleBrandSelect = (brand) => {
    setFilters((prev) => ({ ...prev, brand }));
  };

  const sortProducts = (sortType) => {
    const sorted = [...filteredProducts].sort((a, b) =>
      sortType === "lowToHigh" ? a.price - b.price : b.price - a.price
    );
    setFilteredProducts(sorted);
    setCurrentPage(1);
  };

  const resetFilters = () => {
    setFilters({ brand: "T·∫•t c·∫£", search: "" });
  };

  // Ph√¢n trang
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);
  const startIndex = (currentPage - 1) * PRODUCTS_PER_PAGE;
  const currentProducts = filteredProducts.slice(startIndex, startIndex + PRODUCTS_PER_PAGE);

  // Tr·∫°ng th√°i hi·ªÉn th·ªã
  if (isLoading && filteredProducts.length === 0 && !error) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
      </div>
    );
  }

  if (error && filteredProducts.length === 0) {
    return (
      <div className="status error">
        <p>‚ùå {error}</p>
        <button onClick={() => window.location.reload()} className="retry-button" aria-label="Th·ª≠ l·∫°i t·∫£i l·∫°i trang">
          Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  return (
    <main className="product-page">
      <div className="carousel-section">
        <Slider {...sliderSettings}>
          {SLIDES.map((slide, i) => (
            <Slide key={i} slide={slide} />
          ))}
        </Slider>
      </div>
      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1>
      <FilterSection
        filters={filters}
        onFilterChange={handleFilterChange}
        onBrandSelect={handleBrandSelect}
        onSortLowToHigh={() => sortProducts("lowToHigh")}
        onSortHighToLow={() => sortProducts("highToLow")}
        onResetFilters={resetFilters}
      />
      <ProductList
        isLoading={isLoading}
        isSearching={isSearching}
        showNoResults={showNoResults}
        currentProducts={currentProducts}
      />
      {filteredProducts.length > 0 && totalPages > 1 && (
        <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />
      )}
    </main>
  );
};

export default ProductPage;