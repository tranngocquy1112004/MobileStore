import React, { useEffect, useState, useCallback } from "react";
import { Link } from "react-router-dom";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css"; // CSS c·∫•u h√¨nh cho slider
import "slick-carousel/slick/slick-theme.css"; // CSS theme cho slider
import "./ProductPage.css"; // CSS ri√™ng c·ªßa trang s·∫£n ph·∫©m

// --- H·∫∞NG S·ªê ---
// ƒê∆∞·ªùng d·∫´n API ƒë·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ file JSON
const API_URL = process.env.PUBLIC_URL + "/db.json";

// C·∫•u h√¨nh s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã m·ªói trang
const PRODUCTS_PER_PAGE = 6;

// Danh s√°ch th∆∞∆°ng hi·ªáu ƒë·ªÉ l·ªçc s·∫£n ph·∫©m
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "Apple", "Samsung"];

// Th·ªùi gian tr·ªÖ cho debounce khi t√¨m ki·∫øm (milliseconds)
const SEARCH_DEBOUNCE = 500;

// D·ªØ li·ªáu slide qu·∫£ng c√°o ·ªü ƒë·∫ßu trang
const SLIDES = [
  {
    image: "https://cdn.tgdd.vn/Products/Images/42/329149/iphone-16-pro-max-sa-mac-thumb-1-600x600.jpg",
    title: "iPhone 16 Pro Max",
    subtitle: "Thi·∫øt k·∫ø Titan tuy·ªát ƒë·∫πp.",
    features: [
      "Tr·∫£ g√≥p l√™n ƒë·∫øn 3 TRI·ªÜU",
      "Kh√°ch h√†ng m·ªõi GI·∫¢M 300K",
      "G√≥p 12 Th√°ng t·ª´ 76K/Ng√†y",
    ],
    link: "/products/4",
    buttonText: "Mua ngay",
  },
  {
    image:
      "https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/d/i/dien-thoai-samsung-galaxy-s25-ultra_1__3.png",
    title: "Samsung Galaxy S25 Ultra",
    subtitle: "C√¥ng ngh·ªá AI ti√™n ti·∫øn.",
    features: [
      "Gi·∫£m ngay 2 TRI·ªÜU",
      "T·∫∑ng k√®m s·∫°c nhanh 45W",
      "B·∫£o h√†nh ch√≠nh h√£ng 2 nƒÉm",
    ],
    link: "/products/1",
    buttonText: "Mua ngay",
  },
  {
    image:
      "https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/d/i/dien-thoai-xiaomi-15-ultra_12_.png",
    title: "Xiaomi 15 Ultra",
    subtitle: "Camera 200MP Leica ƒë·ªânh cao.",
    features: [
      "Tr·∫£ g√≥p 0% l√£i su·∫•t",
      "Gi·∫£m 500K khi thanh to√°n online",
      "T·∫∑ng tai nghe Xiaomi Buds 4",
    ],
    link: "/products/3",
    buttonText: "Mua ngay",
  },
];

// --- H√ÄM TI·ªÜN √çCH ---

/**
 * H√†m l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
 * @param {AbortSignal} signal - T√≠n hi·ªáu ƒë·ªÉ hu·ª∑ fetch khi c·∫ßn
 * @returns {Promise<Array>} Danh s√°ch s·∫£n ph·∫©m
 */
const fetchProducts = async (signal) => {
  const response = await fetch(API_URL, { signal });
  
  if (!response.ok) {
    throw new Error("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!");
  }
  
  const data = await response.json();
  return Array.isArray(data) ? data : data.products || [];
};

// --- COMPONENTS CON ---

/**
 * Component hi·ªÉn th·ªã th·∫ª s·∫£n ph·∫©m ƒë∆°n l·∫ª
 * @param {Object} props - Props c·ªßa component
 * @param {Object} props.product - Th√¥ng tin s·∫£n ph·∫©m c·∫ßn hi·ªÉn th·ªã
 */
const ProductCard = React.memo(({ product }) => {
  // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
  if (!product?.id || !product.name || !product.image || typeof product.price !== "number") {
    console.error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", product);
    return null;
  }

  return (
    <div className="product-card">
      <Link to={`/products/${product.id}`} aria-label={`Xem chi ti·∫øt ${product.name}`}>
        <img
          src={product.image}
          alt={product.name}
          className="product-image"
          loading="lazy" // Lazy load ·∫£nh ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng
        />
      </Link>
      <h3>{product.name}</h3>
      <p className="price">üí∞ {product.price.toLocaleString("vi-VN")} VNƒê</p>
      <Link
        to={`/products/${product.id}`}
        className="view-details-button"
        aria-label={`Xem chi ti·∫øt ${product.name}`}
      >
        Xem chi ti·∫øt
      </Link>
    </div>
  );
});

/**
 * Component hi·ªÉn th·ªã ph√¢n trang
 * @param {Object} props - Props c·ªßa component
 * @param {number} props.currentPage - Trang hi·ªán t·∫°i
 * @param {number} props.totalPages - T·ªïng s·ªë trang
 * @param {Function} props.onPageChange - H√†m x·ª≠ l√Ω khi chuy·ªÉn trang
 */
const Pagination = React.memo(({ currentPage, totalPages, onPageChange }) => {
  // ·∫®n ph√¢n trang n·∫øu ch·ªâ c√≥ 1 trang
  if (totalPages <= 1) return null;

  return (
    <div className="pagination">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="pagination-button"
        aria-label="Trang tr∆∞·ªõc"
      >
        Trang tr∆∞·ªõc
      </button>
      <span className="pagination-current">Trang {currentPage}</span>
      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="pagination-button"
        aria-label="Trang sau"
      >
        Trang sau
      </button>
    </div>
  );
});

/**
 * Component hi·ªÉn th·ªã b·ªô l·ªçc th∆∞∆°ng hi·ªáu
 * @param {Object} props - Props c·ªßa component
 * @param {Array} props.brands - Danh s√°ch th∆∞∆°ng hi·ªáu
 * @param {string} props.selectedBrand - Th∆∞∆°ng hi·ªáu ƒëang ƒë∆∞·ª£c ch·ªçn
 * @param {Function} props.onBrandSelect - H√†m x·ª≠ l√Ω khi ch·ªçn th∆∞∆°ng hi·ªáu
 */
const BrandFilter = React.memo(({ brands, selectedBrand, onBrandSelect }) => (
  <div className="brand-buttons">
    {brands.map((brand) => (
      <button
        key={brand}
        className={`brand-button ${selectedBrand === brand ? "active" : ""}`}
        onClick={() => onBrandSelect(brand)}
        aria-pressed={selectedBrand === brand}
      >
        {brand}
      </button>
    ))}
  </div>
));

/**
 * Component hi·ªÉn th·ªã m·ªôt slide trong carousel
 * @param {Object} props - Props c·ªßa component
 * @param {Object} props.slide - Th√¥ng tin slide c·∫ßn hi·ªÉn th·ªã
 */
const Slide = React.memo(({ slide }) => (
  <div className="slide">
    <div className="slide-content">
      <div className="slide-text">
        <h2>{slide.title}</h2>
        <h3>{slide.subtitle}</h3>
        <ul>
          {slide.features.map((feature, i) => (
            <li key={i}>{feature}</li>
          ))}
        </ul>
      </div>
      <div className="slide-image">
        <img src={slide.image} alt={slide.title} loading="lazy" />
      </div>
      <Link to={slide.link} className="slide-button">
        {slide.buttonText}
      </Link>
    </div>
  </div>
));

/**
 * Component ch√≠nh trang s·∫£n ph·∫©m
 */
const ProductPage = () => {
  // --- STATE MANAGEMENT ---
  
  // Danh s√°ch s·∫£n ph·∫©m g·ªëc t·ª´ API
  const [products, setProducts] = useState([]);
  
  // Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l·ªçc/t√¨m ki·∫øm ƒë·ªÉ hi·ªÉn th·ªã
  const [filteredProducts, setFilteredProducts] = useState([]);
  
  // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  const [isLoading, setIsLoading] = useState(true);
  
  // L·ªói khi t·∫£i d·ªØ li·ªáu n·∫øu c√≥
  const [error, setError] = useState(null);
  
  // Trang hi·ªán t·∫°i trong ph√¢n trang
  const [currentPage, setCurrentPage] = useState(1);
  
  // B·ªô l·ªçc g·ªìm th∆∞∆°ng hi·ªáu v√† t·ª´ kho√° t√¨m ki·∫øm
  const [filters, setFilters] = useState({ brand: "T·∫•t c·∫£", search: "" });
  
  // Tr·∫°ng th√°i ƒëang l·ªçc/t√¨m ki·∫øm
  const [isSearching, setIsSearching] = useState(false);
  
  // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ k·∫øt qu·∫£
  const [showNoResults, setShowNoResults] = useState(false);

  // --- C·∫§U H√åNH SLIDER ---
  const sliderSettings = {
    dots: true,            // Hi·ªÉn th·ªã ƒëi·ªÉm ƒëi·ªÅu h∆∞·ªõng
    infinite: true,        // L·∫∑p v√¥ h·∫°n
    speed: 500,            // T·ªëc ƒë·ªô animation (ms)
    slidesToShow: 1,       // S·ªë slide hi·ªÉn th·ªã c√πng l√∫c
    slidesToScroll: 1,     // S·ªë slide chuy·ªÉn m·ªói l·∫ßn
    autoplay: true,        // T·ª± ƒë·ªông chuy·ªÉn slide
    autoplaySpeed: 3000,   // Th·ªùi gian m·ªói slide (ms)
    arrows: true,          // Hi·ªÉn th·ªã n√∫t ƒëi·ªÅu h∆∞·ªõng
  };

  // --- EFFECTS ---

  /**
   * Effect t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m khi component mount
   */
  useEffect(() => {
    // T·∫°o controller ƒë·ªÉ c√≥ th·ªÉ hu·ª∑ request khi unmount
    const controller = new AbortController();
    const signal = controller.signal;

    const loadProducts = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
        const data = await fetchProducts(signal);
        setProducts(data);
        setFilteredProducts(data);
      } catch (err) {
        // B·ªè qua l·ªói AbortError khi component unmount
        if (err.name !== "AbortError") {
          setError(err.message || "L·ªói khi t·∫£i d·ªØ li·ªáu.");
          setProducts([]);
          setFilteredProducts([]);
          setShowNoResults(true);
        }
      } finally {
        setIsLoading(false);
      }
    };

    loadProducts();

    // Cleanup: hu·ª∑ request khi unmount
    return () => controller.abort();
  }, []);

  /**
   * Effect l·ªçc s·∫£n ph·∫©m khi filters ho·∫∑c products thay ƒë·ªïi
   * √Åp d·ª•ng debounce ƒë·ªÉ tr√°nh l·ªçc qu√° nhi·ªÅu l·∫ßn
   */
  useEffect(() => {
    // B·ªè qua n·∫øu ƒëang t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    if (isLoading) return;

    setIsSearching(true);
    setShowNoResults(false);

    // Debounce 500ms ƒë·ªÉ tr√°nh l·ªçc qu√° nhi·ªÅu l·∫ßn khi g√µ t√¨m ki·∫øm
    const debounceTimer = setTimeout(() => {
      let filtered = [...products];

      // L·ªçc theo th∆∞∆°ng hi·ªáu
      if (filters.brand !== "T·∫•t c·∫£") {
        filtered = filtered.filter((p) => p.brand === filters.brand);
      }

      // L·ªçc theo t·ª´ kho√° t√¨m ki·∫øm
      if (filters.search.trim()) {
        const searchTerm = filters.search.toLowerCase().trim();
        filtered = filtered.filter((p) =>
          p.name.toLowerCase().includes(searchTerm)
        );
      }

      setFilteredProducts(filtered);
      setIsSearching(false);
      setShowNoResults(filtered.length === 0);
      setCurrentPage(1); // Reset v·ªÅ trang 1 khi thay ƒë·ªïi b·ªô l·ªçc
    }, SEARCH_DEBOUNCE);

    // Cleanup: hu·ª∑ timer n·∫øu filters thay ƒë·ªïi li√™n t·ª•c
    return () => clearTimeout(debounceTimer);
  }, [filters, products, isLoading]);

  // --- X·ª¨ L√ù S·ª∞ KI·ªÜN ---

  /**
   * X·ª≠ l√Ω chuy·ªÉn trang trong ph√¢n trang
   * @param {number} page - Trang mu·ªën chuy·ªÉn ƒë·∫øn
   */
  const handlePageChange = useCallback(
    (page) => {
      const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);
      // Gi·ªõi h·∫°n trang trong kho·∫£ng h·ª£p l·ªá [1, totalPages]
      const newPage = Math.min(Math.max(page, 1), totalPages);
      setCurrentPage(newPage);
    },
    [filteredProducts]
  );

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi gi√° tr·ªã trong √¥ t√¨m ki·∫øm
   * @param {Event} e - S·ª± ki·ªán change
   */
  const handleFilterChange = useCallback((e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  }, []);

  /**
   * X·ª≠ l√Ω khi ch·ªçn th∆∞∆°ng hi·ªáu
   * @param {string} brand - Th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn
   */
  const handleBrandSelect = useCallback((brand) => {
    setFilters((prev) => ({ ...prev, brand }));
  }, []);

  /**
   * S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° t·ª´ th·∫•p ƒë·∫øn cao
   */
  const sortLowToHigh = useCallback(() => {
    const sorted = [...filteredProducts].sort((a, b) => a.price - b.price);
    setFilteredProducts(sorted);
    setCurrentPage(1);
  }, [filteredProducts]);

  /**
   * S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° t·ª´ cao ƒë·∫øn th·∫•p
   */
  const sortHighToLow = useCallback(() => {
    const sorted = [...filteredProducts].sort((a, b) => b.price - a.price);
    setFilteredProducts(sorted);
    setCurrentPage(1);
  }, [filteredProducts]);

  /**
   * Reset t·∫•t c·∫£ b·ªô l·ªçc v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
   */
  const resetFilters = useCallback(() => {
    setFilters({ brand: "T·∫•t c·∫£", search: "" });
  }, []);

  // --- T√çNH TO√ÅN D·ªÆ LI·ªÜU HI·ªÇN TH·ªä ---
  
  // T√≠nh t·ªïng s·ªë trang cho ph√¢n trang
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);
  
  // V·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa d·ªØ li·ªáu trang hi·ªán t·∫°i
  const startIndex = (currentPage - 1) * PRODUCTS_PER_PAGE;
  
  // L·∫•y danh s√°ch s·∫£n ph·∫©m cho trang hi·ªán t·∫°i
  const currentProducts = filteredProducts.slice(
    startIndex,
    startIndex + PRODUCTS_PER_PAGE
  );

  // --- RENDER THEO TR·∫†NG TH√ÅI ---

  // Hi·ªÉn th·ªã m√†n h√¨nh loading khi ƒëang t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  if (isLoading && filteredProducts.length === 0 && !error) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
      </div>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥
  if (error && filteredProducts.length === 0) {
    return (
      <div className="status error">
        <p>‚ùå {error}</p>
        <button
          onClick={() => window.location.reload()}
          className="retry-button"
          aria-label="Th·ª≠ l·∫°i t·∫£i l·∫°i trang"
        >
          Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  // --- RENDER CH√çNH ---
  return (
    <main className="product-page">
      {/* Ph·∫ßn carousel qu·∫£ng c√°o */}
      <div className="carousel-section">
        <Slider {...sliderSettings}>
          {SLIDES.map((slide, i) => (
            <Slide key={i} slide={slide} />
          ))}
        </Slider>
      </div>

      <h1 className="page-title">Danh s√°ch s·∫£n ph·∫©m</h1>

      {/* Ph·∫ßn b·ªô l·ªçc v√† t√¨m ki·∫øm */}
      <div className="filter-section">
        {/* √î t√¨m ki·∫øm */}
        <input
          type="text"
          name="search"
          value={filters.search}
          onChange={handleFilterChange}
          className="search-input"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n"
        />
        
        {/* B·ªô l·ªçc th∆∞∆°ng hi·ªáu */}
        <BrandFilter
          brands={BRANDS}
          selectedBrand={filters.brand}
          onBrandSelect={handleBrandSelect}
        />
        
        {/* N√∫t s·∫Øp x·∫øp gi√° */}
        <button
          className="sort-button"
          onClick={sortLowToHigh}
          aria-label="S·∫Øp x·∫øp gi√° t·ª´ th·∫•p t·ªõi cao"
        >
          Gi√° t·ª´ th·∫•p t·ªõi cao
        </button>
        <button
          className="sort-button"
          onClick={sortHighToLow}
          aria-label="S·∫Øp x·∫øp gi√° t·ª´ cao t·ªõi th·∫•p"
        >
          Gi√° t·ª´ cao t·ªõi th·∫•p
        </button>
        
        {/* N√∫t reset b·ªô l·ªçc - ch·ªâ hi·ªán khi c√≥ b·ªô l·ªçc ƒë∆∞·ª£c √°p d·ª•ng */}
        {(filters.brand !== "T·∫•t c·∫£" || filters.search.trim()) && (
          <button
            onClick={resetFilters}
            className="reset-filters-button"
            aria-label="X√≥a t·∫•t c·∫£ b·ªô l·ªçc"
          >
            <span className="reset-icon">‚úï</span> X√≥a b·ªô l·ªçc
          </button>
        )}
      </div>

      {/* Ph·∫ßn hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m */}
      <div className="product-list">
        {isSearching && !isLoading ? (
          // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t√¨m ki·∫øm/l·ªçc
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p className="loading-text">ƒêang x·ª≠ l√Ω...</p>
          </div>
        ) : showNoResults ? (
          // Hi·ªÉn th·ªã khi kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi b·ªô l·ªçc
          <div className="no-products-container">
            <p className="no-products-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p</p>
          </div>
        ) : (
          // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m d·∫°ng l∆∞·ªõi
          <div className="product-grid">
            {currentProducts.map((product) => (
              <ProductCard key={product.id} product={product} />
            ))}
          </div>
        )}
      </div>

      {/* Ph·∫ßn ph√¢n trang - ch·ªâ hi·ªÉn th·ªã khi c√≥ nhi·ªÅu h∆°n 1 trang */}
      {filteredProducts.length > 0 && totalPages > 1 && (
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        />
      )}
    </main>
  );
};

export default ProductPage;