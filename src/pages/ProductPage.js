// pages/ProductPage.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import "./ProductPage.css";

// Constants
const API_URL = `${process.env.PUBLIC_URL}/db.json`;
const MESSAGES = {
  LOADING: "‚è≥ ƒêang t·∫£i...",
  ERROR_FETCH: "‚ùå Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!",
};
const PRODUCTS_PER_PAGE = 8; // S·ªë s·∫£n ph·∫©m m·ªói trang
const BRANDS = ["T·∫•t c·∫£", "Xiaomi", "iPhone", "Samsung"]; // Danh s√°ch th∆∞∆°ng hi·ªáu

// Component ProductPage - Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
const ProductPage = () => {
  const [products, setProducts] = useState([]); // State l∆∞u danh s√°ch s·∫£n ph·∫©m g·ªëc
  const [filteredProducts, setFilteredProducts] = useState([]); // State l∆∞u danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
  const [loading, setLoading] = useState(true); // State theo d√µi tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  const [error, setError] = useState(null); // State l∆∞u th√¥ng b√°o l·ªói
  const [currentPage, setCurrentPage] = useState(1); // State l∆∞u trang hi·ªán t·∫°i
  const [selectedBrand, setSelectedBrand] = useState("T·∫•t c·∫£"); // State l∆∞u th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn
  const [searchQuery, setSearchQuery] = useState(""); // State l∆∞u t·ª´ kh√≥a t√¨m ki·∫øm

  // Hook useEffect ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await fetch(API_URL);
        if (!response.ok) {
          throw new Error(MESSAGES.ERROR_FETCH);
        }
        const data = await response.json();
        const productList = Array.isArray(data) ? data : data.products || [];
        setProducts(productList);
        setFilteredProducts(productList); // Ban ƒë·∫ßu hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m
      } catch (err) {
        console.error("L·ªói:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  // Hook useEffect ƒë·ªÉ l·ªçc s·∫£n ph·∫©m khi th∆∞∆°ng hi·ªáu ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm thay ƒë·ªïi
  useEffect(() => {
    let filtered = products;

    // L·ªçc theo th∆∞∆°ng hi·ªáu
    if (selectedBrand !== "T·∫•t c·∫£") {
      filtered = filtered.filter((product) => product.brand === selectedBrand);
    }

    // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
    if (searchQuery.trim() !== "") {
      filtered = filtered.filter((product) =>
        product.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    setFilteredProducts(filtered);
    setCurrentPage(1); // Reset v·ªÅ trang 1 khi thay ƒë·ªïi b·ªô l·ªçc
  }, [selectedBrand, searchQuery, products]);

  // T√≠nh to√°n s·ªë trang v√† s·∫£n ph·∫©m hi·ªÉn th·ªã tr√™n trang hi·ªán t·∫°i
  const totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE); // T·ªïng s·ªë trang
  const startIndex = (currentPage - 1) * PRODUCTS_PER_PAGE; // Ch·ªâ s·ªë b·∫Øt ƒë·∫ßu c·ªßa s·∫£n ph·∫©m
  const currentProducts = filteredProducts.slice(startIndex, startIndex + PRODUCTS_PER_PAGE); // S·∫£n ph·∫©m tr√™n trang hi·ªán t·∫°i

  // X·ª≠ l√Ω chuy·ªÉn trang
  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  // X·ª≠ l√Ω ch·ªçn th∆∞∆°ng hi·ªáu
  const handleBrandFilter = (brand) => {
    setSelectedBrand(brand);
  };

  // X·ª≠ l√Ω thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  // X·ª≠ l√Ω giao di·ªán khi ƒëang t·∫£i
  if (loading) {
    return <p className="loading">{MESSAGES.LOADING}</p>;
  }

  // X·ª≠ l√Ω giao di·ªán khi c√≥ l·ªói
  if (error) {
    return <p className="error">{MESSAGES.ERROR_FETCH}</p>;
  }

  // Render danh s√°ch s·∫£n ph·∫©m
  return (
    <div className="product-page">
      <h2> Danh s√°ch s·∫£n ph·∫©m</h2>

      {/* B·ªô l·ªçc th∆∞∆°ng hi·ªáu v√† t√¨m ki·∫øm */}
      <div className="filter-section">
        <input
          type="text"
          className="search-input"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          value={searchQuery}
          onChange={handleSearchChange}
        />
        <div className="brand-buttons">
          {BRANDS.map((brand) => (
            <button
              key={brand}
              className={`brand-button ${selectedBrand === brand ? "active" : ""}`}
              onClick={() => handleBrandFilter(brand)}
            >
              {brand}
            </button>
          ))}
        </div>
      </div>

      <div className="product-list">
        {currentProducts.length > 0 ? (
          currentProducts.map((product) => (
            <div key={product.id} className="product-card">
              <img src={product.image} alt={product.name} className="product-image" />
              <h3>{product.name}</h3>
              <p className="price">üí∞ Gi√°: {product.price.toLocaleString("vi-VN")} VNƒê</p>
              <Link to={`/products/${product.id}`}>
                <button className="detail-button">Chi ti·∫øt</button>
              </Link>
            </div>
          ))
        ) : (
          <p className="no-products">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p.</p>
        )}
      </div>

      {/* Ph√¢n trang */}
      {totalPages > 1 && (
        <div className="pagination">
          <button
            className="pagination-button"
            onClick={handlePreviousPage}
            disabled={currentPage === 1}
          >
            Trang tr∆∞·ªõc
          </button>
          <span className="pagination-current">Trang {currentPage}</span>
          <button
            className="pagination-button"
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
          >
            Trang sau
          </button>
        </div>
      )}
    </div>
  );
};

export default ProductPage;