import React, { useState, useEffect, useCallback } from "react"; // Import c√°c hook c·∫ßn thi·∫øt t·ª´ th∆∞ vi·ªán React: useState ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ª•c b·ªô (danh s√°ch ng∆∞·ªùi d√πng, danh s√°ch ƒë∆°n h√†ng), useEffect ƒë·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• ph·ª• (side effects) nh∆∞ ƒë·ªçc d·ªØ li·ªáu t·ª´ localStorage khi component ƒë∆∞·ª£c mount, v√† useCallback ƒë·ªÉ ghi nh·ªõ c√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán (nh∆∞ x√≥a ng∆∞·ªùi d√πng).
import "./AdminDashboard.css"; // Import file CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng giao di·ªán cho component Admin Dashboard n√†y.

// --- ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë ---

// Kh√≥a s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω trong localStorage.
// Ph·∫£i kh·ªõp v·ªõi key ƒë∆∞·ª£c s·ª≠ d·ª•ng trong component Account.
const LOCAL_STORAGE_USERS_KEY = "users";
// Kh√≥a s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch t·∫•t c·∫£ c√°c ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t trong localStorage.
// Ph·∫£i kh·ªõp v·ªõi key ƒë∆∞·ª£c s·ª≠ d·ª•ng trong component OrderHistory v√† CartPage.
const LOCAL_STORAGE_ORDERS_KEY = "orders";

// --- Component AdminDashboard ---
// Component n√†y hi·ªÉn th·ªã giao di·ªán qu·∫£n tr·ªã ƒë∆°n gi·∫£n, cho ph√©p xem danh s√°ch ng∆∞·ªùi d√πng
// v√† c√°c ƒë∆°n h√†ng m√† h·ªç ƒë√£ ƒë·∫∑t (d·ª±a tr√™n d·ªØ li·ªáu l∆∞u trong localStorage).
const AdminDashboard = () => {
  // --- State qu·∫£n l√Ω d·ªØ li·ªáu ---
  // State 'users': L∆∞u tr·ªØ danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω. Ban ƒë·∫ßu l√† m·∫£ng r·ªóng.
  const [users, setUsers] = useState([]);
  // State 'orders': L∆∞u tr·ªØ danh s√°ch t·∫•t c·∫£ c√°c ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t. Ban ƒë·∫ßu l√† m·∫£ng r·ªóng.
  const [orders, setOrders] = useState([]);
  // State 'isLoading': Boolean theo d√µi tr·∫°ng th√°i ƒëang t·∫£i d·ªØ li·ªáu. Ban ƒë·∫ßu l√† true.
  const [isLoading, setIsLoading] = useState(true);
  // State 'error': L∆∞u tr·ªØ th√¥ng b√°o l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ khi t·∫£i d·ªØ li·ªáu. Ban ƒë·∫ßu l√† null.
  const [error, setError] = useState(null);

  // --- Effect hook ƒë·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ localStorage khi component mount ---
  // Effect n√†y ch·∫°y m·ªôt l·∫ßn duy nh·∫•t sau l·∫ßn render ƒë·∫ßu ti√™n c·ªßa component.
  useEffect(() => {
    const loadData = () => {
      try {
        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i l·ªói
        setError(null);

        // 1. T·∫£i danh s√°ch ng∆∞·ªùi d√πng t·ª´ localStorage
        const storedUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USERS_KEY)) || [];
        setUsers(storedUsers); // C·∫≠p nh·∫≠t state users

        // 2. T·∫£i danh s√°ch ƒë∆°n h√†ng t·ª´ localStorage
        const storedOrders = JSON.parse(localStorage.getItem(LOCAL_STORAGE_ORDERS_KEY)) || [];
        // S·∫Øp x·∫øp ƒë∆°n h√†ng theo ng√†y gi·∫£m d·∫ßn (ƒë∆°n m·ªõi nh·∫•t tr∆∞·ªõc)
        const sortedOrders = storedOrders.sort(
          (a, b) => new Date(b.date) - new Date(a.date)
        );
        setOrders(sortedOrders); // C·∫≠p nh·∫≠t state orders

        console.log("ƒê√£ t·∫£i d·ªØ li·ªáu admin:", { users: storedUsers, orders: sortedOrders });

      } catch (err) {
        // B·∫Øt l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ khi ƒë·ªçc ho·∫∑c parse d·ªØ li·ªáu t·ª´ localStorage
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu admin t·ª´ localStorage:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu qu·∫£n tr·ªã."); // ƒê·∫∑t th√¥ng b√°o l·ªói
        setUsers([]); // ƒê·∫£m b·∫£o state l√† m·∫£ng r·ªóng khi c√≥ l·ªói
        setOrders([]);
      } finally {
        // K·∫øt th√∫c qu√° tr√¨nh t·∫£i
        setIsLoading(false);
      }
    };

    // Gi·∫£ l·∫≠p th·ªùi gian t·∫£i nh·ªè ƒë·ªÉ th·∫•y tr·∫°ng th√°i loading (kh√¥ng c·∫ßn trong th·ª±c t·∫ø v·ªõi localStorage)
    const timer = setTimeout(loadData, 500);

    // Cleanup function: X√≥a timer n·∫øu component unmount tr∆∞·ªõc khi t·∫£i xong
    return () => clearTimeout(timer);

  }, []); // Dependency array r·ªóng []: Effect ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount.

  // --- H√†m x·ª≠ l√Ω x√≥a ng∆∞·ªùi d√πng ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ghi nh·ªõ h√†m. H√†m n√†y s·∫Ω ƒë∆∞·ª£c t·∫°o l·∫°i khi state 'users' ho·∫∑c 'orders' thay ƒë·ªïi.
  const handleDeleteUser = useCallback((usernameToDelete) => {
      // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
      if (!window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng "${usernameToDelete}" v√† t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa h·ªç kh√¥ng?`)) {
          return; // N·∫øu ng∆∞·ªùi d√πng h·ªßy, d·ª´ng l·∫°i
      }

      // 1. X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch users
      const updatedUsers = users.filter(user => user.username !== usernameToDelete);
      setUsers(updatedUsers);
      localStorage.setItem(LOCAL_STORAGE_USERS_KEY, JSON.stringify(updatedUsers));

      // 2. X√≥a t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë√≥
      const updatedOrders = orders.filter(order => order.username !== usernameToDelete);
      setOrders(updatedOrders);
      localStorage.setItem(LOCAL_STORAGE_ORDERS_KEY, JSON.stringify(updatedOrders));

      console.log(`ƒê√£ x√≥a ng∆∞·ªùi d√πng "${usernameToDelete}" v√† c√°c ƒë∆°n h√†ng li√™n quan.`);

  }, [users, orders]); // Dependencies: c·∫ßn truy c·∫≠p users v√† orders ƒë·ªÉ l·ªçc

  // --- Render giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i loading v√† l·ªói ---

  // N·∫øu ƒëang t·∫£i, hi·ªÉn th·ªã th√¥ng b√°o loading
  if (isLoading) {
    return (
      <div className="admin-container loading-state">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i d·ªØ li·ªáu qu·∫£n tr·ªã...</p>
      </div>
    );
  }

  // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  if (error) {
    return (
      <div className="admin-container error-state">
        <p className="error-message">‚ùå {error}</p>
        {/* C√≥ th·ªÉ th√™m n√∫t th·ª≠ l·∫°i ho·∫∑c quay v·ªÅ trang ch·ªß */}
      </div>
    );
  }

  // --- Render giao di·ªán ch√≠nh khi d·ªØ li·ªáu ƒë√£ t·∫£i xong ---
  return (
    <div className="admin-container">
      <h1 className="admin-title">üìä B·∫£ng ƒëi·ªÅu khi·ªÉn Admin</h1>

      {/* Ph·∫ßn hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng */}
      <section className="admin-section">
        <h2 className="section-title">üë• Danh s√°ch ng∆∞·ªùi d√πng ({users.length})</h2>
        {users.length === 0 ? (
          <p className="empty-state">Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒëƒÉng k√Ω.</p>
        ) : (
          <ul className="user-list">
            {users.map((user, index) => {
                // L·ªçc ra c√°c ƒë∆°n h√†ng thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i d·ª±a tr√™n username
                const userOrders = orders.filter(order => order.username === user.username);

                return (
                  <li key={index} className="user-item">
                    <div className="user-header-admin">
                        <h3 className="user-username">üë§ {user.username}</h3>
                        {/* N√∫t x√≥a ng∆∞·ªùi d√πng */}
                        <button
                            className="delete-user-button"
                            onClick={() => handleDeleteUser(user.username)}
                            aria-label={`X√≥a ng∆∞·ªùi d√πng ${user.username}`}
                        >
                            üóëÔ∏è X√≥a ng∆∞·ªùi d√πng
                        </button>
                    </div>


                    {/* Hi·ªÉn th·ªã c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng n√†y */}
                    <div className="user-orders">
                      <h4>üì¶ ƒê∆°n h√†ng c·ªßa {user.username} ({userOrders.length}):</h4>
                      {userOrders.length === 0 ? (
                          <p className="empty-state-small">Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o t·ª´ ng∆∞·ªùi d√πng n√†y.</p>
                      ) : (
                          <ul className="order-list-admin">
                              {userOrders.map(order => (
                                  <li key={order.id} className="order-item-admin">
                                      <p><strong>ID ƒê∆°n h√†ng:</strong> #{order.id}</p>
                                      <p><strong>Ng√†y ƒë·∫∑t:</strong> {new Date(order.date).toLocaleString('vi-VN')}</p>
                                      <p><strong>T·ªïng ti·ªÅn:</strong> {order.totalPrice.toLocaleString('vi-VN')} VNƒê</p>
                                      <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {order.shippingInfo.name}</p>
                                      <p><strong>ƒê·ªãa ch·ªâ:</strong> {order.shippingInfo.address}</p>
                                      <p><strong>ƒêi·ªán tho·∫°i:</strong> {order.shippingInfo.phone}</p>
                                      <h5>Chi ti·∫øt s·∫£n ph·∫©m:</h5>
                                      <ul className="order-items-detail">
                                          {order.items.map(item => (
                                              <li key={item.id}>
                                                  {item.name} (x{item.quantity}) - {(item.price * item.quantity).toLocaleString('vi-VN')} VNƒê
                                              </li>
                                          ))}
                                      </ul>
                                  </li>
                              ))}
                          </ul>
                      )}
                    </div>
                  </li>
                );
            })}
          </ul>
        )}
      </section>

       {/* Ph·∫ßn hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng (T√πy ch·ªçn, c√≥ th·ªÉ b·ªè n·∫øu ƒë√£ hi·ªÉn th·ªã theo user) */}
       {/* N·∫øu b·∫°n ƒë√£ hi·ªÉn th·ªã ƒë∆°n h√†ng trong ph·∫ßn user, c√≥ th·ªÉ b·ªè ph·∫ßn n√†y */}
       {/* <section className="admin-section">
           <h2 className="section-title">üì¶ T·∫•t c·∫£ ƒë∆°n h√†ng ({orders.length})</h2>
           {orders.length === 0 ? (
               <p className="empty-state">Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c ƒë·∫∑t.</p>
           ) : (
               <ul className="order-list-admin">
                   {orders.map(order => (
                       <li key={order.id} className="order-item-admin">
                           <p><strong>ID ƒê∆°n h√†ng:</strong> #{order.id}</p>
                           <p><strong>Ng√†y ƒë·∫∑t:</strong> {new Date(order.date).toLocaleString('vi-VN')}</p>
                           <p><strong>T·ªïng ti·ªÅn:</strong> {order.totalPrice.toLocaleString('vi-VN')} VNƒê</p>
                           <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {order.shippingInfo.name}</p>
                           <p><strong>ƒê·ªãa ch·ªâ:</strong> {order.shippingInfo.address}</p>
                           <p><strong>ƒêi·ªán tho·∫°i:</strong> {order.shippingInfo.phone}</p>
                           <h5>Chi ti·∫øt s·∫£n ph·∫©m:</h5>
                           <ul className="order-items-detail">
                               {order.items.map(item => (
                                   <li key={item.id}>
                                       {item.name} (x{item.quantity}) - {(item.price * item.quantity).toLocaleString('vi-VN')} VNƒê
                                   </li>
                               ))}
                           </ul>
                       </li>
                   ))}
               </ul>
           )}
       </section> */}

    </div>
  );
};

export default AdminDashboard; // Export component AdminDashboard ƒë·ªÉ s·ª≠ d·ª•ng trong c·∫•u h√¨nh ƒë·ªãnh tuy·∫øn.
