// src/pages/AdminDashboard.js

// Import necessary React hooks: useState, useEffect, useCallback, useMemo
import React, { useState, useEffect, useCallback, useMemo } from "react"; // Th√™m useMemo
// Import the CSS file for styling this component
import "./AdminDashboard.css";

// Define constant keys to access data in localStorage
const LOCAL_STORAGE_USERS_KEY = "users"; // Key for user data
const LOCAL_STORAGE_ORDERS_KEY = "orders"; // Key for order data

// Define the AdminDashboard functional component
const AdminDashboard = () => {
  // --- State Variables ---
  const [users, setUsers] = useState([]); // List of users
  const [orders, setOrders] = useState([]); // List of orders
  const [isLoading, setIsLoading] = useState(true); // Loading status
  const [error, setError] = useState(null); // Error message

  // --- Effect Hook to Load Data from localStorage on Mount ---
  // Effect n√†y ch·∫°y m·ªôt l·∫ßn duy nh·∫•t khi component ƒë∆∞·ª£c mount ƒë·ªÉ t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu.
  useEffect(() => {
    const loadData = () => {
      try {
        setError(null); // Clear any previous error

        // --- T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng ---
        const storedUsersData = localStorage.getItem(LOCAL_STORAGE_USERS_KEY);
        let storedUsers = [];
        if (storedUsersData) {
            try {
                // C·ªë g·∫Øng parse d·ªØ li·ªáu JSON
                storedUsers = JSON.parse(storedUsersData);
            } catch (e) {
                console.error("Error parsing user data:", e);
            }
        }
        // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ t·∫£i l√† m·ªôt m·∫£ng, n·∫øu kh√¥ng th√¨ s·ª≠ d·ª•ng m·∫£ng r·ªóng
        if (!Array.isArray(storedUsers)) {
            console.warn("User data is not an array, using empty array");
            storedUsers = [];
        }

        // --- T·∫£i d·ªØ li·ªáu ƒë∆°n h√†ng ---
        const storedOrdersData = localStorage.getItem(LOCAL_STORAGE_ORDERS_KEY);
        let storedOrders = [];
        if (storedOrdersData) {
            try {
                // C·ªë g·∫Øng parse d·ªØ li·ªáu JSON
                storedOrders = JSON.parse(storedOrdersData);
            } catch (e) {
                console.error("Error parsing order data:", e);
            }
        }
        // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ t·∫£i l√† m·ªôt m·∫£ng, n·∫øu kh√¥ng th√¨ s·ª≠ d·ª•ng m·∫£ng r·ªóng
        if (!Array.isArray(storedOrders)) {
            console.warn("Order data is not an array, using empty array");
            storedOrders = [];
        }


        // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu ƒë√£ t·∫£i, s·∫Øp x·∫øp ƒë∆°n h√†ng theo ng√†y gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
        setUsers(storedUsers);
        // T·∫°o b·∫£n sao tr∆∞·ªõc khi s·∫Øp x·∫øp ƒë·ªÉ tr√°nh thay ƒë·ªïi m·∫£ng g·ªëc
        setOrders([...storedOrders].sort((a, b) => new Date(b.date) - new Date(a.date)));

        // console.log("ƒê√£ t·∫£i d·ªØ li·ªáu admin:", { users: storedUsers, orders: storedOrders }); // Dev log

      } catch (err) {
        // B·∫Øt c√°c l·ªói kh√°c c√≥ th·ªÉ x·∫£y ra trong qu√° tr√¨nh t·∫£i
        console.error("Error loading admin data:", err);
        setError("Failed to load admin data. Please try again later.");
        setUsers([]); // Reset state v·ªÅ r·ªóng khi c√≥ l·ªói
        setOrders([]);
      } finally {
        setIsLoading(false); // Qu√° tr√¨nh t·∫£i ho√†n th√†nh
      }
    };

    // Simulate loading delay (optional) - T·∫°m ho√£n vi·ªác t·∫£i d·ªØ li·ªáu ƒë·ªÉ th·∫•y hi·ªáu ·ª©ng loading
    const timer = setTimeout(loadData, 500);

    // Cleanup function: clear timeout n·∫øu component b·ªã unmount tr∆∞·ªõc khi timeout k·∫øt th√∫c
    return () => clearTimeout(timer);

  }, []); // Dependency array r·ªóng []: effect ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t khi mount

  // --- Callback Hook ƒë·ªÉ x√≥a ng∆∞·ªùi d√πng v√† c√°c ƒë∆°n h√†ng c·ªßa h·ªç ---
  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ h√†m n√†y kh√¥ng b·ªã t·∫°o l·∫°i kh√¥ng c·∫ßn thi·∫øt
  const handleDeleteUser = useCallback((usernameToDelete) => {
    // Dialog x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
    if (!window.confirm(`Are you sure you want to delete user "${usernameToDelete}" and all their orders?`)) {
      return; // D·ª´ng n·∫øu ng∆∞·ªùi d√πng h·ªßy b·ªè
    }

    // L·ªçc m·∫£ng ng∆∞·ªùi d√πng: gi·ªØ l·∫°i nh·ªØng ng∆∞·ªùi d√πng c√≥ username kh√°c v·ªõi username c·∫ßn x√≥a
    const updatedUsers = users.filter(user => user?.username !== usernameToDelete);
    // L·ªçc m·∫£ng ƒë∆°n h√†ng: gi·ªØ l·∫°i nh·ªØng ƒë∆°n h√†ng c√≥ username kh√°c v·ªõi username c·∫ßn x√≥a
    const updatedOrders = orders.filter(order => order?.username !== usernameToDelete);

    // C·∫≠p nh·∫≠t state v·ªõi danh s√°ch ƒë√£ l·ªçc
    setUsers(updatedUsers);
    setOrders(updatedOrders);

    // L∆∞u danh s√°ch ƒë√£ c·∫≠p nh·∫≠t tr·ªü l·∫°i localStorage
    try {
        localStorage.setItem(LOCAL_STORAGE_USERS_KEY, JSON.stringify(updatedUsers));
        localStorage.setItem(LOCAL_STORAGE_ORDERS_KEY, JSON.stringify(updatedOrders));
    } catch (e) {
        console.error(`Error saving data after deleting user "${usernameToDelete}":`, e);
        // Th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng n·∫øu kh√¥ng l∆∞u ƒë∆∞·ª£c
        alert("Error saving changes. Data may not be fully updated.");
    }


  }, [users, orders]); // Dependencies: ph·ª• thu·ªôc v√†o state users v√† orders hi·ªán t·∫°i

  // --- Render c√≥ ƒëi·ªÅu ki·ªán ---
  // Hi·ªÉn th·ªã spinner loading khi ƒëang t·∫£i d·ªØ li·ªáu
  if (isLoading) {
    return (
      <div className="admin-container loading-state">
        <div className="loading-spinner"></div>
        <p>Loading admin data...</p>
      </div>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥
  if (error) {
    return (
      <div className="admin-container error-state">
        <p className="error-message">‚ùå {error}</p>
      </div>
    );
  }

  // --- Render ch√≠nh c·ªßa Component ---
  return (
    <div className="admin-container">
      <h1 className="admin-title">üìä Admin Dashboard</h1>

      {/* Ph·∫ßn hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng */}
      <section className="admin-section">
        {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng, ki·ªÉm tra an to√†n users l√† m·∫£ng */}
        <h2 className="section-title">üë• Users ({Array.isArray(users) ? users.length : 0})</h2>

        {/* Render c√≥ ƒëi·ªÅu ki·ªán: N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o */}
        {Array.isArray(users) && users.length === 0 ? ( // Ki·ªÉm tra an to√†n v√† s·ªë l∆∞·ª£ng
            <p className="empty-state">No users registered yet.</p>
        ) : (
            // Render danh s√°ch ng∆∞·ªùi d√πng
            <ul className="user-list">
              {/* ƒê·∫£m b·∫£o users l√† m·∫£ng tr∆∞·ªõc khi map */}
              {Array.isArray(users) && users.map((user) => {
                // Ki·ªÉm tra an to√†n cho ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng v√† username
                if (!user || !user.username) {
                    console.warn("Invalid user data:", user);
                    return null; // B·ªè qua render ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá
                }
                 // L·ªçc ƒë∆°n h√†ng cho ng∆∞·ªùi d√πng hi·ªán t·∫°i (C√≥ th·ªÉ ·∫£nh h∆∞·ªüng hi·ªáu su·∫•t v·ªõi t·∫≠p d·ªØ li·ªáu l·ªõn)
                 // N·∫øu hi·ªáu su·∫•t l√† v·∫•n ƒë·ªÅ, c√¢n nh·∫Øc ti·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng tr∆∞·ªõc khi render.
                 const userOrders = Array.isArray(orders) ? orders.filter(order => order?.username === user.username) : [];


                return (
                  // S·ª≠ d·ª•ng user.username l√†m key duy nh·∫•t
                  <li key={user.username} className="user-item">
                    <div className="user-header-admin">
                      <h3 className="user-username">üë§ {user.username}</h3> {/* Hi·ªÉn th·ªã username */}
                       {/* N√∫t x√≥a ng∆∞·ªùi d√πng */}
                      <button
                        className="delete-user-button"
                        onClick={() => handleDeleteUser(user.username)}
                        aria-label={`Delete user ${user.username}`}
                      >
                        üóëÔ∏è Delete User
                      </button>
                    </div>

                    {/* Ph·∫ßn hi·ªÉn th·ªã ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng n√†y */}
                    <div className="user-orders">
                      <h4>üì¶ Orders by {user.username} ({userOrders.length}):</h4>

                      {/* Render c√≥ ƒëi·ªÅu ki·ªán: N·∫øu ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ ƒë∆°n h√†ng */}
                      {userOrders.length === 0 ? (
                          <p className="empty-state-small">No orders from this user yet.</p>
                      ) : (
                          // Render danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
                          <ul className="order-list-admin">
                            {/* ƒê·∫£m b·∫£o userOrders l√† m·∫£ng tr∆∞·ªõc khi map */}
                            {Array.isArray(userOrders) && userOrders.map(order => {
                                 // Ki·ªÉm tra an to√†n cho ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng v√† ID (d√πng l√†m key)
                                 if (!order || typeof order.id === 'undefined') {
                                     console.warn("Invalid order data:", order);
                                     return null; // B·ªè qua render ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá
                                 }
                                return (
                                  // S·ª≠ d·ª•ng order.id l√†m key duy nh·∫•t
                                  <li key={order.id} className="order-item-admin">
                                     {/* Hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng v·ªõi ki·ªÉm tra an to√†n */}
                                    <p><strong>Order ID:</strong> #{order.id}</p>
                                     {/* ƒê·ªãnh d·∫°ng ng√†y/gi·ªù v·ªõi ki·ªÉm tra an to√†n cho order.date */}
                                    <p><strong>Date:</strong> {order.date ? new Date(order.date).toLocaleString('vi-VN') : 'N/A'}</p>
                                     {/* ƒê·ªãnh d·∫°ng t·ªïng ti·ªÅn v·ªõi ki·ªÉm tra an to√†n v√† gi√° tr·ªã m·∫∑c ƒë·ªãnh */}
                                    <p><strong>Total:</strong> {(order?.totalPrice || 0).toLocaleString('vi-VN')} VNƒê</p>
                                     {/* Th√¥ng tin giao h√†ng v·ªõi optional chaining v√† gi√° tr·ªã m·∫∑c ƒë·ªãnh */}
                                     <p><strong>Recipient:</strong> {order?.shippingInfo?.name || 'N/A'}</p>
                                     <p><strong>Address:</strong> {order?.shippingInfo?.address || 'N/A'}</p>
                                     <p><strong>Phone:</strong> {order?.shippingInfo?.phone || 'N/A'}</p>

                                     {/* C√°c s·∫£n ph·∫©m trong ƒë∆°n h√†ng */}
                                    <h5>Order Items:</h5>
                                     {/* ƒê·∫£m b·∫£o order.items l√† m·∫£ng tr∆∞·ªõc khi map */}
                                     {Array.isArray(order?.items) && order.items.map((item, itemIndex) => {
                                          // Ki·ªÉm tra an to√†n cho ƒë·ªëi t∆∞·ª£ng item (d√πng l√†m key, fallback v·ªÅ index)
                                          if (!item) {
                                               console.warn("Invalid item data:", item);
                                               return null; // B·ªè qua render item kh√¥ng h·ª£p l·ªá
                                          }
                                          return (
                                              // S·ª≠ d·ª•ng item.id l√†m key, fallback v·ªÅ itemIndex
                                              <li key={item.id || itemIndex}>
                                                  {/* Hi·ªÉn th·ªã chi ti·∫øt item v·ªõi ki·ªÉm tra an to√†n */}
                                                  {item?.name || 'Unknown Product'} (x{item?.quantity || 0}) - {((item?.price || 0) * (item?.quantity || 0)).toLocaleString('vi-VN')} VNƒê
                                              </li>
                                          );
                                      })}
                                       {/* Th√¥ng b√°o n·∫øu danh s√°ch item r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá */}
                                       {Array.isArray(order?.items) && order.items.length === 0 && (
                                            <p className="empty-state-small">No items in this order.</p>
                                        )}
                                        {!Array.isArray(order?.items) && (
                                             <p className="empty-state-small">Invalid order items data.</p>
                                         )}
                                  </li>
                                );
                             })}
                          </ul>
                       )}
                    </div>
                  </li>
                );
              })}
            </ul>
        )}
      </section>
    </div>
  );
};

// Export the AdminDashboard component
export default AdminDashboard;
